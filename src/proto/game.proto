import "common.proto";
option java_package = "proto.line";

//用于客户端连接分线服务器所需要的认证包 
message m_auth_key_tos {     
    required string             	account_name             	= 1; // 账号名     
    required int32                	role_id                    	= 2; //角色id 
    required string                	key                        	= 3; // 认证key，从login server获得 
	required int32					time						= 4;
}

message m_auth_key_toc {     
    required bool                	succ                    = 1; //是否成功     
    optional string                	reason                  = 2; //失败时保存失败的原因 
    optional p_role                	role_details            = 3; //角色详细信息
    repeated p_bag_content      	bags                    = 4;
	optional p_family_info			family					= 5; //门派信息
	optional int32					server_time				= 6; // 服务器当前时间，单位为秒
}
//客户端重连接chat socket时，获取新的连接key接口
message m_auth_chat_key_tos{
   required int32 times = 1[default=1];//重连次数
}
message m_auth_chat_key_toc {
    required bool succ = 1;//重连获取信息是否成功
    required int32 times = 2;//重连次数
    optional string reason = 3;//重连失败理由
    optional string account = 4;//平台账户名
    optional int32 roleid = 5;//角色id
    optional int32 timestamp = 6;//时间戳
    optional string key = 7;//验证key
}

message p_bag_content {
    required int32              bag_id                  = 1;
    repeated p_goods            goods                   = 2;
    required int32              rows                    = 3[default=0];
    required int32              columns                 = 4[default=0];
    optional int32              typeid                  = 5;
    required int32              grid_number             = 6[default=0];
}


message p_skill_pos {
    required int32                       pos            = 1;
    required int32                       skill_id       = 2;
}

//玩家进入地图 
message m_map_enter_tos {     
    required int32                       map_id         = 1;
}

//进入游戏
message m_map_enter_toc {
    required bool                           succ                     = 1 [default=true];
    required bool                           return_self              = 2 [default=true];
    optional string                         reason                   = 3;
    //return_self 为true时代表附近玩家列表，为false时代表新加入得玩家
    repeated p_map_role                     roles                    = 4; 
    //周围的怪物
    repeated p_map_monster                  monsters                 = 5;
    //周围的掉落物
    repeated p_map_dropthing                dropthings               = 6;
    //周围的摊位
    repeated p_map_stall                    stalls                   = 7;
    //周围的采集物
    repeated p_map_collect                 	grafts                   = 8;
    repeated p_map_ybc                      ybcs                     = 9;    
    optional p_role_pos                     pos						 = 10;
    repeated p_map_server_npc               server_npcs              = 11;
    // 自己的p_map_role
    optional p_map_role                     role_map_info            = 12;
	  repeated p_map_pet                      pets                     = 13;
    repeated p_map_trap                     trap_list                = 14;
}

message m_map_slice_enter_toc {
    repeated p_map_role                     roles                    = 1; 
    //周围的怪物
    repeated p_map_monster                  monsters                 = 2;
    //周围的掉落物
    repeated p_map_dropthing                dropthings               = 3;
    //周围的摊位
    repeated p_map_stall                    stalls                   = 4;
    //周围的采集物
    repeated p_map_collect                 	grafts                    = 5;
    repeated p_map_ybc                      ybcs                     = 6;   
    required bool                           return_self              = 7 [default=true];
    repeated p_map_server_npc               server_npcs              = 8; 
    repeated p_map_pet                      pets                     = 9;
    repeated p_map_trap                     trap_list                = 10;
    //周围的篝火
	
	repeated int32                     		del_roles                = 20; 
    //周围的怪物
    repeated int32                  		del_monsters                 = 21;
    //周围的掉落物
    repeated int32                			del_dropthings               = 22;
    //周围的摊位
    repeated int32                    		del_stalls                   = 23;
    //周围的采集物
    repeated int32                 			del_grafts                   = 24;
    repeated int32                      	del_ybcs                     = 25;   
    repeated int32               			del_server_npcs              = 26; 
    repeated int32                          del_pets                     = 27;
    repeated int32                          del_trap_list                = 28; 
    optional int32                          enter_type                   = 29 [default=1]; // 1、普通 2、冲锋             
    optional p_pos                          src_pos                      = 30; // 起始位置
}

message m_map_update_actor_mapinfo_tos{
	required int32 							    actor_id 				= 1;
	required int32 							    actor_type 			    = 2;
    required int32                              map_id                  = 3;
}

//进入游戏
message m_map_update_actor_mapinfo_toc{
    required int32                              actor_id                = 1;
    required int32                              actor_type              = 2;
    optional p_map_role                         role_info               = 3;
    optional p_map_monster                      monster_info            = 4;
    optional p_map_server_npc                   server_npc              = 5;
	optional p_map_ybc							ybc_info				= 6;
	optional p_map_pet							pet_info				= 7;
}

//传送，消耗传送卷
message m_map_transfer_tos {
        required int32                          mapid                   = 1;
        required int32                          tx                      = 2;
        required int32                          ty                      = 3;
        //0普通、1快速任务、2返回门派(扣银子) 3新手任务无障碍传送
        required int32                          change_type             = 4; // 跳转类型
}

message m_map_transfer_toc {
        required bool                           succ                    = 1 [default=true];
        optional int32                          scroll_id               = 2;
        optional string                         reason                  = 3;
}

//本国人被国玩家杀死
message m_map_role_killed_toc {
        required string                         role_name               = 1; //谁被杀了
        required string                         killer_name             = 2; //杀人者姓名
        required int32                          faction_id              = 3; //杀人者国家
        required int32                          map_id                  = 4; //地图ID
        required int32                          tx                      = 5;
        required int32                          ty                      = 6;
}

//键盘走路
message m_move_keywalk_tos {
    required p_pos                              pos                     = 1;
}

message m_move_keywalk_toc {
    required int32                              role_id                 = 1;
    required p_pos                              pos                     = 2;
}

//键盘方式停止走路
message m_move_keystop_tos {
    required p_pos                              pos                     = 1;
}

//键盘方式停止走路
message m_move_keystop_toc {
    required int32            role_id                        = 1;
    required p_pos            pos                            = 2;
}

//map
//走路（一条路径，包括经过的每一个格子坐标）
// path 是一个数组，数组的每一项都是一个 { tx, ty } 表示具体某一个格子
message m_move_walk_path_tos {
    required p_walk_path        walk_path                = 1;
}

// 走路（一条路径），返回结果
message m_move_walk_path_toc {
    required int32                 roleid                    = 1;
    required p_walk_path        walk_path                = 2;
}


// 走路（每到达下一个格子时发送给服务器一次新格子坐标）
message m_move_walk_tos {
    required p_pos            pos                            = 1;
}


//广播同步某个玩家的位置
message m_move_sync_toc {
    required int32          roleid      = 1;
    required p_pos            pos            = 2;
}

//某个玩家离开了地图
message m_map_quit_toc {
    required int32            roleid = 1;
}

//角色换形象
message m_skin_change_toc {
    required int32             roleid            = 1;
    required p_skin         skin            = 2;
}

message m_map_dropthing_enter_toc {
    repeated p_map_dropthing            dropthing                   = 1;
}

message m_map_dropthing_quit_toc {
    repeated int32                            dropthingid                    = 1;
}  

message m_map_dropthing_pick_tos {
    required int32                            dropthingid                    = 1;
}  

message m_map_dropthing_pick_toc {
    required bool                            succ                = 1[default = true];
    optional string                          reason              = 2;
    optional int32                           pick_type      	 = 3[default = 1];//1普通掉落物，2宝箱
    optional int32                           add_money           = 4[default = 0];
    optional int32                           money               = 5[default = 0];
    optional int32                           dropthingid         = 6;
    optional p_goods                         goods               = 7;
    optional int32                           num                 = 8;
    optional int32                           money_type          = 9[default = 0];//1绑定 2不绑定
} 

message m_map_change_map_tos {
        required int32                  mapid                   = 1;
        required int32                  tx                      = 2;
        required int32                  ty                      = 3;
}

message m_map_change_map_toc {
        required bool                   succ                    = 1 [default=true];
        optional int32                  mapid                   = 2;
        optional int32                  tx                      = 3;
        optional int32                  ty                      = 4;
        optional string                 reason                  = 5;
}

message m_map_change_pos_toc {
        required int32                  tx                       = 1;
        required int32                  ty                       = 2;
        required int32                  change_type              = 3; //位置跳转类型，1、普通，2、冲锋
}

//===================================== 战斗 模块    fight    =====================================
message m_config_getbuffs_tos {
}
message m_config_getbuffs_toc {
    required bool                   succ                = 1[default=true];
    optional string                 reason              = 2;
    repeated p_buf                  buffs               = 3; 
}


message p_buff_effect {
    required int32             effect_type        = 1;    //产生的哪一种效果
    required int32             effect_value    = 2;    //效果值
    required int32          buff_type       = 3;    //BUFF类型
}

message m_fight_buff_effect_toc{
    required int32          actor_id          = 1;
    required int32          actor_type        = 2;
    repeated p_buff_effect  buff_effect       = 3;
    optional int32          src_id            = 4;
    optional int32          src_type          = 5;
}

message m_fight_remove_buff_toc{
    required int32          roleid          = 1;
    repeated int32          buffid          = 2;
}

//---------------------------------
//函数：attack        攻击
//---------------------------------
//    单对单，发起攻击操作
message m_fight_attack_tos {
    required p_map_tile     	tile                                    = 1;    
    required int32            	skillid                                 = 2;    //技能ID
    optional int32          	target_id                               = 3;
    //0 代表宠物 1代表人 2代表怪物
    optional int32          	target_type                             = 4; //被攻击者类型
    optional int32            	src_type                                = 5 [default = 1]; //攻击者类型    
    required int32          	dir                                     = 6; //攻击时的方向
}

message p_attack_result {
    required int32          dest_id                 = 1;
    optional bool           is_erupt                = 3 [default=false]; //是否暴击
    optional bool           is_no_defence           = 4 [default=false]; //是否破甲
    optional bool           is_miss                 = 5 [default=false]; //是否闪避
    //0 代表宠物 1代表人 2代表怪物
    optional int32             dest_type                = 6; //被攻击方类型
    optional p_map_tile     dest_tile               = 7; //被攻击方的当前位置
    repeated p_actor_buf    buffs                   = 8;
    optional int32          result_type             = 9 [default=0]; //作用效果类型(如瞬间加血,减血)
    optional int32          result_value            = 10 [default=0]; //作用效果值
}


//返回给可视区域（9宫格）内的全部人，大部分角色都不需要知道进攻效果。
//返回给进攻方，防守方，以及双方的同一组队的人，必须包括 src_effect dest_effect，这样同队的人能看到头上掉血的效果。
message m_fight_attack_toc {
    required bool                     succ                    = 1 [default = true];
    required bool                     return_self             = 2 [default = true];
    optional string                   reason                  = 3;
    optional int32                    src_id                  = 4;
    optional int32                    skillid                 = 6; //技能ID
    optional p_pos                    src_pos                 = 7; //攻击方攻击时的位置，用于同步
    //0 代表宠物 1代表人 2代表怪物
    optional int32                    src_type                = 8; //攻击方类型
    repeated p_attack_result          result                  = 9;
    optional int32                    dir                     = 10; //发起攻击方的方向 
    optional p_pos                    dest_pos                = 11; //攻击方攻击时的位置，用于同步
    optional int32                    target_type             = 12;
    optional int32                    target_id               = 13;
    //90000攻速未到,90001技能冷却时间未到  90002攻击目标不存在
    optional int32                    reason_code             = 14;
}


//基本思路
//        怪物的死后重新刷新，相当于有新玩家进入地图
//        怪物的走动，相当于玩家的走动
//        怪物的进攻，相当于玩家的进攻
//        玩家进入另外1个9宫格时，获得的数据，除了其他玩家的数据，还有怪物的数据。
//        每个role进程表示一个玩家，对应的每个 monster 进程表示一个怪物，这个monster进程内部有简单AI。




//===================================== 组队 模块: team        =====================================

message p_team_role {
    required int32 role_id = 1;
    optional string role_name = 2;
    optional int32 sex = 3; //性别：0男，1女
    optional p_skin skin = 4;    
    optional int32 map_id = 5;
    optional string map_name = 6; //地图名称
    optional int32 tx = 7;
    optional int32 ty = 8;
    optional int32 hp = 9; //当前血值多少
    optional int32 mp = 10; //当前魔法值多少
    optional int32 max_hp = 11; //满血
    optional int32 max_mp = 12; //满魔
    optional int32 level = 13; //级别
    optional bool is_leader = 14 [default=false]; //是否队长，一个队伍只允许1个是队长
    optional bool is_follow = 15 [default=false]; ////是否跟随队长
    optional bool is_offline = 16 [default=false]; //是否下线了
    optional int32 offline_time = 17 [default=0]; //下线时的时间
    optional int32 five_ele_attr = 18 [default=0]; //五行属性 0：表示没有五行属性,1：金，2：木，3：水，4：火，5：土
    optional int32 five_ele_attr_level = 19 [default=0]; //五行级别，0：表示没有，
    optional int32 add_hp = 20 [default=0]; //五行加成-血，0:表示没有加成
    optional int32 add_mp = 21 [default=0]; //五行加成-魔，0:表示没有加成
    optional int32 add_phy_attack = 22 [default=0]; //五行加成-物功，0:表示没有加成
    optional int32 add_magic_attack = 23 [default=0]; //五行加成-魔功，0:表示没有加成
    optional int32 category = 24[default=0]; //玩家职业
    optional int32 faction_id = 25[default = 0];//国家id
}
//邀请某人加入队伍
message m_team_invite_tos {
        required int32 role_id = 1;
	// 1 为收徒 2 为拜师 0为普通组队
        required int32 type = 2 [default = 0];
        optional int32 team_id = 0 [default = 0];
}
//不管邀请操作，成功还是失败，都要有返回数据，而且返回给2个角色的数据不同的。
message m_team_invite_toc {
        required bool succ = 1 [default = true];
        required bool return_self = 2 [default = true];
        optional string reason = 3; //邀请操作成功，则这里不需要reason,也不需要返回详细内容。
        //下送给其它Client的数据在这里
        optional int32 role_id = 4;
        optional string role_name = 5;
        optional int32 team_id = 6;
        required int32 pick_type = 7 [default = 1]; // 物品拾取模式，1：自由拾取，2：独自拾取
        optional int32 leader_id = 8 [default = 0]; //队长角色id
	optional int32 type_id = 9 [default = 0]; // 0 正常组队 1为收徒组队 2 为拜师组队
}
//某人同意邀请，并加入队伍
message m_team_accept_tos {
        required int32 role_id = 1; //玩家ID
        optional int32 team_id = 2 [default = 0];//队伍ID
        optional int32 leader_id = 3 [default = 0];//队长角色id
        optional int32 type_id = 4 [default = 0]; //类型 0 正常 1收徒 2 拜师 
}
//返回给发起请求者的信息，包括 teamid,p_team_role (表明队伍目前有哪些人了)
//返回给队伍的所有人(除了新加入者)的信息，包括 teamid, roleid, rolename(表明谁新加入成功了)
message m_team_accept_toc {
        required bool succ = 1 [default = true];
        required bool return_self = 2 [default = true];
        optional string reason = 3;        
        repeated p_team_role role_list = 4;
        optional int32 role_id = 5;
        optional string role_name = 6;
        optional int32 team_id = 7;
        required int32 pick_type = 8 [default = 1]; // 物品拾取模式，1：自由拾取，2：独自拾取
        optional int32 type_id = 9 [default = 0]; //类型 0 正常 1收徒 2 拜师 
}
//某人拒绝邀请
message m_team_refuse_tos {
        required int32 role_id = 1;
        optional int32 team_id = 2 [default = 0];
        optional int32 leader_id = 3 [default = 0];//队长角色id
        optional int32 type_id = 4 [default = 0]; //类型 0 正常 1收徒 2 拜师 
}

//这个只返回给 队长，不需要返回给 发起拒绝操作的角色了。
//（就算是拒绝操作失败，也不用返回的，这种情况，就当是该玩家没同意就行，也没操作就可以了）
message m_team_refuse_toc {
        optional int32 role_id = 1;
        optional string role_name = 2;    //表明谁拒绝了加入组队
        optional int32 team_id = 3;
	optional int32 type_id = 4 [default = 0]; //类型 0 正常 1收徒 2 拜师 
}
//某人主动操作，退出/离开队伍
message m_team_leave_tos {
        required int32 team_id = 1;
}

//返回给队伍的全部人
//包括 teamid, p_team_role (退出后剩下哪些人)
//roleid, rolename(表明谁退出组队了)
message m_team_leave_toc {
        required bool succ = 1 [default = true];
        required bool return_self = 2 [default = true];
        optional string reason = 3;
        repeated p_team_role role_list = 4;    
        optional int32 role_id = 5;
        optional string role_name = 6;
        optional int32 team_id = 7;
}
// 队长把某人踢出队伍
message m_team_kick_tos {
        required int32 role_id = 1;
}
//返回给队伍的全部人
//包括 teamid, p_team_role_list (退出后剩下哪些人)
//roleid, rolename(表明谁被踢出队伍了)
message m_team_kick_toc {
        required bool succ = 1 [default = true];
        required bool return_self = 2 [default = true];
        optional string reason = 3;
        repeated p_team_role role_list = 4;
        optional int32 role_id = 5;
        optional string role_name = 6;
        optional int32 team_id = 7;
}
//某人离线/下线了
// 下线消息，是不会通过网络协议来发起的，是ERLANG内部消息机制
// 如果是队长离线了，队伍中的第2人自动成为队长。
//这个只返回给队伍里的所有人，除了那个已经下线的人。
//注意，这里只是下线了，p_team_role_list数组里，还是需要包括那个下线的人的，用状态特别标记出来
message m_team_offline_toc {
        required bool cache_offline = 1 [default = false];//false：真正的下线，true：缓冲下线
        repeated p_team_role role_list = 2;
        optional int32 role_id = 3;
        optional string role_name = 4;//表明谁下线了
        optional int32 team_id = 5;
}
//队长设置别人成为队长
// 队长设置别人成为队长，同时把自己在队伍中的顺序，降到最后一位。
// 不能是第2位，原因，很大可能该队长，是准备要退出游戏了。
message m_team_change_leader_tos {
        required int32             team_id        = 1;
        required int32             role_id        = 2;
        required string            role_name    = 3;    //将队长，让给谁来当
}
//返回给队伍的全部人
message m_team_change_leader_toc {
        required bool             succ        = 1 [default = true];
        required bool             return_self    = 2 [default = true];
        optional string         reason        = 3;
        repeated p_team_role             role_list    = 4;
        optional int32             role_id        = 5;
        optional string            role_name    = 6;    //表明谁，开始成为新的队长
        optional int32             team_id        = 7;
}
// 队长解散队伍
message m_team_disband_tos{
        optional int32                  team_id         = 1;
}
// 队长把队伍解散
message m_team_disband_toc {
        required bool                   succ            =1[default = true];
        required bool                   return_self     =2[default = true];
        optional int32                  team_id         =3;
        optional string                 reason          =4; 
}
//修改队伍拾取类型
message m_team_pick_tos {
        required int32 pick_type = 1 [default = 1]; // 物品拾取模式，1：自由拾取，2：独自拾取
}

message m_team_pick_toc {
        required bool succ = 1 [default = true];
        required bool return_self = 2 [default = true];
        required int32 pick_type = 3 [default = 1]; // 物品拾取模式，1：自由拾取，2：独自拾取
        optional string reason = 4;
}
//队伍人数少于2，自动解散队伍的通知消息
message m_team_auto_disband_toc {
        required bool succ =1[default = true];
        optional string reason =2; 
}
//如果玩家在队伍中，突然离线之后，在一定时间内
//重新登录，系统自动发关相关队伍信息通知此玩家
//定时的通知前端的队伍的所有人的属性信息
message m_team_auto_list_toc {
        required bool return_self = 1 [default = true];//true表示此消息由本人重新登录触发,false为系统广播消息
        optional int32 team_id = 2[default = 0]; 
        repeated p_team_role role_list = 3;
        required int32 pick_type = 4 [default = 1]; // 物品拾取模式，1：自由拾取，2：独自拾取
        repeated int32 visible_role_list= 1; // 当前玩家可见的队员列表，列表结构为：[RoleId,RoleId1,...]，当玩家列表为空时，表示都队员都不可见
}
//队员邀请玩家加入队伍接口
message m_team_member_invite_tos {
        required int32 op_type = 1;// 操作类型，1同意，2拒绝
        required int32 member_id = 2;
        required string member_name = 3;
        required int32 role_id = 4;
        required string role_name = 5;
}
message m_team_member_invite_toc {
        //操作状态1,表示队员邀请玩家加入队伍，请求队长操作
        //操作状态2,表示队长处理队员邀请玩家加入队伍的操作结果
        required int32 op_status = 1;//操作状态
        optional int32 member_id = 2;//队员id
        optional string member_name = 3;//队员名称
        optional int32 role_id = 4;//玩家id
        optional string role_name = 5;//玩家名称
        optional bool succ = 6 [default = true]; //操作结结果
        optional bool return_self = 7 [default = true]; //消息类型
        optional string reason = 8;//操作结果描述
        optional int32 op_type = 9;// 操作类型，1同意，2拒绝
}
//推荐组队
message m_team_member_recommend_tos {
}
message m_team_member_recommend_toc {
        required bool                                   succ                            = 1 [default=true];
        repeated p_recommend_member_info                member_info                     = 2;
        optional string                                 reason                          = 3;
}
// 申请组队
message m_team_apply_tos{
        required int32 role_id = 1[default = 0];
        required int32 op_type = 2[default = 0];//1队员申请入队,2队长同意入队 3队长不同意入队 
        required int32 apply_id = 3[default = 0];//申请入队的玩家id      
}
message m_team_apply_toc{
        required bool succ = 1 [default = true];
        optional bool return_self = 2 [default = true]; //消息类型
        required int32 role_id = 3[default = 0];
        required int32 op_type = 4[default = 0];//1队员申请入队,2队长同意入队 3队长不同意入队 
        required int32 apply_id = 5[default = 0];//申请入队的玩家id
        optional string apply_name = 6;//申请入队的玩家名称
        optional string reason = 7;
        repeated p_team_role role_list = 8;//队员列表
        optional int32 team_id = 7 [default = 0];
        optional int32 pick_type = 8 [default = 1]; // 物品拾取模式，1：自由拾取，2：独自拾取
}
//玩家附近队伍列表
message m_team_query_tos{
        // 1 查询玩家附近队伍列表
        required int32 op_type = 1[default = 0];//操作类型
}
message m_team_query_toc{
        required int32 op_type = 1[default = 0];//操作类型
        required bool succ =2[default = true];
        optional string reason = 3;//操作结果描述
        optional int32 reason_code = 4[default = 0];//操作结果描述
        repeated p_team_nearby nearby_list = 5;//附近队伍信息
}
message p_team_nearby{
        optional int32 team_id = 1[default = 0];
        optional int32 cur_team_number = 2[default = 0];
        optional int32 sum_team_number = 3[default = 0];
        optional int32 role_id = 4[default = 0];
        optional int32 sex = 5[default = 0];
        optional int32 faction_id = 6[default = 0];//国家id
        optional int32 level = 7[default = 0];
        optional int32 category = 8[default=0]; //玩家职业
        optional int32 skinid = 9; //外形
        optional string role_name = 10;
        optional bool auto_accept_team = 11[default = true];
}
//创建队伍接口
message m_team_create_tos{
        required int32 role_id = 1[default = 0];
}
message m_team_create_toc{
        required int32 role_id = 1[default = 0];
        required bool succ = 2 [default = true];
        optional string reason = 3;   
        optional int32 reason_code = 4[default = 0];//操作结果描述     
        repeated p_team_role role_list = 5;
        optional int32 team_id = 6;//队伍id
        required int32 pick_type = 7[default = 1]; // 物品拾取模式，1：自由拾取，2：独自拾取
}
//===================================== 好友 模块: friend        =====================================
//---------------------------------
//好友请求
//---------------------------------
message m_friend_request_tos {
        required string         name                    = 1;   //请求同意的角色名字
}

message m_friend_request_toc {
        required bool           succ            = 1 [default = true];
        required string         name                    = 2;
        optional string         reason                  = 3;
        required bool           return_self             = 4 [default = true];
}

//---------------------------------
//接受好友
//---------------------------------
message m_friend_accept_tos {
        required string         name                    = 2; //请求接受姓名
}

message m_friend_accept_toc {
        required bool           succ                    = 1 [default = true];
        optional string         name                    = 2; //请求接收姓名
        optional p_friend_info  friend_info             = 3; //好友基本信息
        optional string         reason                  = 4;
        required bool           return_self             = 5 [default = true];
}

//拒绝请求
message m_friend_refuse_tos {
        required string         name                    = 1;
}

message m_friend_refuse_toc {
        required bool           succ                    = 1 [default = true];
        required string         name                    = 2;
        required bool           return_self             = 3 [default=true];
        optional string         reason                  = 4;
}

//---------------------------------
//删除好友
//---------------------------------
message m_friend_delete_tos {
        required int32          roleid                  = 3;
}

message m_friend_delete_toc {
        required bool           succ                    = 1 [default = true];
        optional int32          type                    = 3;
        optional string         reason                  = 4;
        required bool           return_self             = 5 [default=true];
        optional int32          roleid                  = 6;
}

//添加黑名单
message m_friend_black_tos {
        required string         name                    = 1;
}

message m_friend_black_toc {
        required bool           succ                    = 1 [default = true];
        optional string         name                    = 2;
        optional p_friend_info  friend_info             = 4;
        optional string         reason                  = 5;
        required bool           return_self             = 6;
}

message m_friend_enemy_toc {
        required p_friend_info  enemy_info              = 1;
}

//好友列表
message m_friend_list_tos {
}

message m_friend_list_toc {
        required bool           succ                    = 1 [default = true];
        repeated p_friend_info  friend_list             = 3;
        optional string         reason                  = 4;
}

//好友基本信息
message p_friend_info {
        required int32          roleid                  = 1; //角色ID
        required string         rolename                = 2; //角色姓名
        required int32          type                    = 3; //类型:1、好友 2、黑名单 3、仇人 4、陌生人
        required int32          sex                     = 4; //性别
        required int32          faction_id              = 5; //国家
        required int32          level                   = 6; //等级
        required int32          friendly                = 7; //好友度
        required bool           is_online               = 8; //是否在线
        optional string         sign                    = 9; //个性签名
        required string         family_name             = 10; //门派名称
        repeated int32          relative                = 11; //特殊关系，1、师，2、徒，3、夫，4、妻
        required int32          head                    = 12; //头像
}

message p_simple_friend_info {
        required string         rolename                = 1;
        required int32          faction_id              = 2;
        required bool           is_online               = 3;
        required int32          head                    = 4;
        required int32          level                   = 5;
}

message m_friend_offline_request_toc {
        repeated p_simple_friend_info           request_list            = 1;
}

message m_friend_change_relative_toc {
        required int32               role_id                    = 1;
        repeated int32               relative                   = 2;
}

message m_friend_add_friendly_toc {
        required int32            role_id                       = 1;
        required int32            friendly                      = 2;
}
        

//---------------------------------
//好友上线下线通知
//---------------------------------
message m_friend_online_toc{
        required int32          roleid                  = 3;
}

message m_friend_offline_toc{
        required int32          roleid                  = 3;   
}

message m_friend_upgrade_toc{
        required int32          roleid                  = 3;
        required int32          oldlevel                = 4;
        required int32          newlevel                = 5;
}

//查看好友信息
message m_friend_info_tos{
        required int32          roleid                  = 1;
}

message m_friend_info_toc{
        required bool           succ                    = 1 [default = true];
        optional p_role_ext     friend_info             = 2;
        optional string         reason                  = 3;
        repeated p_goods        equips                  = 4;
}

//修改个人信息
message m_friend_modify_tos{
        optional p_role_ext     info                    = 2;
}

message m_friend_modify_toc{
        required bool           succ                    = 1 [default = true];
        optional string         reason                  = 2;
        required bool           return_self             = 3 [default=true];
        optional p_role_ext     info                    = 4;
}

//好友创建了门派
message m_friend_create_family_toc {
	required int32				role_id						= 1;
	required int32				family_id					= 2;
	required string				family_name					= 3;
}

//获取玩家的"好友基本信息"
message m_friend_get_info_tos{
    required int32              roleid                      = 1;
}

message m_friend_get_info_toc{
    optional p_friend_info      roleinfo                    = 1;
}

//某个好友的门派升级了
message m_friend_update_family_toc {
	required int32				role_id						= 1;
	required int32				family_id					= 2;
	required string				family_name					= 3;
	required int32				level						= 4;
}

//推荐好友
message m_friend_recommend_tos {
}

message m_friend_recommend_toc {
        required bool                                   succ                            = 1 [default=true];
        repeated p_recommend_member_info                friend_info                     = 2; 
        optional string                                 reason                          = 3;
}

// 好友祝福
message m_friend_congratulation_tos {
        required int32                          to_friend_id                    = 1;
        optional string                         congratulation                  = 2; // 祝福语
}

message m_friend_congratulation_toc {
        required bool                           succ                            = 1 [default=true];
        required bool                           return_self                     = 2 [default=true];
        optional string                         reason                          = 3;
        optional int32                          exp_add                         = 4; //经验获得
        optional int32                          hyd_add                         = 5; //好友度获得
        optional string                         from_friend                     = 6; //来自哪位好友的祝福
        optional string                         congratulation                  = 7; //祝福语
        optional double                         bottle_exp                      = 8 [default = 0];//经验瓶经验
}

// 一键征友
message m_friend_advertise_tos {
}

message m_friend_advertise_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
}                 
message m_friend_bottle_tos{
        required int32 op_type = 1;//操作类型  1001 查询 1002 获取
}
message m_friend_bottle_toc{
        required int32 op_type = 1;//操作类型
        required bool  succ = 2[default = true];
        optional string reason = 3;
        optional int32 reason_code = 4 [default = 0];
        optional double bottle_exp = 5 [default = 0];//经验瓶经验
        optional double award_exp = 6 [default = 0];//获得的经验
}
//=====================================商城 模块: shop=====================================
//获取指定id的商店信息
message m_shop_shops_tos{
}

//商店的信息   
message p_shop_info{
     required int32        id          = 1;  //商店id
     required string       name        = 2;  //商店类别的名字
     repeated p_shop_info  branch_shop = 3;  //子商店的id 
}

//返回所有商店类别     
message m_shop_shops_toc{
     repeated p_shop_info  shops = 1;  //所有商品类别
}

//获取该商店所有商品的id
message m_shop_all_goods_tos{
     required int32  shop_id    = 1;   //商品id
	 optional int32  npc_id     = 2;   //npc的id，默认值表示商城
}

//商品的货币类型
message p_shop_currency{     
     required int32  id          = 1 ; //货币类型id 1 银两 2元宝 3 绑定银子 4 绑定元宝
     required int32  amount      = 2 ; //货币的数量
}

//商品价格
message p_shop_price{
     required int32                 id          = 1; //价格id         
     repeated p_shop_currency  currency         = 2; //商品货币表    
}

//商品的动态信息
message p_shop_goods_info{
     required int32          goods_id      = 1; //商品id      
     required int32          seat_id       = 2; //商品在商店中的位置 
     required int32          packe_num     = 3 [default = 1]; //一次性购买的商品数 
     repeated int32          time          = 4; //商品的有效时间
     repeated int32          role_grade    = 5; //玩家等级限制 
     required bool           goods_bind    = 6 [default = false]; //商品是否绑定      
     required string         goods_modify  = 7; //商品修饰，（如：打折，特价）   
     repeated p_shop_price   price         = 8; //商品价格表,
     required int32          type          = 9; //商品类型，如：装备、宝石、道具       
     optional p_property_add property      = 10; //商品附加属性
     required int32          colour        = 11; //商品的颜色
     optional int32          discount_type = 12 [default=0]; //折扣类型：0、不打折，1、VIP折扣
     required int32          shop_id       = 13; //所在商店
     required int32          price_bind    = 14; // 1、不要求 2、一定绑定 3、一定不绑定
}

//返回该类型id所有商品的信息
message m_shop_all_goods_toc{
     required int32              shop_id    = 1; //所属商店
     repeated p_shop_goods_info  all_goods  = 2; //该商店所有商品的信息
     optional int32              npc_id     = 3; //npc的id，默认值表示商场
}

//获取某个物品的商品价格
message m_shop_item_tos{
     required int32             shop_id         = 1; //所属商店
     required int32             item_type_id    = 2; //所属物品ID
}

message m_shop_item_toc{
     required bool                  succ        = 1 [default=true];
     optional string                reason      = 2;
     optional int32                 shop_id     = 3; //商店的ID
     optional p_shop_goods_info     goods       = 4; //返回物品
}

//获取搜索商品的id
message m_shop_search_tos{
     repeated int32  search_goods_id   = 1; //获取所有商品的id，默认是false
	 optional int32  npc_id            = 2; //npc的id，默认值表示商场
}

//返回搜索商品的动态信息
message m_shop_search_toc{
     repeated p_shop_goods_info search_all_goods  = 1 ; //所有商品的id
	 optional int32             npc_id            = 2; //npc的id，默认值表示商场
}

//购买商品时发给服务器的信息
message m_shop_buy_tos{
     required int32 goods_id    = 1 ; //商品id
     required int32 price_id    = 2 ; //商品价格id
     required int32 goods_num   = 3 [default = 1]; //商品的数量 
     optional int32 shop_id     = 4 ; //商品所在商店的id
}

//返回购买商品是否成功的信息
message m_shop_buy_toc{
     required bool      succ        = 1 [default = false]; //标示是否购买成功
     optional string    reason      = 2 [default = ""];    //失败时表示失败原因
     repeated p_goods   goods       = 3 ;                  //购买的物品信息
     repeated int32     property    = 4 ;                  //成功后，返回角色的财产
     optional int32     error_code  = 5 ;                  //错误代码
}

//卖给系统的物品信息
message p_shop_sale_goods{
     required int32 id       = 1; //物品id
     required int32 type_id  = 2; //物品类型id
     required int32 position = 3; //物品再背包的位置
     required int32 number   = 4; //物品的在背包位置的数量
}

//卖给系统的物品
message m_shop_sale_tos{
     repeated p_shop_sale_goods goods = 1; //物品
}

//卖给系统物品返回给前端的信息
message m_shop_sale_toc{
     required bool       succ     = 1; //是否成功
     repeated int32      property = 2; //成功后，返回角色的财产
     repeated int32      ids = 3; //卖给系统的物品的所有id
     optional string     reason   = 4;  //如果失败，返回原因
}

//玩家买回东西接口
message m_shop_buy_back_tos{
    required int32       op_type     =1;//返回数据状态
    optional int32      goods_id    =2;//买回物品id
}
//卖出东西，买回东西，获取列表
message m_shop_buy_back_toc{
    required int32       op_type    =1;//返回数据状态
    repeated p_goods    goods      =2;//获取卖出的物品列表
    optional bool       succ       =3[default=true];
    optional string     reason     =4;
    optional int32     goods_id   =5;
}

//获取npc商店
message m_shop_npc_tos{
     required int32 npc_id = 1; //npc的id
}

//返回npc商店的信息
message m_shop_npc_toc{
     required int32       npc_id =1; //npc的id
     repeated p_shop_info shops  =2; //npc商店列表
}

//===========================================信件模块   letter=======================================
//信件信息
message p_letter_info{
    required int32           id                = 1;  //信件id
    required string          sender            = 2;  //发件人名字   
    required string          receiver          = 3;  //收件人名字
    required string          title             = 4;  //信件标题
    required int32           send_time         = 5;  //发送时间 
    required int32           type              = 6;  //信件类型 
    repeated p_goods         goods_list        = 7;  //没有提取的装备列表 
    repeated p_goods         goods_take        = 8;  //提取的装备列表          
    required int32           state             = 9   [default = 1];     //信件状态,1表示未读，2表示已读，3表示已回复   
    optional string          letter_content    = 10  [default = ""];    //信件内容
    required int32           table             = 11  ;       
}

message p_letter_goods{
    required int32 goods_id = 1; //物品的id
    optional int32 num      = 2; //物品的数量 
}

//信件的简单信息
message p_letter_simple_info{                                                             
    required int32           id                = 1; //信件id
    required string          sender            = 2; //发件人
    optional string          receiver          = 3; //收件人
    optional string          title             = 4; //信件标题
    required int32           send_time         = 5; //发送时间    
    required int32           type              = 6; //信件类型 
    required int32           state             = 7; //信件是否读取  
    required bool            is_have_goods     = 8[default = false]; //是否有物品
    required int32           table             = 9;
}

//获取信件
message m_letter_get_tos{
    required int32 pack_num = 1 [default = 0]; //一次性最多要多少条数据,默认为0表示全部
}

//返回信件
message m_letter_get_toc{
    repeated p_letter_simple_info  letters       = 1;//信件的简单信息列表
    required int32          request_mark  = 2;//请求标示     
}

//获取发送的信件
message m_letter_get_send_tos{
    required int32 pack_num        = 1 [default = 0];     //一次性最多要多少条数据,默认为0表示全部
    required bool  only_many_send  = 2 [default = false]; //是否只是群发，默认为false
}

//返回发送的信件
message m_letter_get_send_toc{
    repeated p_letter_simple_info letters         = 1;//信件的简单信息列表
    required bool                 only_many_send  = 2[default = false]; //是否只是群发，默认为false
    required int32                request_mark    = 3;//请求标示
}

//获取收到的信件
message m_letter_get_receive_tos{
    required int32 pack_num = 1 [default = 0]; //一次性最多要多少条数据,默认为0表示全部
}

//返回收到的信件
message m_letter_get_receive_toc{
    repeated p_letter_simple_info letters       = 1;//信件的简单信息列表
    required int32                request_mark  = 2;//请求标示
}

//打开信件
message m_letter_open_tos{
    required int32 letter_id      = 1; //要打开的信件id
    required int32 table           = 2; //信件类型
    required bool  is_self_send   = 3[default = false]; //是否是自己发送的信件,默认为false 
}

//返回打开信件的信息
message m_letter_open_toc{
    required bool                 succ   = 1;   //信件打开是否成功
    optional p_letter_info        result = 2;   //如果打开发送成功，返回成功打开的信件
    optional string               reason = 3;   //如果信件打开失败，返回失败的原因
}

//发送普通信件
message m_letter_p2p_send_tos{
    required string                   receiver         = 1;  //收件人姓名
    required string                   text             = 2;  //信件内容
    repeated p_letter_goods           goods_list       = 3;  //装备列表    
}

//发送门派信件
message m_letter_clan_send_tos{
    repeated string                   receiver         = 1;  //收件人姓名列表
    required string                   text             = 2;  //信件内容
}

//
message m_letter_family_send_tos{
    required string                   text             = 1;  //信件内容
    required int32		      range            = 2;  //收信人的范围，0：全部，1：在线，-1：离线
}

//发送批量信件
message m_letter_batch_send_tos{
    required string                   text             = 1;  //信件内容
    repeated p_letter_goods           goods_list       = 2;  //装备列表    
    required int32                    type             = 3;  //信件类型
    optional int32                    days             = 4;  //存放天数
    optional p_letter_send_condition  condition        = 5;  //发送条件
}

//发送条件
message p_letter_send_condition{
    repeated string  receiver      = 1;  //收件人姓名列表
    repeated int32   time          = 2;  //时间段
    repeated int32   grade         = 3;  //等级段
    optional int32   sex           = 4;  //玩家性别
    optional int32   factionid     = 5 ;  //国家
}

//返回发送结果
message m_letter_send_toc{
    required bool                 succ         = 1;   //信件发送是否成功
    optional p_letter_simple_info letter       = 2;   //如果信件发送成功，返回成功发送的信件信息
    optional string               reason       = 3;   //如果信件发送失败，返回失败的原因      
}

//删除信件
message m_letter_delete_tos{
    repeated p_letter_delete  letters      = 1; //要被删除的信件列表
}

//删除的信件
message p_letter_delete{
    required int32   letter_id      = 1; //要被删除的信件id
    required bool    is_self_send   = 2[default = false]; //是否是自己发送的信件,默认为false 
    required int32   table           = 3;  
}

//返回信件删除的结果
message m_letter_delete_toc{
    required bool             succ     = 1;      //信件删除是否成功
    repeated p_letter_delete  no_del   = 2;      //没有被删除的信件id列表
    optional string           reason   = 3;      //如果信件删除失败，返回失败的原因
}

//物品提取
message m_letter_accept_goods_tos{
    required int32            letter_id     = 1; //附带装备的信件id
    required int32            table          = 2; 信件类型
}

//返回物品提取的结果
message m_letter_accept_goods_toc{
    required bool            succ          = 1; //信件物品提取是否成功
    repeated p_goods         goods_list    = 2; //没有提取的物品
    repeated p_goods         goods_take    = 3; //提取成功的物品
    optional string          reason        = 4; //如果物品提取失败，返回失败的原因
}

message m_letter_state_change_tos{
    required int32     letter_id      = 1 ; //状态改变的id
    required int32     state          = 2 ; //改变后的状态
    required bool      is_self_send   = 3[default = false]; //是否是自己发送的信件,默认为false 
}

message m_letter_state_change_toc{
    required bool   succ          = 1;  //信件状态改变是否成功
    optional string reason        = 2;  //如果信件状态改变败，返回失败的原因
}
//===================================== 装备 、坐骑模块    equip    =====================================
//---------------------------------
//函数：mountup        角色上马
//---------------------------------
message m_equip_mountup_tos {
    required int32             mountid                  = 1;    //要使用成哪一件坐骑,=goodid
}

message m_equip_mountup_toc {
    required bool           succ                  = 1 [default = true];
    optional string         reason                = 2;
    optional p_goods        mount_new             = 3;  //新的坐骑
    optional p_goods        mount_old             = 4;  //被卸下的坐骑
}

//---------------------------------
//函数：mountdown        角色下马
//---------------------------------
message m_equip_mountdown_tos {
    required int32             mountid                   = 1;   //要卸下哪一件坐骑,=goodid
    optional int32            bagid                      = 2;    //背包id
    optional int32            position                   = 3;    //背包位置
}

message m_equip_mountdown_toc {
    required bool             succ                  = 1 [default = true];
    optional string         reason                  = 2;
    optional p_goods        mount                   = 3;    //被卸下的坐骑
}

//---------------------------------
//函数：mount_changecolor        坐骑刷新颜色
//---------------------------------
message m_equip_mount_changecolor_tos {
    required int32           mountid               = 1;  //要刷哪一件坐骑,=goodid
}
message m_equip_mount_changecolor_toc {
    required bool           succ                    = 1 [default = true];
    optional string         reason                  = 2;
    optional int32          color                   = 3;    //刷新后的颜色
    optional p_goods        mount                   = 4;    //刷新后的坐骑，如果没有改变则为undefined
}
// 坐骑续期
message m_equip_mount_renewal_tos{
    required int32 op_type = 1 [default = 0];//操作类型 1:查询 2:续期 
    optional int32 mount_id = 2 [default = 0];//坐骑物品id #p_goods.id
    optional int32 mount_type_id = 3[default = 0];//坐骑物品类型id #p_goods.typeid
    optional int32 mount_pos = 4 [default = 0];//坐骑物品所在位置，1背包 2身上 
    //续期类型 1:续期7天 2:续期30天 3:续期90天 9:永久
    optional int32 renewal_type = 5[default = 0];
    
}
message m_equip_mount_renewal_toc{
    required bool succ = 1 [default = true];
    optional string reason = 2;
    optional int32 reason_code = 3[default = 0];//错误编码
    required int32 op_type = 4 [default = 0];//操作类型 1:查询 2:续期 
    optional int32 mount_id = 5 [default = 0];//坐骑物品id #p_goods.id
    optional int32 mount_type_id = 6[default = 0];//坐骑物品类型id #p_goods.typeid
    optional int32 mount_pos = 7 [default = 0];//坐骑物品所在位置，1背包 2身上
    //续期类型 1:续期7天 2:续期30天 3:续期90天 9:永久
    optional int32 renewal_type = 8[default = 0];
    optional int32 end_time = 9[default = 0];//物品新的过期时间
    optional int32 op_fee = 10[default = 0];//操作费用 元宝
    optional p_goods mount = 11;//续期成就后的新的坐骑
    repeated p_equip_mount_renewal renewal_confs = 12;//续期配置数据
    optional int32 all_gold = 13[default = 0];//玩家元宝总数
}
//---------------------------------
//函数：loaded_list        角色身上装备列表
//---------------------------------
message m_equip_loaded_list_tos {
    required int32                  roleid          = 1;     //角色ID
}

message m_equip_loaded_list_toc {
    required int32                  roleid              = 1;  //角色ID
  repeated p_goods         equips       = 2;  //身上的各个装备
}

//---------------------------------
//函数：load        角色使用装备
//---------------------------------
message m_equip_load_tos {
    required int32             equip_slot_num    = 1;    //要使用哪一个装备位
    required int32            equipid                    = 2;    //要使用成哪一件装备
}

message m_equip_load_toc {
    required bool             succ                  = 1 [default = true];
    optional string         reason                = 2;
    optional p_goods    equip1                    = 3; 
    optional p_goods    equip2                    = 4;
}

//---------------------------------
//函数：unload        角色卸载装备
//---------------------------------
message m_equip_unload_tos {
    required int32            equipid                    = 1;    //要卸载哪一件装备
    optional int32            bagid                      = 2;    //背包id
    optional int32            position                   = 3;    //背包位置
}

message m_equip_unload_toc {
    required bool             succ                  = 1 [default = true];
    optional string         reason                = 2;
    optional p_goods    equip                        = 3; 
}


//---------------------------------
//函数：        装备换位
//---------------------------------
message m_equip_swap_tos {
    required int32            equipid1            = 1;    //装备1的ID
  required int32      position2     = 2;  //装备2的位置
}

message m_equip_swap_toc {
    required bool                succ              = 1 [default = true];
    optional string            reason            = 2;
    optional p_goods       equip1     = 4; //移动位置后第一件装备的信息
  optional p_goods       equip2     = 5; //移动位置后第二件装备的信息
}

message m_equip_fix_tos {
        //修理类型：true: 单个修理，false: 全部
        required bool                   fix_type                = 1;
        required int32                  equip_id                = 2;
}

message m_equip_fix_toc {
        required bool                                           succ                    = 1 [default=true];
        optional string                                         reason                  = 2;
        repeated p_equip_endurance_info                         equip_list              = 3;
        optional int32                                          silver                  = 4;
        optional int32                                          bind_silver             = 5;
}

message m_equip_endurance_change_toc {
        repeated p_equip_endurance_info                 equip_list      = 1;
}

message p_equip_endurance_info {
        //装备goodsid
        required int32              equip_id                        = 1;
        //新的耐久度
        required int32              num                             = 2;
        //最大耐久度
        required int32              max_num                         = 3;
}

//===================================== 道具 模块    item    ========================
//---------------------------------

//---------------------------------
//函数：load        角色使用道具
//---------------------------------
message m_item_use_tos {
    required int32             itemid                  = 1;    //要使用哪一件道具
    required int32             usenum                  = 2;  //使用的个数
    required int32             effect_id               = 3; //作用的物品ID
}

message m_item_use_toc {
    required bool             	succ                 	= 1 [default = true];
    repeated string         	reason                 	= 2;
    optional int32             	itemid                 	= 3;
    optional int32             	rest                   	= 4;  //道具使用后剩余个数
}
//使用特殊的道具 此类弄的道具一般为任务道具，并且道具是不可叠加的
//读条使用道具，直接使用道具
//使用道具效果，直接消失，产生新的id
//目前此接口只是给任务特殊的道具使用
message m_item_use_special_tos{
    required int32 item_id = 1[default = 0];//道具id
}
message m_item_use_special_toc{
    optional int32 item_id = 1[default = 0];//道具id
    required bool succ = 2[default=true];
    optional string reason = 3;
    optional int32 reason_code = 4[default = 0];
    optional int32 use_status = 5[default = 0];//道具使用状态 1开始2结束3打断
    optional int32 total_progress = 6[default = 0];//道具进度总时间 单位秒
    optional int32 use_effect = 7[default = 0];//道具使用效果 1直接使用2读条3特殊效果
    repeated p_item_effect effects = 8;//道具使用效果在item.config配置中配置
    repeated p_goods new_goods_list = 9;//获得的道具
    optional string progress_desc = 10;//读条操作描述
}

// 使用追踪符
message m_item_trace_tos {
        required string         target_name             = 1; //目标名字
        required int32          goods_id                = 2;
}

message m_item_trace_toc {
        required bool           succ                    = 1 [default=true];
        optional string         reason                  = 2;
        optional int32          goods_id                = 3;
        optional int32          goods_num               = 4;
        optional string         target_name             = 5;
        optional int32          target_mapid            = 6;
        optional int32          target_tx               = 7;
        optional int32          target_ty               = 8;
}

//批量卖出道具
message m_item_batch_sell_tos {
	repeated int32				id_list					= 1;
}

message m_item_batch_sell_toc {
	required bool            	succ                = 1[default=true]; //是否成功
    optional string          	reason              = 2; //失败原因
	optional int32				silver			 	= 3;
	optional int32				bind_silver		 	= 4;
}

//--------------------------------
//生成扩展背包
//--------------------------------
message m_item_new_extend_bag_toc{
    required int32           bagid               = 1; //背包id
    required int32           rows                = 2; //行数    
    required int32           columns             = 3; //列数
    required int32           typeid              = 4; //类型id  
    required int32           grid_number         = 5; //背包格子数
    required int32           main_rows           = 6; //行数    
    required int32           main_columns        = 7; //列数
    required int32           main_grid_number    = 8; //背包格子数
}

//--------------------------------
//收起扩展背包
//--------------------------------
message m_item_shrink_bag_tos{
    required int32           bagid               = 1; //背包id
    optional int32           bag                 = 2; //放置道具的背包
    optional int32           position            = 3; //放置道具的背包位置
}

message m_item_shrink_bag_toc{
    required bool            succ                = 1; //是否成功
    optional string          reason              = 2; //失败原因
    optional p_goods         item                = 3; //扩展背包道具
    optional int32           bagid               = 4; //背包id
    optional int32           rows                = 5; //行数    
    optional int32           columns             = 6; //列数
    optional int32           grid_number         = 7; //背包格子数
}

//===================================== 宝石 模块    stone    ========================
 


//===================================== 物品 模块    stone    ========================
//函数：baggoods_list        角色背包物品列表
//---------------------------------
message m_goods_inbag_list_tos {
    required int32                     bagid                = 1; //哪个背包，默认背包为1    
}

message m_goods_inbag_list_toc {
    required int32                    bagid                    = 1; 
    repeated p_goods               goods           = 2;  //背包中的物品
}

//---------------------------------
//函数：info        单件物品详细信息
//---------------------------------
message m_goods_info_tos {
        required int32                  id                  = 1; //物品ID
        required int32                  target_id           = 2; //谁的物品信息
        optional int32 			type		    = 2; //前端自己发过来的类型
}

message m_goods_info_toc {
        required bool                   succ                = 1 [default=true];
        optional p_goods                info                = 2; //物品信息
        optional int32 		        type		    = 3; //类型
        optional string                 reason              = 4;
        optional int32                  goods_id            = 5; //请求物品ID
}
  
//---------------------------------
//函数：destroy        摧毁物品
//---------------------------------
message m_goods_destroy_tos {
    required int32                     id                        = 1;    //物品ID
}

message m_goods_destroy_toc {
    required bool             succ              = 1 [default = true];
    optional string         reason            = 2;
    optional int32            id                    = 3;    //物品ID
}    

//---------------------------------
//函数：        物品移动换位或重叠
//---------------------------------
message m_goods_swap_tos {
  required int32            id1                    = 1;    //物品1的ID
  required int32      position2   = 2;  //物品2背包中的位置
  required int32      bagid2           = 3;  //目标背包id
}

message m_goods_swap_toc {
    required bool         succ              = 1 [default = true];
    optional string     reason            = 2;
    optional p_goods  goods1      = 3; //移动位置后第一件物品的信息
  optional p_goods  goods2      = 4; //移动位置后第二件物品的信息
}  

//---------------------------------
//函数：        拆分物品
//---------------------------------
message m_goods_divide_tos {
    required int32            id                         = 1;     //物品ID
  required int32      num                = 2;  //物品拆分出的个数
  required int32      bagposition   = 3;  //新物品要放入的地方
  required int32      bagid               = 4;  //目标背包id
}

message m_goods_divide_toc {
    required bool         succ              = 1 [default = true];
    optional string     reason            = 2;
    optional p_goods  goods1      = 3; //移动位置后第一件物品的信息
  optional p_goods  goods2      = 4; //移动位置后第二件物品的信息
}  

message m_goods_update_toc {
    repeated p_goods               goods           = 1;  //背包中的物品
} 

//---------------------------------
//函数：        背包整理
//---------------------------------
message m_goods_tidy_tos{
    required int32                     bagid                = 1; //哪个背包，默认背包为1       
    
    }
message m_goods_tidy_toc{
    required int32                    bagid            = 1; 
    repeated p_goods                   goods           = 2;  //背包中的物品
    }

// 物品炫耀
message m_goods_show_goods_tos {
        optional string                 channel_sign    = 1; //频道标记
        optional string                 to_role_name    = 2; //发给哪位
        optional int32                  show_type       = 3; //0频道 1密聊 2对话
        required int32                  goods_id        = 4;
}

message m_goods_show_goods_toc {
        required bool                   succ            = 1 [default=true];
        optional string                 reason          = 3;
}

// ------------------ 角色 --------------------------------
message m_role2_exp_full_toc{
    required string                     text            = 1; //提示语   
}

message m_role2_levelup_tos{
    
}

message m_role2_levelup_toc {
    required int32                                    level                   = 1; //新的等级
    required int32                                    attr_points             = 2; //新的属性点
    required int32                                    maxhp                   = 3; //新的最大HP
    required int32                                    maxmp                   = 4; //新的最大MP
    optional string                                   msg                     = 5; //其他的一些提示信息
    required int32                                    skill_points            = 6; //新的技能点
    required double                                    exp                     = 7; //新的经验
    required double                                    next_level_exp          = 8; //下一等级需要的经验
    required double                                    total_add_exp           = 9; //总共获得的经验
}

//仅仅由于客户端显示某个玩家升级后的效果
message m_role2_levelup_other_toc {
    required int32                                    roleid                    = 1; //某个玩家升级了
}

message p_role_attr_change {
    required int32                                    change_type            = 1; //什么属性发生改变了
    required double                                   new_value              = 2; //新的值
}

message m_role2_attr_change_toc {
    required int32                                  roleid                = 1;
    repeated p_role_attr_change                     changes               = 2;
}

message m_role2_attr_reload_toc {
    required p_role_attr                            role_attr                   = 1; //所有属性
}

message m_role2_base_reload_toc {
    required p_role_base                            role_base                    = 1;
}

message m_role2_reload_toc {
    optional p_role_base                            role_base                    = 1;
    optional p_role_attr                            role_attr                   = 2;
}

//buff的具体描述从xml配置文件读取
message m_role2_newbuffs_toc {
    required int32                                    roleid                    = 1; //某个玩家多了一个buffs
    required int32                                    type                        = 2; // buff的类型
    required int32                  remain_time     = 3; // buff的剩余时间
    required int32                  value           = 4; // buff的效果值，例如经验1.5倍，每秒燃烧50点血 
}

//告诉玩家：你挂了！
message m_role2_dead_toc {
  optional string                                 killer                        = 1; //谁杀死了我，玩家姓名或者怪物名称
  repeated int32                                  relive_type                   = 2; //可选的复活方式
  optional int32                                  relive_silver                 = 3; //原地健康复活所需银两
  optional int32                                  dead_type                     = 4 [default=0]; //0、普通，2、个人副本死亡 
}

//广播告诉其他玩家某个玩家挂了
message m_role2_dead_other_toc {
    required int32                                  roleid                  = 1; //谁挂了
}

//通知玩家重生后的信息，客户端应该根据新的mapid、tx、ty来载入新的场景
message m_role2_relive_toc {
    required bool                                   succ                    = 1[default=true];
      optional bool                                    return_self                = 2[default=true];
    optional string                                 reason                  = 3;
    optional p_role_base                            role_base               = 4;
    optional p_role_fight                           role_fight              = 5;
    optional p_role_pos                             role_pos                = 6;
    optional p_map_role                               map_role                   = 7;
    required bool                                   map_changed             = 8[default=false];
}

//更改玩家是否不使用绑定的货币
message m_role2_unbund_change_tos{
    required bool     unbund = 1;  
}

message m_role2_unbund_change_toc{
    required bool     succ = 1;是否成功
}

//更改打开背包时是否打开主背包
message m_role2_rely_main_tos{
    required bool is_rely = 1;
}

message m_role2_rely_main_toc{
    required bool succ = 1;是否成功
}

message m_role2_relive_tos {
    //三种方式：1 原地花钱复活 2 原地残废复活 3 回城复活
    required int32                                  type                    = 1; //复活形式
}

//分配属性点
message m_role2_pointassign_tos {
    //1 力量 2体质 3 智慧 4 精神 5 敏捷
    required int32                                  type                    = 1; 
    required int32                                  value                   = 2; //
}

message m_role2_pointassign_toc {
    required bool                                   succ                    = 1[default=true];
    optional string                                 reason                  = 2;
}

message m_role2_getroleattr_tos {
    required int32                                  role_id                 = 1;
    required bool                                   is_check                = 2[default = false];
}

//获得玩家技能树信息
message m_role2_getskillinfo_tos {
}

message m_role2_getskillinfo_toc {
    required bool                                   succ                    = 1[default=true];
    optional string                                 reason                  = 2;
    repeated p_role_skill                           skills                  = 3;
}

//技能点分配
message m_role2_skillassign_tos {
    required int32                                  skillid                 = 1;
    required int32                                  points                  = 2;
}

message m_role2_skillassign_toc {
    required bool                                   succ                    = 1[default=true];
    optional string                                 reason                  = 2;
    optional p_role_skill                           result                  = 3;
    //剩余技能点
    optional int32                                  remain_points           = 4;
}

//学习某个技能
message m_role2_skilllearn_tos {
    required int32                                  skillid                 = 1;
}

message m_role2_skilllearn_toc {
    required bool                                   succ                    = 1[default=true];
    optional string                                 reason                  = 2;
    //表示学习了哪个技能
    optional int32                                  skillid                 = 3;
}

//查询某个角色在地图中的简单信息
message m_role2_getrolemapinfo_tos {
    required int32                                  role_id                 = 1;
}

//查询某个角色的详细信息 
message m_role2_getroleattr_toc {
    required bool                                   succ                    = 1[default=true];
    optional string                                 reason                  = 2;
    optional p_other_role_info                      role_info               = 3;
}

message p_other_role_info {
        required int32                  role_id                         = 1;
        required string                 role_name                       = 2;
        required int32                  sex                             = 3;
        required int32                  faction_id                      = 4; //国家
        optional string                 family_name                     = 5; //家族名称
        optional int32			        five_ele_attr			        = 6; //五行属性
	    optional string                 office_name                     = 7 [default=""]; //官职
	    optional int32                  charm                           = 8; //魅力
        optional int32                  category                        = 9; //职业
        optional int32                  level                           = 10; //玩家级别
        optional int32                  level_rank                      = 11; //等级榜
        repeated p_goods                equips                          = 12; //玩家装备信息                 
        optional int32                  vip_level                       = 13; //VIP级别
        optional int32                  gongxun                         = 14; //功勋
        optional int32                  pk_point                        = 15; //PK值
        optional int32                  moral_value                     = 16; //师德值
        optional int32                  str                             = 17; //力量
        optional int32                  int2                            = 18; //智力
        optional int32                  con                             = 19; //体质
        optional int32                  dex                             = 20; //敏捷
        optional int32                  men                             = 21; //精神
        optional int32                  max_phy_attack                  = 22; //最大物攻
        optional int32                  min_phy_attack                  = 23; //最小物攻
        optional int32                  max_magic_attack                = 24; //最大魔攻
        optional int32                  min_magic_attack                = 25; //最小魔攻
        optional int32                  double_attack                   = 26; //暴击
        optional int32                  phy_defence                     = 27; //物防
        optional int32                  magic_defence                   = 28; //魔防             
        optional int32                  birthday                        = 29; //生日
        optional int32                  province                        = 30; //省份
        optional int32                  pet_id                          = 31; //宠物id
        optional int32                  city                            = 32; //城市
        optional int32                  luck                            = 33; //幸运值
        optional int32                  miss                            = 34; //闪避
        optional int32                  no_defence                      = 35; //破甲
        optional int32                  hit_rate                        = 36; //命中
        optional double                 sum_prestige                    = 37; //总声望值
        optional double                 cur_prestige                    = 38; //当前声望值
        optional string                 cur_title                       = 39; //当前显示在场景中的称号
        optional int32                  pk_title                        = 40; //PK称号
        optional int32                  max_hp                          = 41; //满血
        optional int32                  max_mp                          = 42; //满魔
        optional int32                  cur_energy                      = 43; //当前精力值
        optional int32                  max_energy                      = 44; //最大精力值
        optional p_skin                 skin                            = 45; //外形
}

message m_role2_getrolemapinfo_toc {
    required bool                                   succ                    = 1[default=true];
    optional string                                 reason                  = 2;
    optional p_map_role                             role_info               = 3;
}

//修改PK模式
message m_role2_pkmodemodify_tos {
        required int32                  pk_mode         = 1;
}

message m_role2_pkmodemodify_toc {
        required bool                   succ            = 1 [default = true];
        optional string                 reason          = 2;
        optional int32                  pk_mode         = 3 [default = 0];
}

//打坐
message m_role2_zazen_tos {         
        required bool                   status          = 2;
}

message m_role2_zazen_toc{
        required bool                   succ            = 1 [default = true]; 
        optional int32                  roleid          = 2;
        required bool                   return_self     = 3 [default = true];
        optional bool                   status          = 4;
        optional string                 reason          = 5;
        optional int32                  sum_exp         = 6[default=0];
}

//玩家五行属性修改
message m_role2_five_ele_attr_tos{
        required int32 type = 1 [default = 0];//获取角色五行属性类型 0免费获取，1有偿获取
}
message m_role2_five_ele_attr_toc{
        required bool succ = 1[default = true];
        optional string reason = 2;
        required int32 five_ele_attr_level = 3 [default = 0];
        required int32 five_ele_attr = 4 [default = 0];//玩家新的五行属性,当前没有五行属性的为:0
}

//灰名
message m_role2_gray_name_tos {
}

message m_role2_gray_name_toc {
        required int32                  roleid          = 1;
        required bool                   if_gray_name    = 2; //true: 灰名，false: 撤消灰名
}

//是否显示装备
message m_role2_show_cloth_tos {
        required bool                   show_cloth      = 1;
}

message m_role2_show_cloth_toc {
        required bool                   succ            = 1 [default=true];
        optional string                 reason          = 2;
        optional bool                   show_cloth      = 3;
}

// 显示装备特效
message m_role2_show_equip_ring_tos {
        required bool                   show_equip_ring = 1;
}

message m_role2_show_equip_ring_toc {
        required bool                   succ            = 1 [default=true];
        optional string                 reason          = 2;
        optional bool                   show_equip_ring = 3;
}

//PK值剩余时间
message m_role2_pkpoint_left_tos {
}

message m_role2_pkpoint_left_toc {
        required int32                  time_left       = 1;
}

// 发型
message m_role2_hair_tos {
        required int32                  hair_type       = 1;
        required string                 hair_color      = 2;
}

message m_role2_hair_toc {
        required bool                   succ            = 1 [default=true];
        optional string                 reason          = 2;
}

// 头像
message m_role2_head_tos {
        required int32                  head_id         = 1;
}

message m_role2_head_toc {
        required bool                   succ            = 1 [default=true];
        optional string                 reason          = 2;
        optional int32                  head_id         = 3;
}

// 变性
message m_role2_sex_tos {
}

message m_role2_sex_toc {
        required bool                   succ            = 1 [default=true];
        optional int32                  sex             = 2; //变性后性别
        optional string                 reason          = 3;
}

// 纪录角色某些事件
message m_role2_event_tos {
        required int32                  event_id        = 1; //事件ID：1、第一次离开新手村，2、第一次使用车夫
}

message m_role2_event_toc {
        required bool                   succ            = 1 [default=true];
        required int32                  event_id        = 2;
        optional string                 reason          = 3;
}

// 系统BUFF剩余时间
message m_role2_system_buff_toc {
        repeated p_sys_buff_info        sys_buff        = 1;
}

message p_sys_buff_info {
        required int32                  buff_type       = 1;
        required int32                  multiple        = 2;
        required int32                  remain_time     = 3;
}

// 移除变身
message m_role2_remove_skin_buff_tos {
}

message m_role2_remove_skin_buff_toc {
        required bool                   succ            = 1 [default=true];
        optional string                 reason          = 2;
}

// 元宝兑换精力值
message m_role2_add_energy_tos {
        required int32                  gold_exchange                   = 1;
}

message m_role2_add_energy_toc {
        required bool                   succ                            = 1 [default=true];
        optional string                 reason                          = 2;
        optional int32                  gold                            = 3;
        optional int32                  gold_bind                       = 4;
        optional int32                  energy                          = 5;
        optional int32                  energy_remain                   = 6;
}

// 上线广播
message m_role2_online_broadcast_toc {
        required int32                  role_type                       = 1; // 角色类型：1、国王
        required string                 role_name                       = 2;
        optional int32                  faction_id                      = 3[default=0];
}
//获取当前国家在线玩家列表
message m_role2_query_faction_online_rank_tos{
        //1 查询当前国家在线玩家列表
        required int32 op_type = 1[default = 0];//操作类型
        required int32 faction_id = 2 [default = 0];//国家id
}
message m_role2_query_faction_online_rank_toc{
        required int32 op_type = 1[default = 0];//操作类型
        required int32 faction_id = 2 [default = 0];//国家id
        required bool succ = 3 [default = true];
        optional string reason = 4;
        optional int32 reason_code = 5 [default = 0];
        repeated p_faction_online_rank online_rank = 6;//国家在线榜
}
message p_faction_online_rank{
        required int32 faction_id = 1;
        required int32 role_id = 2;
        required string role_name = 3;
        required int32 role_level = 4;
}

//------------------------------- 任务系统 开始 -------------------------------
message m_mission_listener_toc{
    required int32 code = 1[default=0];//错误码
    repeated int32 code_data = 2;//错误码对应的整型数据列表
    optional int32 mission_id = 3;//任务ID
    optional p_mission_listener listener = 4;//侦听器数据
}
message p_mission_listener{
    required int32 type = 1;//类型 1怪物 2道具
    required int32 value = 2;//值 比如怪物TYPE 道具TYPE
    repeated int32 int_list = 3;//整型数据 比如道具可能是特定颜色之类的
    required int32 need_num = 4;//所需数量
    required int32 current_num = 5;//当前数量
}
//任务列表单条数据信息
message p_mission_info{
    required int32 id = 1[default=0];//任务ID
    required int32 model = 2[default=0];//模型ID
    required int32 type = 3[default=0];//类型
    required int32 current_status = 4[default=0];//1未接 2已接 3可完成
    required int32 pre_status = 5[default=0];//1未接 2已接
    required int32 current_model_status = 6[default=0];//当前模型状态
    required int32 pre_model_status = 7[default=0];//前一模型状态
    required int32 commit_times = 8[default=0];//执行次数
    required int32 succ_times = 9[default=0];//成功次数
    required int32 accept_time = 10[default=0];//接受任务时间
    required int32 accept_level = 11[default=0];//接任务时的等级
    required int32 status_change_time = 12[default=0];//状态切换时间
    repeated p_mission_listener listener_list = 13;//侦听器数据
    repeated int32 int_list_1 = 14;//其他数据预留数组1
    repeated int32 int_list_2 = 15;//其他数据预留数组2
    repeated int32 int_list_3 = 16;//其他数据预留数组3
    repeated int32 int_list_4 = 17;//其他数据预留数组4
}

//任务列表
message m_mission_list_tos{

}
message m_mission_list_toc{
    required int32  code = 1[default=0];//状态码 0 无异常 1系统错误...
    repeated int32  code_data = 2;//错误码数据列表
    repeated p_mission_info list = 3;//任务数据
}

//任务版本号
message m_mission_vs_tos{

}
message m_mission_vs_toc{
    required int32 version = 1;//任务版本号
}

//做任务VO
message m_mission_do_tos{
    required int32 id = 1;//任务ID
    required int32 npc_id = 2;
    repeated int32 prop_choose = 3;
    repeated int32 int_list_1 = 4;//其他数据预留数组1
    repeated int32 int_list_2 = 5;//其他数据预留数组2
}

message p_mission_reward_data{
    optional int32  exp = 1;//完成任务获得经验
    optional int32  silver = 2;//完成任务获得银子
    optional int32  silver_bind = 3;//完成任务获得绑定银子
    repeated p_mission_prop  prop = 4;//完成任务获得道具
    optional int32  prestige = 5;//完成任务获得声望
}

message p_mission_prop {
	required int32 prop_id = 1;	//道具类型ID，唯一值
	required int32 prop_type = 2;	//道具类型:1=道具，2=宝石，3=装备
	required int32 prop_num = 3;	//数量
	required bool  bind = 4;	//是否绑定
    required int32  color = 5;//颜色
}

message m_mission_do_toc{
    required int32  id = 1;//任务ID
    optional int32  current_status = 2[default=0];//2已接 3可完成
    optional int32  pre_status = 3[default=0];//1未接 2已接
    optional int32  current_model_status = 4[default=0];//当前状态
    optional int32  pre_model_status = 5[default=0];//前一状态
    optional p_mission_reward_data reward_data = 6;
    required int32  code = 7[default=0];//状态码 0 无异常 1系统错误...
    repeated int32  code_data = 8;//状态码数据列表
}

message m_mission_cancel_tos{
    required int32  id = 1;//任务ID
}
message m_mission_cancel_toc{
    required int32  id = 1;//任务ID
    required int32  current_status = 2[default=0];//(1未接-不可能出现) 2已接 3可完成
    required int32  current_model_status = 3[default=0];//当前状态
    required int32  pre_model_status = 4[default=0];//前一状态
    required int32  code = 5[default=0];//状态码 0 无异常 1系统错误...
    repeated int32  code_data = 6;//状态码数据列表
}
message m_mission_update_toc{
    repeated int32 del_mission_list = 1;//删除的任务列表
    repeated p_mission_info update_mission_list = 2;//更新
}

// 委托任务的信息
message p_mission_auto {
    required int32  id          = 1;    //委托任务的唯一ID
    required string name        = 2;    //委托任务名称
    required int32  big_group   = 3;    //委托任务组ID
    required int32  mission_id  = 4;    //关联的任务ID
    required int32  loop_times  = 5[default=0];    //循环次数
    required int32  status      = 6[default=0];    //委托任务的状态:0=未接,1=已接,2=已完成 ,3=不可接
    required int32  start_time  = 7[default=0];    //开始时间
    required int32  end_time    = 8[default=0];//委托结束时间
    required int32  need_gold   = 9[default=0];    //扣除的元宝（每一环的费用）
    required int32  loop_one_time  = 10[default=0];//委托一环需要的时间(单位：秒)
    required int32  max_loop_times = 11[default=0];//委托的最大次数
    required int32  role_level  = 12[default=0];//委托时玩家等级
    required int32  min_level   = 13[default=0];//可委托的玩家最小等级
    required int32  rollback_times =14[default=0];//委托任务奖励双倍次数
    required int32  cur_times = 15[default=0];//委托的循环任务当前完成次数
}

//获取委托任务列表
message m_mission_list_auto_tos{
}
message m_mission_list_auto_toc{
    repeated p_mission_auto list = 1;//委托任务列表
}

//开始或检查委托任务状态
message m_mission_do_auto_tos{
    required int32 id  = 1;//委托任务的唯一ID
    required int32 loop_times = 2;//委托任务循环次数
}
message m_mission_do_auto_toc{
    required int32              id          = 1;    //委托任务的唯一ID
    optional p_mission_auto     auto_info   = 2;    //委托任务数据信息    
    required int32              code        = 3[default=0]; //状态码 0 无异常 1系统错误...
    repeated int32              code_data   = 4;//状态码数据列表
}

//取消委托任务
message m_mission_cancel_auto_tos{
    required int32      id          = 1;//委托任务的唯一ID
}
message m_mission_cancel_auto_toc{
    required int32      id          = 1; //委托任务的唯一ID
    required int32      code        = 2[default=0];//状态码 0 无异常 1系统错误...
    repeated int32      code_data   = 3;//状态码数据列表
}




//------------------------------- 任务系统 结束 -------------------------------
// ------------------------------- 门派镖车 -----------------------------------

//确定开始拉镖
message m_family_ybc_sure_tos {
}

message m_family_ybc_sure_toc {
	required bool      				succ 				= 1[default=true];//成功或者失败
	optional string	   				reason 				= 2;//出错原因 
	required bool					return_self 		= 3[default=true];
}

//门派成员放弃参与门派拉镖，如果拉镖已经开始，则不能主动放弃
message m_family_ybc_giveup_tos {
}

message m_family_ybc_giveup_toc {
	required bool      				succ 				= 1[default=true];//成功或者失败
	optional string	   				reason 				= 2;//出错原因 
	required bool					return_self 		= 3[default=true];
	//表示是谁放弃了门派拉镖了
	optional int32					role_id				= 4;
}

// 玩家主动加入镖车队伍
message m_family_ybc_join_tos {
}

message m_family_ybc_join_toc {
	required bool      				succ 				= 1[default=true];//成功或者失败
	optional string	   				reason 				= 2;//出错原因 
	required bool					return_self 		= 3[default=true];
	//表示是谁加入了门派拉镖了
	required int32					role_id				= 4;
}

//发布镖车
message m_family_ybc_publish_tos{
	//镖车类型 1普通镖车 2高级镖车
	required int32      			type = 1;
}
message m_family_ybc_publish_toc{
	required bool      				succ 				= 1[default=true];//成功或者失败
	optional string	   				reason 				= 2;//出错原因 
	required bool					return_self 		= 3[default=true];
	optional int32	   				type 				= 4;//1 是普通 2是高级
	optional int32	   				remain_time 		= 5[default = 0];//镖车剩余时间 
	optional int32	   				owner_type 			= 6;//1掌门 2长老
	optional string					owner_name			= 7;
	optional int32					silver				= 8;
	optional int32					owner_id			= 9;
	//是否应该弹框
	optional bool					is_alert			= 10;
}

// 广播门派拉镖状态
message m_family_ybc_status_toc {
	// 0表示未开始， 1表示正在进行中
	required int32					status				= 1;
}

//接受镖车
message m_family_ybc_agree_publish_tos{
}
message m_family_ybc_agree_publish_toc{
	required bool      				succ 				= 1[default=true];//成功或者失败
	optional string	   				reason 				= 2;//出错原因 
	required bool					return_self 		= 3[default=true];
	optional int32					role_id				= 4;
	optional string					role_name			= 5;
	// 被扣了多少银两
	optional int32					silver				= 6;
	optional int32					begin_time			= 7;
	//当前有哪些人参与拉镖
	repeated int32					ybc_role_id_list	= 8;
}



// 完成运镖
message m_family_ybc_commit_tos {
}

message m_family_ybc_commit_toc {
	required bool      				succ 			= 1[default=true];//成功或者失败
	optional string	   				reason 			= 2;//出错原因
	required bool					return_self		= 3[default=true];
	//以下是押镖成功后的奖励
	//经验
	optional int32					exp				= 4;
	//返还的银子
	optional int32					silver			= 5;
	//个人贡献
	optional int32					contribution	= 6;
	//门派获得的资金
	optional int32					family_money	= 7;
	//门派繁荣度
	optional int32					active_point	= 8;
}

//门派镖车被攻击后所有的组员都会收到弹框
message m_family_ybc_call_help_toc {
	// 镖车当前在哪张地图
	required int32					map_id		= 1;
}

//接受门派镖车被攻击时的拉人动作
message m_family_ybc_accept_help_tos{
}

message m_family_ybc_accept_help_toc{
	required bool      				succ 			= 1[default=true];//成功或者失败
	optional string	   				reason 			= 2;//出错原因
	required bool					return_self 	= 3[default=true];
	//谁接受了邀请前往护镖，可用于门派频道广播
	optional string					role_name		= 4;
}

message m_family_ybc_collect_tos {
	required string					content			= 1;
}

//门派为门派拉镖拉人
message m_family_ybc_collect_toc {
	required bool      				succ 				= 1[default=true];//成功或者失败
	optional string	   				reason 				= 2;//出错原因
	required bool					return_self 		= 3[default=true];
	// 拉往哪张地图
	optional int32					map_id				= 4;
	optional int32	   				owner_type 			= 6;//1掌门 2长老
	optional string					owner_name			= 7;
	optional string					content				= 8;
}

//接受门派镖车的拉人动作
message m_family_ybc_accept_collect_tos{
}

message m_family_ybc_accept_collect_toc{
	required bool      				succ 			= 1[default=true];//成功或者失败
	optional string	   				reason 			= 2;//出错原因
}

// 获取拉镖人员列表
message m_family_ybc_list_tos {
}

message m_family_ybc_list_toc {
	required bool      							succ 			= 1[default=true];//成功或者失败
	optional string	   							reason 			= 2;//出错原因
	repeated p_family_ybc_member_info			members			= 3;
}

//获取拉镖人员
message p_family_ybc_member_info{
	required int32	   role_id 				= 1;//角色ID
	required string    role_name 			= 2;//角色名字
	required int32     status 				= 4;//状态 1正常 2远离 3下线
}


//掌门T人
message m_family_ybc_kick_tos{
	required int32	   				role_id = 1;//角色ID
}
message m_family_ybc_kick_toc{
	required bool      				succ 			= 1[default=true];//成功或者失败
	optional string	   				reason 			= 2;//出错原因
	required bool					return_self 	= 3[default=true];
	// 被踢掉的是谁
	optional int32	   				role_id 		= 4;//角色ID
	optional string					role_name		= 5;
}

//给镖车加血,暂时不用实现
message m_family_ybc_add_hp_tos{
}

message m_family_ybc_add_hp_toc{
	required bool      				succ 			= 1[default=true];//加血是否成功
	optional string    				reason 			= 2;//加血失败原因
	required bool					return_self 	= 3[default=true];
	optional int32	   				hp 				= 4;//当前血量
}

message m_family_ybc_alert_tos {
	required int32					role_id			= 1;
}
message m_family_ybc_alert_toc {
	required bool      				succ 			= 1[default=true];
	optional string    				reason 			= 2;
	required bool					return_self 	= 3[default=true];
}

//邀请帮众
message m_family_ybc_invite_tos {
}

message m_family_ybc_invite_toc {
	required bool      				succ 				= 1[default=true];
	optional string    				reason 				= 2;
	required bool					return_self 		= 3[default=true];
	optional int32	   				type 				= 4;//1 是普通 2是高级
	optional int32	   				role_id 			= 5;
}

// 通知玩家已经远离镖车了，仅用于个人镖车
message m_ybc_faraway_toc {
	required	p_pos				pos						= 1;//镖车当前位置
	required 	int32				map_id					= 2;//地图ID
}

message m_ybc_enter_toc {
    required p_map_ybc                      ybc_info			= 1;//镖车进入地图
}

message m_ybc_quit_toc {
    required int32                          ybc_id              = 1;
}

message m_ybc_dead_toc {
    required int32                          ybc_id              = 1;
}

message m_ybc_info_tos {
    required int32                          ybc_id              = 1;
}

mesage m_ybc_into_toc {
	required p_map_ybc						ybc_info			= 1;
}

message m_ybc_walk_toc {
	required int32							ybc_id				= 1;
	required p_pos							pos					= 2;
}

// 更新当前镖车的移动速度
message m_ybc_speed_toc {
    required int32                          ybc_id              = 1;
    required int32                          move_speed          = 2; //镖车的移动速度
}

// 通知玩家当前镖车所在位置，用于小地图显示和镖车位置提示
message m_ybc_pos_toc {
	required int32							ybc_id				= 1;
	required int32							map_id				= 2;
	required int32							tx					= 3;
	required int32							ty					= 4;
}

//客户端收到这个消息后会在右下角显示提示
message m_ybc_notify_pos_toc {
	required int32							map_id				= 1;
	required int32							tx					= 2;
	required int32							ty					= 3;
}


// ------------------------------- 门派镖车 -----------------------------------

//===================================== 任务系统 结束 ========================
//===================================== 任务系统 结束 ========================
//===================================== 怪物模块 开始 ========================

message m_monster_enter_toc {
    repeated p_map_monster                  monsters                = 1;//玩家周围的怪 
}

message m_monster_quit_toc {
    required int32                          monsterid               = 1;
}

message m_monster_dead_toc {
    required int32                          monsterid               = 1;
}

message m_monster_attr_change_toc {
    required int32                          monsterid               = 1;
    required int32                          change_type             = 3;
    required int32                          value                   = 4;
}


message m_monster_walk_path_toc {
    required int32                          monsterid               = 1;
    required p_walk_path                    walk_path               = 3;
}

message m_monster_walk_toc {
    required p_map_monster                  monsterinfo             = 1;
    required p_pos                          pos                     = 2;
}

message m_monster_summon_toc {
    required int32                          monster_id              = 1;
}

message m_monster_talk_toc {
    required int32                          monster_id              = 1;
    required string                         content                 = 2;
    
}

//获取当前地图怪物列表 给玩家副本用
message m_monster_query_tos{
}

message m_monster_query_toc {
    repeated int32                         monster_type_list        =1;
}

//===================================== 怪物模块 结束 ========================


// ------------------------------- 交易模块   -----------------------------------

//请求发起交易
message m_exchange_request_tos {
    required int32              target_roleid               = 1;
    required int32              special_case                =2[default=0];//0普通交易，1交换信物
}

message m_exchange_request_toc {
    required bool               succ                        = 1[default=true];
    optional string             reason                      = 2;
    required bool               return_self                 = 3[default=true];
    optional int32              src_role_id                 = 4;
    optional string             src_role_name               = 5;
    required int32              special_case                =6[default=0];//0普通交易，1交换信物
    
}

//同意开始某个交易
message m_exchange_agree_tos {
    required int32              src_roleid                  = 1;
    required int32              special_case                =2[default=0];//0普通交易，1交换信物
}

//通知同意交易
message m_exchange_agree_toc {
    required bool               succ                        = 1[default=true];
    optional string             reason                      = 2;
    required bool               return_self                 = 3[default=true];
    optional int32              target_role_id              = 4;
    optional string             target_role_name            = 5;
    required int32              special_case                =6[default=0];//0普通交易，1交换信物
}

//拒绝某个交易请求
message m_exchange_refuse_tos {
    required int32              src_roleid                  = 1;
    required int32              special_case                =2[default=0];//0普通交易，1交换信物
}

message m_exchange_refuse_toc {
    required bool               succ                        = 1[default=true];
    optional string             reason                      = 2;
    required bool               return_self                 = 3[default=true];
    optional int32              role_id                     = 4;
    optional string             role_name                   = 5;
    required int32              special_case                =6[default=0];//0普通交易，1交换信物
}

//锁定物品以及金钱
message m_exchange_lock_tos {
    repeated int32              goods                       = 1;
    required int32              silver                      = 3 [default=0];
	required int32				gold						= 2 [default=0];
	required int32              special_case                =4[default=0];//0普通交易，1交换信物
}


message m_exchange_lock_toc {
    required bool               succ                        = 1[default=true];
    optional string             reason                      = 2;
    required bool               return_self                 = 3[default=true];
    repeated p_goods            goods                       = 4;
    required int32              silver                      = 6 [default=0];
	required int32				gold						= 7 [default=0];
	required int32              special_case                =8[default=0];//0普通交易，1交换信物
}

//确认交易，在双方斗锁定之前任意一方都不能确认
message m_exchange_confirm_tos {
    required int32              special_case                =1[default=0];//0普通交易，1交换信物
}

message m_exchange_confirm_toc {
    required bool               succ                        = 1[default=true];
    optional string             reason                      = 2;
    required bool               return_self                 = 3[default=true];
    repeated p_simple_goods     goods_info                  = 4;
    required int32              special_case                =5[default=0];//0普通交易，1交换信物
}

message p_simple_goods {
    required int32              goodsid                     = 1;
    required int32              bagid                       = 2;
    required int32              pos                         = 3;
}

//取消交易
message m_exchange_cancel_tos {
    required int32              src_roleid                  = 1;
    //取消类型：1、普通，2、战斗取消，3、距离太远
    required int32              cancel_type                 = 2;
    required int32              special_case                =3[default=0];//0普通交易，1交换信物
}

message m_exchange_cancel_toc {
    required bool               succ                        = 1[default=true];
    optional string             reason                      = 2;
    required bool               return_self                 = 3[default=true];
    required int32              special_case                =4[default=0];//0普通交易，1交换信物
}

//NPC的兑换
message m_exchange_npc_deal_tos {
    required int32              deal_id                  = 1;               //交易项的唯一ID
    required int32              deal_amount              = 2[default=1];    //交易数量
}

message m_exchange_npc_deal_toc {
    required bool               succ                        = 1[default=true];
    optional string             reason                      = 2;
}

message m_exchange_equip_info_tos {
	required int32					chagetype 			= 1;
	repeated p_equip_item			equiplist			= 2;
}

message m_exchange_equip_info_toc {
	required bool					succ				= 1[default=true];
	optional string					reason				= 2;
	optional int32					chagetype 			= 3;
	repeated p_goods				newgoods			= 4;
}


////////////////////////////////////////////////////////////////////////////////////////
//摆摊


//请求摆摊
message m_stall_request_tos {
    //摆摊模式 0为自己摆摊 1为系统托管
    required string                             name                        = 1;
    required int32                              mode                        = 2;
    //如果是系统托管模式，则这里代表要托管多少个小时
    optional int32                              time_hour                   = 4;
}

message m_stall_request_toc {
    required bool               succ                        = 1[default=true];
    optional string             reason                      = 2;
    optional bool               return_self                 = 3[default=true];
    optional p_map_stall        stall_info                  = 4;
    optional int32              silver                      = 5;
    optional int32              bind_silver                 = 6;
}

//玩家点击“摊位”
message m_stall_open_tos {
}

//结果分为三种情况： 1 自动摆摊中  2 自身摆摊中 3 尚未摆摊， 4 摊位过期 通过state字段来标示
message m_stall_open_toc {
    required bool               succ                        = 1[default=true];
    optional string             reason                      = 2;
    //目前为止本次摆摊的总收获
    optional int32              get_silver                  = 3;
    //应该要交的税
    optional int32              tax                         = 4;
    //即使没有摆摊，这里也有可能有摊位物品
    repeated p_stall_goods      goods                       = 5;
    
    optional string             name                        = 7;
    optional int32              remain_time                 = 8;
    optional int32              mode                        = 9;
    // 是否处于摆摊状态
    required int32              state                       = 10;
    
    repeated p_stall_log        buy_logs                    = 11;
    repeated p_stall_log        chat_logs                   = 12;
    optional int32              get_gold                    = 13;
}

//查询某个摊位的信息
message m_stall_detail_tos {
    required int32              role_id                    = 3;
}

message m_stall_detail_toc {
    required bool               succ                        = 1[default=true];
    optional string             reason                      = 2;
    optional int32              role_id                     = 3;
    optional string             role_name                   = 4;
    repeated p_stall_goods      goods                       = 5;
    optional int32              mode                        = 7;
    optional int32              remain_time                 = 8;
    optional string             name                        = 9;
    repeated p_stall_log        buy_logs                    = 10;
    repeated p_stall_log        chat_logs                   = 11;
}

//摊位详细信息中，每件物品信息的结构
message p_stall_goods {
    required p_goods            goods                       = 1;
    required int32              price                       = 2;
    required int32              price_type                  = 3;
    required int32              pos                         = 4;
}


//摊位相关的记录，两种类型：聊天和购买
message p_stall_log {
    //聊天 0 还是  购买记录 1
    required int32              type                        = 1;
    //如果是聊天，则这里代表发起者；如果是购买，则是购买者
    required int32              src_role_id                 = 2;
    required string             src_role_name               = 3;
    //如果是聊天，这个字段表示接受者；如果是购买，则为空，因为是摊主
    optional int32              dest_role_id                = 4;
    optional string             dest_role_name              = 5;
    //如果是购买记录的话，下面几个字段表示花了多少钱买了多少东西
    optional p_goods            goods_info                  = 15;
    optional int32              number                      = 16;
    optional int32              price                       = 18;
    //如果是聊天，则该字段代表聊天的内容
    optional string             content                     = 10;
    //时间
    required int32              time                        = 11;
    // 价格类型：1、银两，2、元宝
    optional int32              price_type                  = 12;
}

message p_stall_list_item {
        required int32                  role_id                 = 1;
        required string                 role_name               = 2;
        required int32                  price                   = 3;
        required int32                  price_type              = 4;
        required p_goods                goods_detail            = 5;
}

//列出周围有哪些东西可以买
message m_stall_list_tos {
    optional int32                  type                    = 1;
    optional int32                  page                    = 2;
    repeated int32                  typeid                  = 3;
    optional int32                  sort_type               = 4;
    optional bool                   is_reverse              = 5;
    optional bool                   is_gold_first           = 6;
    optional int32                  min_level               = 7;
    optional int32                  max_level               = 8;
    optional int32                  color                   = 9;  // 0、全部 1－6 白色到金色
    optional int32                  pro                     = 10; // 0、全部 1、外 2、内
}

message m_stall_list_toc {
    required bool                   succ                    = 1 [default=true];
    optional string                 reason                  = 2;
    optional int32                  type                    = 3;
    optional int32                  page                    = 4;
    repeated int32                  typeid                  = 5;
    optional int32                  sort_type               = 6;
    optional bool                   is_reverse              = 7;
    optional bool                   is_gold_first           = 8;
    optional int32                  min_level               = 9;
    optional int32                  max_level               = 10;
    optional int32                  color                   = 11;
    optional int32                  pro                     = 12;
    repeated p_stall_list_item      goods_list              = 13;
    optional int32                  max_page                = 14;
}

//一个摊位的详细信息
message p_stall_info {
    required int32              role_id                     = 1;
    required string             role_name                   = 11;
    //托管还是真人
    required int32              mode                        = 2;
    //摊位名称
    required string             name                        = 3;
    //摊位所在的位置
    required int32              tx                          = 4;
    required int32              ty                          = 5;
    //商店中的物品
    repeated p_stall_goods      goods                       = 6;
}

//购买摊位中的物品
message m_stall_buy_tos {
    //谁的摊位
    required int32              role_id                     = 1;
    //要买哪些物品，多少个
    required int32              goods_id                    = 2;
    required int32              number                      = 3;
    required int32              goods_price                 = 4;
    //在哪里购买：1、摆摊，2、市场
    required int32              buy_from                    = 5;
}

message m_stall_buy_toc {
    required bool               succ                        = 1[default=true];
    optional string             reason                      = 2;
    required bool               return_self                 = 3[default=true];
    optional int32              role_id                     = 4;
    optional string             role_name                   = 5;
    optional int32              goods_id                    = 6;
    optional int32              num                         = 7;
    optional bool               stall_finish                = 8[default=false];
}

//提取银两
message m_stall_extractmoney_tos {
}

message m_stall_extractmoney_toc {
    required bool               succ                        = 1[default=true];
    optional string             reason                      = 2;
    //实际获取
    optional int32              silver                      = 3;
    //交的税
    optional int32              tax                         = 4;
    optional int32              gold                        = 5;
}

message m_stall_chat_tos {
    //想跟谁聊天
    required int32              target_role_id               = 1;
    required string             content                     = 2;
}

message m_stall_chat_toc {
    required bool               succ                        = 1[default=true];
    optional string             reason                      = 2;
    required bool               return_self                 = 3[default=true];
    optional int32              src_role_id                 = 4;
    optional string             src_role_name               = 5;
    optional string             content                     = 6;
    optional int32              time                        = 7;
}

//结束摆摊
message m_stall_finish_tos {
}

message m_stall_finish_toc {
    required bool               succ                        = 1[default=true];
    optional string             reason                      = 2;
    //用于广播告诉其他玩家摊位结束了
    optional bool               return_self                 = 3[default=true];
    //谁的摊位结束了
    optional int32              role_id                     = 4;
    //个人所得税
    optional int32              tax                         = 5;
    //扣税之后所得的银子
    optional int32              get_silver                  = 6;
    //如果是托管模式，这里可能会退回一些银子
    optional int32              silver                      = 7;
    optional int32              bind_silver                 = 8;
    //是否是过期返回
    optional bool               time_over                   = 9[default=false];
    optional int32              get_gold                    = 10;
}


//中途可以雇佣店小二
message m_stall_employ_tos {
    //雇佣多久
    required int32              hour                        = 1;
}

message m_stall_employ_toc {
    required bool               succ                        = 1[default=true];
    optional string             reason                      = 2;
    //需要通知其他人
    required bool               return_self                 = 3[default=true];
    optional int32              role_id                     = 4;
    optional int32              silver                      = 5;
    optional int32              bind_silver                 = 6;
}


//物品搜索
message m_stall_search_tos {
    required string             content                     = 1;
    //搜索类型 0 全部 1 装备  2 宝石  3  普通
    optional int32              type                        = 2;
    //第几页，第一次搜索为1
    required int32              page                        = 3[default=1];
}

message m_stall_search_toc {
    repeated p_stall_search_goods           result          = 1;
    //共多少页
    required int32                          total_page      = 2;
}


message p_stall_search_goods {
    required p_goods                        goods           = 1;
    required string                         stall_name      = 2;
    //摊主
    required string                         role_name       = 3;
    //摊位位置
    required p_pos                          pos             = 4;
}

// 摆摊状态，用开打开背包时，判断当前摆摊状态
message m_stall_state_tos {
}

message m_stall_state_toc {
        required int32                  stall_state             = 1; // 0、未摆摊，1、摆摊中，2、摆摊过期
}

//=======================================技能 skill=============================
message p_role_skill {
    required int32                  skill_id            = 1;
    required int32                  cur_level           = 2; //技能的当前等级
}

//学习某个技能
message m_skill_learn_tos {
    required int32                  skill_id            = 1;
}

message m_skill_learn_toc {
    required bool                   succ                = 1[default=true];
    optional string                 reason              = 2;
    optional p_role_skill           skill               = 3;
}


//获得所有技能的基本信息
message m_skill_getskills_tos {
}
message m_skill_getskills_toc {
    required bool                   succ                = 1[default=true];
    optional string                 reason              = 2;
    repeated p_role_skill           skills              = 3; 
}

//重洗玩家技能点
message m_skill_reset_toc {
    required bool                   succ                = 1[default=true];
    optional string                 reason              = 2;
    optional int32                  skill_points        = 3;
}


//遗忘个人技能
message m_skill_personal_forget_tos {
    required int32                  skill_id            = 1;
}

message m_skill_personal_forget_toc {
    required bool                   succ                = 1[default=true];
    optional string                 reason              = 2;
    optional int32                  skill_id            = 3;
}


//（门派掌门）研究某个技能
message m_fmlskill_research_tos {
    required int32                  skill_id            = 1;
}

message m_fmlskill_research_toc {
    required bool                   succ                = 1[default=true];
    optional string                 reason              = 2;
    optional p_role_skill           skill               = 3;
}

//遗忘门派技能
message m_fmlskill_forget_tos {
    required int32                  skill_id            = 1;
}

message m_fmlskill_forget_toc {
    required bool                   succ                = 1[default=true];
    optional string                 reason              = 2;
    optional int32                  skill_id            = 3;
}

//获取本门派的（已研究的）门派技能
message m_fmlskill_list_tos {
}

message m_fmlskill_list_toc {
    required bool                   succ                = 1[default=true];
    optional string                 reason              = 2;
    repeated p_role_skill           skills              = 3; //门派技能列表
}

//显示门派BUFF的列表
message m_fmlskill_list_buff_tos {
}

message m_fmlskill_list_buff_toc {
    required bool                   succ                = 1[default=true];
    optional string                 reason              = 2;
    repeated p_fml_buff             buffs               = 3; //门派BUFF列表
    optional bool                   is_fetched          = 4; //判断玩家今天是否已经领取过
}

//领取门派BUFF
message m_fmlskill_fetch_buff_tos {
    required int32                  fml_buff_id         = 1;//门派BUFF的ID
}

message m_fmlskill_fetch_buff_toc {
    required bool                   succ                = 1[default=true];
    optional string                 reason              = 2;
    optional int32                  fml_buff_id         = 3;//门派BUFF的ID
}


//技能的上次使用时间
message m_skill_use_time_toc {
        repeated p_skill_time           skill_time                      = 1;
        required int32                  server_time                     = 2;
}

message p_skill_time {
        required int32                  skill_id                        = 1;
        required int32                  last_use_time                   = 2;
}

//每次移动物品到摊位都需要通知服务器
message m_stall_putin_tos {
    required int32              goods_id                    = 1;
    required int32              price                       = 2;
    required int32              pos                         = 3;
    required int32              price_type                  = 4;
}

message m_stall_putin_toc {
    required bool                           succ            = 1[default=true];
    optional string                         reason          = 2;
}

//从摊位移出物品，未摆摊状态下，移出直接返回原位置
message m_stall_getout_tos {
    required int32                          goods_id        = 1;
    required int32                          bagid           = 2;
    required int32                          pos             = 3;
}

message m_stall_getout_toc {
    required bool                           succ            = 1[default=true];
    optional string                         reason          = 2;
}

//清空摊位
message m_stall_getall_tos {
}

message m_stall_getall_toc {
    required bool                           succ            = 1[default=true];
    optional string                         reason          = 2;
}

//物品在摆摊栏中移动
message m_stall_move_tos {
        required int32                  goodsid                 = 1;
        required int32                  pos                     = 2;
}

message m_stall_move_toc {
        required bool                   succ                    = 1;
        optional string                 reason                  = 2;
}

//---------------------------------精炼系统 refining-------------------------------------
//获取天工炉中的物品
message m_refining_inbag_list_tos {
    required int32            bagid    = 1; //哪个扩展背包
}

//返回天工炉中的物品
message m_refining_inbag_list_toc {
    required int32          bagid   = 1;  //扩展背包id
    repeated p_goods           goods   = 2;  //背包中的物品
}

//获取天工炉中某个物品的信息
message m_refining_info_tos {
    required int32                  id                  = 1;     //物品ID
}

//返回天工炉中某个物品的信息
message m_refining_info_toc {
    optional p_goods              info              = 1 ;  //物品信息
}

//销毁天工炉中某个物品
message m_refining_destroy_tos {
    required int32                id                 = 1;    //物品ID
}

//返回销毁的结果
message m_refining_destroy_toc {
    required bool             succ              = 1 [default = true];
    optional string         reason              = 2;
    optional int32            id                  = 3;    //物品ID
}    

//物品位置交换或者合并
message m_refining_swap_tos{
    required int32        id1                    = 1;    //物品1的ID
    required int32      position2           = 2;    //物品2背包中的位置
    required int32      bagid2               = 3;    //目标背包id
}

//返回物品位置交换或者合并的结果
message m_refining_swap_toc {
    required bool         succ            = 1 [default = true];
    optional string     reason            = 2;
    optional p_goods    goods1          = 3; //移动位置后第一件物品的信息
    optional p_goods    goods2          = 4; //移动位置后第二件物品的信息
}  

//拆分天工炉中某个物品
message m_refining_divide_tos {
    required int32        id                = 1;  //物品ID
    required int32      num                = 2;  //物品拆分出的个数
    required int32      bagposition     = 3;  //新物品要放入的地方
    required int32      bagid           = 4;  //目标背包id
}

//返回拆分物品的结果
message m_refining_divide_toc {
    required bool         succ      = 1 [default = true];
    optional string     reason      = 2;
    optional p_goods    goods1    = 3; //移动位置后第一件物品的信息
    optional p_goods    goods2    = 4; //移动位置后第二件物品的信息
}  

//强化装备
message m_refining_reinforce_equip_tos{
    required int32      bagid = 1;  // 扩展背包id
    required int32      equipid = 2;  //需要强化的装备
}

//返回装备强化的结果
message m_refining_reinforce_equip_toc{
   required bool        succ    = 1;  //强化是否成功 
   optional p_goods     equip   = 2;  //被强化的装备  
   optional p_goods     stuff   = 3;  //消耗的强化材料
   optional p_goods     protect = 4;  //消耗的保护符
   optional string      prompt  = 5;  //强化过程的提示
}

//装备合成
message m_refining_compose_tos {
        required int32          compose_type            = 1; //合成类型：1、5合1，2、4合1，3、3合1
}

message m_refining_compose_toc {
        required bool           succ                    = 1;
        optional p_goods        normal_goods            = 2; //合成的普通物品
        optional p_goods        bind_goods              = 3; //绑定物品
        optional string         reason                  = 4;
}

//装备开孔
message m_refining_punch_tos {
}

message m_refining_punch_toc {
        required bool          succ                     = 1;
        optional string        reason                   = 2;
}

//装备镶嵌
message m_refining_inlay_tos{
    required int32      bagid = 1;  // 扩展背包id
    required int32      equipid = 2;  //需要强化的装备
}

//返回镶嵌结果
message m_refining_inlay_toc{
    required bool      succ     = 1; //镶嵌是否成功
    optional p_goods   equip    = 2; //镶嵌宝石的装备
    optional p_goods   stone    = 3; //镶嵌的宝石
    optional p_goods   symbol   = 4; //消耗所剩的镶嵌符
    optional string    reason   = 5; //失败的原因
}

//装备宝石拆卸
message m_refining_unload_tos{
    required int32      bagid = 1;  // 扩展背包id
    required int32      equipid = 2;  //需要强化的装备
}

message m_refining_unload_toc{
    required bool       succ             = 1; //拆卸是否成功
    optional p_goods    equip            = 2; //拆卸后的装备
    repeated p_goods    deplete_symbol   = 3; //拆卸消耗的拆卸符
    repeated p_goods    delete_symbol    = 4; //拆卸扣除的拆卸符
    repeated p_goods    stones           = 5; //拆卸后的宝石
    repeated p_goods    delete_stones    = 6; //拆卸失败损毁的宝石
    optional string     reason           = 7; //失败的原因
}
//装备绑定
message m_refining_equip_bind_tos{
    required int32      type = 1; //绑定类型,1：第一次绑定，2：使用血灵石进行重新绑定，3：使用附加材料进行绑定升级
    required int32      bag_id = 2;  // 扩展背包id
    required int32      equip_id = 3;  //需要绑定的装备
}
message m_refining_equip_bind_toc{
    required bool       succ = 1;//绑定是否成功
    required int32      type = 2;//绑定类型,1：第一次绑定，2：使用血灵石进行重新绑定，3：使用附加材料进行绑定升级
    optional string     reason = 3;//失败的原因
    optional p_goods    equip_goods = 4;//绑定后的装备
    repeated p_goods    bind_goods = 5;//当前天工炉绑定材料
    optional p_goods    depletion_goods = 6;//消耗的绑定材料
}
// 炼制功能
message m_refining_forging_tos{
    required int32 bag_id = 1;//背包id
}
message m_refining_forging_toc{
    required bool succ = 1;//炼制是否成功
    optional string reason = 2;//失败原因
    repeated p_goods goods_list = 3;//当前天工炉的所有物品
    repeated p_goods depletion_goods = 4;//炼制成功消耗的物品
}
//天工炉新界面操作接口
message m_refining_firing_tos{
        //操作类型 开孔100000,镶嵌200000,折卸300000,强化400000,合成500000,炼制600000,
        //附加700000,提升800000,取回天工炉物品999999,900000提升装备颜色,130000装备附魔
        //装备升级 110000
        required int32 op_type = 1[default = 0];
        //合成 3:三合一,4:四合一,5:五合一
        //绑定 1:第一次绑定,2:重新绑定,3:提示绑定属性
        //取回天工炉物品 1:查询,2:取回
        //提升装备颜色 1:查询,2:提升颜色
        //装备升级 1：查询,2:升级
        required int32 sub_op_type = 2[default = 0];//子类型
        repeated p_refining firing_list = 3;
}
message m_refining_firing_toc{
        required bool succ = 1[default=true];
        optional string reason = 2;
        optional int32 reason_code = 3[default = 0];
        //操作类型 开孔100000,镶嵌200000,折卸300000,强化400000,合成500000,炼制600000,
        //附加700000,提升800000,取回天工炉物品999999,900000提升装备颜色,130000装备附魔
        required int32 op_type = 4[default = 0];
        //合成 3:三合一,4:四合一,5:五合一
        //绑定 1:第一次绑定,2:重新绑定,3:提示绑定属性
        //取回天工炉物品 1:查询,2:取回
        //提升装备颜色 1:查询,2:提升颜色
        required int32 sub_op_type = 5[default = 0];//子类型
        repeated p_refining firing_list = 6;
        repeated p_goods new_list = 7;
        repeated p_goods del_list = 8;
        repeated p_goods update_list = 9;
}
//天工炉天工开物接口
message m_refining_box_tos{
        //操作类型 查询天工开物信息 100000,刷新物品 200000,放置物品 300000,
        //查询物品 400000,提取物品 500000, 出售物品 600000,销毁物品 700000
        //直接提取物品到背包 800000, 查询天工开物功能信息 100001
        //刷新物品并自动放置物品到宝物空间 200001,
        //整理宝物空间物品接口 900000
        required int32 op_type = 1[default = 0];
        //操作费用类型 刷新物品时需要 0 免费 1 9元宝等
        optional int32 op_fee_type = 2[default = 0];
        repeated int32 goods_ids = 3;//提取的物品id列表
        //查询物品需要的字段值
        optional int32 page_no = 4[default = 0];//页数
        optional int32 page_type = 5[default = 0];//页面类型
}
message m_refining_box_toc{
        required bool succ = 1[default=true];
        optional string reason = 2;
        optional int32 reason_code = 3[default = 0];
        required int32 op_type = 4[default = 0];
        optional int32 op_fee_type = 5[default = 0];
        repeated int32 goods_ids = 6;//提取的物品id列表
        optional int32 page_no = 7[default = 0];//页数
        optional int32 page_type = 8[default = 0];//页面类型
        optional bool is_open = 9[default = true];//开箱子功能是否开放
        optional bool is_free = 10[default = true];//开箱子功能是否全部免费
        //箱子物品是否可以领取 0 表示可以领取 其它表示到什么时间可以领取
        optional int32 award_time = 11[default = 0];
        repeated p_goods box_list = 12;//箱子物品列表
        repeated p_goods award_list = 13;//提取物品列表
        repeated p_goods cur_list = 14;//当前箱子物品列表
        optional int32 award_status = 15[default = 0];//领取状态 1可领取，0不可领取
        repeated p_refining_box_log all_log_list = 16;//箱子所有日志
        repeated p_refining_box_log self_log_list = 17;//箱子所有日志
        optional int32 generate_type = 18[default = 0];//物品产出类型 0免费1-9元宝刷新
        optional int32 total_pages = 19[default = 0];//总页数
        optional int32 is_restore = 20[default = 0];//刷新是否自动放置物品到宝物箱 0不自动，1自动
}

//---------------------------------仓库 depot-------------------------------------

//获取仓库中的物品
message m_depot_get_goods_tos{
        required int32          npcid           = 1; //npc id
        required int32          depot_id        = 2;
}

//返回所有开通仓库中的物品
message m_depot_get_goods_toc{
        required bool           succ            = 1[default=true];
        optional string         reason          = 2;
        optional int32          depot_num       = 3;
        repeated p_depot_bag    depots          = 4; //开通仓库的信息
}

message p_depot_bag{    
    required int32   bagid      = 1; //仓库对应的背包id
    repeated p_goods goods_list = 2; //仓库中的物品
}
    

//开通仓库
message m_depot_dredge_tos{
    required int32     bagid = 1; //要开通的仓库的背包id
}

//返回开通仓库的结果
message m_depot_dredge_toc{
    required bool      succ    = 1; //是否成功
    optional int32     bagid   = 2; //背包id
    optional string    reason  = 3; //失败的原因
}

//销毁仓库中某个物品
message m_depot_destroy_tos {
    required int32     id      = 1;    //物品ID
}

//返回销毁的结果
message m_depot_destroy_toc {
    required bool             succ              = 1 [default = true];
    optional string           reason            = 2;
    optional int32            id                = 3; //物品ID
}    

//物品位置交换或者合并
message m_depot_swap_tos{
    required int32        goodsid            = 1;  //物品的ID
    optional int32        position           = 2;  //放置物品的目标位置
    optional int32        bagid              = 3;  //放置物品的目标背包id
}

//返回物品位置交换或者合并的结果
message m_depot_swap_toc {
    required bool       succ          = 1 [default = true];
    optional string     reason        = 2; //失败的原因
    optional p_goods    goods1        = 3; //移动前目标位置的物品信息
    optional p_goods    goods2        = 4; //移动后目标位置的物品信息
}

//拆分仓库中某个物品
message m_depot_divide_tos {
    required int32      id                = 1;  //物品ID
    required int32      num               = 2;  //物品拆分出的个数
    required int32      bagid             = 3;  //放入拆分后物品的背包id
    required int32      position          = 4;  //新物品要放入的地方
}

//返回拆分物品的结果
message m_depot_divide_toc {
    required bool       succ      = 1 [default = true];
    optional string     reason    = 2;
    optional p_goods    goods1    = 3; //拆分后在原来位置上物品的信息
    optional p_goods    goods2    = 4; //拆分后在新的位置上物品的信息
}  

//整理仓库
message m_depot_tidy_tos{
    required int32      bagid     = 1;//仓库背包id
}

message m_depot_tidy_toc{
    required bool       succ       = 1; //是否成功
    required int32      bagid      = 2; //仓库背包id
    repeated p_goods    goods_list = 3; //整理后的物品列表
}

//------------------------------------------------门派仓库系统--------------------------------------------



//------------------------------------------------师徒系统--------------------------------------------
//师傅上线提醒
message m_educate_teacher_online_toc{
    required string name = 1; //师傅的名字            
}

// 师徒组队之后要求免费传送
message m_educate_transfer_tos {
}

//徒弟上线提醒
message m_educate_student_online_toc{
    required string name = 1; //徒弟的名字
}

//邀请玩家，拜玩家为师
message m_educate_invite_apprentice_toc{
	required string       ref      = 1; //邀请码
	required string       rolename = 2; //发起邀请玩家的姓名
}

//邀请拜师结果
message m_educate_invite_apprentice_result_toc{
    required bool                succ    = 1;
    optional string              reason  = 2;
    optional p_educate_role_info info    = 3;
}

//邀请玩家，收玩家为徒
message m_educate_invite_admissions_toc{
	required string       ref      = 1; //邀请码
	required string       rolename = 2; //发起邀请玩家的姓名
}

//邀请收徒结果
message m_educate_invite_admissions_result_toc{
    required bool                succ    = 1;
    optional string              reason  = 2;
    optional p_educate_role_info info = 3;
}

//回复玩家拜师的邀请
message m_educate_reply_invite_apprentice_tos{
	required string       ref      = 1; //邀请码
	required bool         is_agree = 2; //是否同意    
}

message m_educate_reply_invite_apprentice_toc{
    required bool                succ    = 1;
    optional string              reason  = 2;
    optional p_educate_role_info info    = 3;
}


//回复玩家收徒的邀请
message m_educate_reply_invite_admissions_tos{
    required string       ref      = 1; //邀请码
	required bool         is_agree = 2; //是否同意       
}

message m_educate_reply_invite_admissions_toc{
    required bool                succ    = 1;
    optional string              reason  = 2;
    optional p_educate_role_info info    = 3;
}


//结为师徒
message m_educate_sworn_mentoring_tos{
	optional int32        roleid = 2; //邀请对象的id
}

message m_educate_sworn_mentoring_toc{
	required bool                succ     = 1; //结为师徒的结果
	optional string              reason   = 2; //提示
}

//筛选徒弟
message m_educate_filter_student_tos{
}

message m_educate_filter_student_toc{
	repeated p_educate_role_info   roles = 1; //筛选的徒弟
}

//筛选师傅
message m_educate_filter_teacher_tos{
}

message m_educate_filter_teacher_toc{
	repeated p_educate_role_info   roles = 1; //筛选的师傅
}

//开除徒弟前获取需要的师德值
message m_educate_get_expel_moral_value_tos{
	required int32          roleid = 1; //徒弟的id
}

message m_educate_get_expel_moral_value_toc{
    required bool           succ   = 1; //获取是否成功
    required int32          roleid = 2; //徒弟的id
    optional string         reason = 3; //失败的原因
    optional int32          value  = 4; //师德值
    optional string         name   = 5; //徒弟的名称
}

//离开师门前获取需要的师德值
message m_educate_get_dropout_moral_value_tos{
}

message m_educate_get_dropout_moral_value_toc{
    required bool           succ   = 1; //获取是否成功
    optional string         reason = 2; //失败的原因
    optional int32          value  = 3; //师德值
}

//开除徒弟
message m_educate_expel_tos{
	required int32          roleid = 1; //徒弟的id
}

message m_educate_expel_toc{
	required bool                succ       = 1; //开除是否成功
	optional int32               roleid     = 2; //被开除的徒弟的roleid
	optional p_educate_role_info info       = 3; //自己的师徒信息
	optional string              reason     = 4; //失败的原因
	optional bool                is_teacher = 5; //是否是师傅
}

//离开师门
message m_educate_dropout_tos{
}

message m_educate_dropout_toc{
	required bool                 succ       = 1; //离开师门是否成功
	optional int32                roleid     = 2; //离开师门的徒弟的roleid
	optional p_educate_role_info  info       = 3; //自己的师徒信息
	optional string               reason     = 4; //失败的原因
	optional bool                 is_teacher = 5; //是否是师傅
}

//出师
message m_educate_graduate_to_teacher_toc{
	required string        address = 1; //领取出师奖励的地址       
}

message m_educate_graduate_to_student_toc{
	required string        address = 2; //领取出师奖励的地址  
}

//获取同门的信息
message m_educate_get_clan_info_tos{
}

message m_educate_get_clan_info_toc{
    repeated p_educate_role_info clans = 1; //师公，师傅，师兄弟的信息
}

//获取徒弟的信息
message m_educate_get_students_info_tos{
}

message m_educate_get_students_info_toc{
    repeated p_educate_role_info students = 1; //徒弟徒孙们的信息
}

//获取自己师徒系统的信息
message m_educate_get_info_tos{
}

message m_educate_get_info_toc{
	optional p_educate_role_info roleinfo = 1; //自己师徒系统的信息
	optional string              reason   = 2; //获取失败的原因
}

//师德值换取经验
message m_educate_moral_value_to_exp_tos{
	required int32           moral_value = 1; //玩家转换的经验
}

message m_educate_moral_value_to_exp_toc{
	required bool                succ         = 1; //是否成功
	optional p_educate_role_info info         = 2; //最新的师徒信息
	optional string              reason       = 3; //失败的原因
}

message m_educate_moral_value_to_pkpoint_tos {
        required int32           moral_value            = 1;
}

message m_educate_moral_value_to_pkpoint_toc {
        required bool            succ                   = 1 [default=true];
        optional int32           moral_value            = 2;
        optional string          reason                 = 3;
        optional int32           pk_point               = 4;
}


//升级导师称号
message m_educate_upgrade_tos{  
}

message m_educate_upgrade_toc{
    required bool            succ        = 1; //是否成功
    optional int32           student_num = 2; //徒弟的个数
    optional string          reason      = 3; //失败的原因
}

//组队队员升级提示队长获得多少经验值
message m_educate_tip_captain_toc{
    required string          tip         = 1; //提示队长
}

message m_educate_release_tos{
		required int32           opt  = 1; //操作类型，1为发布收徒，2为发布拜师
		required string          msg  = 2; //留言
}

message m_educate_release_toc{
		required bool                succ   = 1; //发布是否成功
		optional p_educate_role_info info   = 2; //发布成功的师徒信息
		optional string              reason = 3; //失败原因
}

//玩家师徒信息
message p_educate_role_info{
	required int32        roleid           = 1;  //玩家id
	required int32        level            = 2;  //玩家等级
	required int32        sex              = 3;  //性别
	required int32        title            = 4;  //称号
	optional string       name             = 5;  //玩家姓名
	optional int32        moral_values     = 6;  //玩家师德值
  optional int32        student_num      = 7;  //徒弟个数
  optional int32        student_max_num  = 8;  //徒弟的最大个数
	optional int32        exp_gifts1       = 9;  //徒弟贡献的经验
	optional int32        exp_grfts2       = 10;  //徒孙贡献的经验
	optional int32        teacher          = 11; //师傅的roleid
	optional string       teacher_name     = 12; //师傅的名字
	optional int32        exp_devote1      = 13; //贡献给师傅的经验
	optional int32        exp_devote2      = 14; //贡献给师公的经验   
	optional bool         online           = 15; //玩家在线情况
	optional int32        apprentice_level = 16; //玩家拜师的等级
	optional bool         rel_admissions   = 17; //是否发布收徒
	optional string       rel_adm_msg      = 18; //发布收徒的留言
	optional int32        rel_adm_time     = 19; //发布收徒的时间
	optional bool         rel_apprentice   = 20; //是否发布拜师             
	optional string       rel_app_msg      = 21; //发布拜师的留言
	optional int32        rel_app_time     = 22; //发布拜师的时间
	optional int32        relation         = 23; //与自己的关系
}

// =======start 死亡通知师徒帮忙 =======
// 通知玩家自己的师父或徒弟自己死了
message m_educate_call_helper_toc{
    required string                     message                 = 1;
    required int32                      role_id			= 2;
}

//是同意前去帮助自己的师父或徒弟 同意的话就发 m_map_change_map_toc
message m_educate_agree_help_tos{
    required int32                  role_id	            = 1;
}
//失败发这个
message m_educate_agree_help_toc{
    required bool            again              = 1[default = false];            
    optional string          message               = 2;
    optional int32           role_id               = 3;
    optional string          reason                = 4;
}
// ========end 死亡通知师徒帮忙 =======

// 获取师徒5代
message m_educate_get_relate_people_tos{
}
message m_educate_get_relate_people_toc{
    repeated p_educate_role_info   educate_role_info           = 1; 
}

//-------------------------------------错误提示----------------------------------------------------

//错误提示，这条提示之后一般都立刻是分线断开
message m_message_error_toc {
    required string             error_msg                  = 1;
    required int32              error_no                   = 2;
}

//---------------------------------钱庄 bank-------------------------------------
//买单、卖单
message p_bank_sheet {
        required int32                  sheet_id                = 1;
        required int32                  roleid                  = 2;
        required int32                  price                   = 3;
        required int32                  num                     = 4; //数量
        required bool                   type                    = 5; //true: 买单、 false: 卖单
        required int32                  time                    = 6; //时间
}

message p_bank_simple_sheet {
        required int32                  price                   = 1;
        required int32                  num                     = 2;
}

//初始化钱庄
message m_bank_init_tos {
}

message m_bank_init_toc {
        required bool                   succ                    = 1 [default = true];
        repeated p_bank_simple_sheet    bank_sell               = 2; //卖单列表
        repeated p_bank_simple_sheet    bank_buy                = 3; //买单列表
        repeated p_bank_sheet           self_sell               = 4; //玩家列表，卖单
        repeated p_bank_sheet           self_buy                = 5;
        optional string                 reason                  = 6;
}

// 购买
message m_bank_buy_tos {
        required int32                  price                   = 1; // 价格
        required int32                  num                     = 2; // 数量
}

message m_bank_buy_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
        optional int32                  num                     = 3; // 买了多少个
        optional int32                  price                   = 4;
        optional int32                  silver                  = 5; // 剩余银两
        optional int32                  gold                    = 6; // 剩余元宝
        optional p_bank_sheet           sheet                   = 7; // 求购单
}

// 出售
message m_bank_sell_tos {
        required int32                  price                   = 1;
        required int32                  num                     = 2;
}

message m_bank_sell_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
        optional int32                  num                     = 3;
        optional int32                  price                   = 4;
        optional int32                  silver                  = 5;
        optional int32                  gold                    = 6;
        optional p_bank_sheet           sheet                   = 7;
}

//撤消
message m_bank_undo_tos {
        required int32                  sheet_id                = 1; //买单、卖单ID
}

message m_bank_undo_toc {
        required bool                   succ                    = 1;
        optional string                 reason                  = 2;
        repeated p_bank_sheet           self_sell               = 3;
        repeated p_bank_sheet           self_buy                = 4;
        repeated p_bank_simple_sheet    bank_sell               = 5;
        repeated p_bank_simple_sheet    bank_buy                = 6;
        optional int32                  return_back             = 7;
}

//加银两
message m_bank_add_silver_toc {
        required int32                  silver                  = 1;
        required bool                   type                    = 2; //true: 别人买了元宝，false: 买单到期系统退回银两
        optional int32                  sheet_id               = 3; //挂单ID
        optional int32                  num                     = 4; //剩余数量
        optional bool                   if_self                 = 5; //是否卖给自己
}

//加元宝
message m_bank_add_gold_toc {
        required int32                  gold                    = 1;
        required bool                   type                    = 2; //true: 别人出售了元宝，false: 卖单到期系统退回元宝
        required int32                  sheet_id                = 3;
        required int32                  num                     = 4;
        optional bool                   if_self                 = 5; //是否买自己的
}

//---------------------------------快捷栏 shortcut-------------------------------------
message p_shortcut {
        required int32                  type                    = 1; //类型：1、技能，2、物品
        required int32                  id                      = 2; //技能id或物品typeid
        optional string                 name                    = 3; //名称
}

//初始化
message m_shortcut_init_toc {
        repeated p_shortcut             shortcut_list           = 1; //快捷栏列表
        required int32                  selected                = 2; //选中项
}

//列表变更
message m_shortcut_update_tos {
        repeated p_shortcut             shortcut_list           = 1;
        required int32                  selected                = 2;
}

message m_bubble_send_tos{
    required int32        action_type = 1;//类型 0 普通消息 1大表情
    required string       msg = 2;//消息
    required int32        to_role_id = 3 [default=0];//发送给哪个位玩家
}

message m_bubble_send_toc{
    required bool       succ = 1[default=true];//是否成功
    optional string     reason = 2; //原因
}
message m_bubble_msg_toc{
    required int32    actor_type    = 1;//类型 1人类
    required int32    actor_id = 2;//玩家id
	required string   actor_name = 3;//玩家姓名
	optional int32	  actor_sex = 4;//玩家性别 可以不传这个属性
	optional int32    actor_faction = 5;//玩家性别 可以不传这个属性
    required int32    action_type = 6;//0 普通消息 1大表情
    required string   msg = 7;//消息
    required int32    to_role_id = 8 [default=0];//发送给哪个位玩家
	optional int32	  actor_head=9[default=1];
}


//------------------------------- 门派 ----------------------------------------

//创建门派
message m_family_create_tos {
    required string                     family_name             = 1; //门派名
    required string                     public_notice           = 2; //对外公告
    required string                     private_notice          = 3; //对内公告
    required bool                       is_invite                 = 4; //邀请同门
}

message m_family_create_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    optional p_family_info              family_info             = 3;
    optional int32                      new_silver              = 4;    //创建者剩余的不绑定银两
    optional int32                      new_silver_bind         = 5;    //创建者剩余的绑定银两
    optional int32                      new_gold                = 6;    //创建者剩余的元宝
    optional int32                      new_gold_bind           = 7;    //创建者剩余的绑定元宝
}

message m_family_introduce_tos {
}

message m_family_introduce_toc {
	// 0 拉镖状态： 0 1 2  1 为门派普通boss状态 0 1 2 
	repeated int32						status					= 1;
}



//我的门派
message m_family_self_tos {
}

message m_family_self_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required p_family_info              family_info             = 3;
}

//如果玩家还没有加入门派，则打开门派面板时显示：邀请我的门派、本国的门派列表
message m_family_panel_tos {   
    required int32                      num_per_page            = 1;
}

message m_family_panel_toc {
    repeated p_family_invite_info       invites                 = 1;
    repeated p_family_summary           family_list             = 2;
    //记录该玩家向哪些门派发送了申请
    repeated p_family_request_info      requests                = 3;
    required int32                      total_page              = 4[default=0];
}

//门派简略信息
message p_family_summary {
    required int32                      id                      = 1;
    required string                     name                    = 2;
    required int32                      create_role_id          = 3;
    required string                     create_role_name        = 4;
    required int32                      owner_role_id           = 5;
    required string                     owner_role_name         = 6;
    required int32                      cur_members             = 7;
    required int32                      faction_id              = 8;
    required int32                      level                   = 9;
    required int32                      active_points           = 10;
}

//个人的门派邀请信息
message p_family_invite_info {
    required int32                      target_role_id          = 1;
    required int32                      family_id               = 2;
    required string                     family_name             = 3;
    required int32                      src_role_id             = 4;
    //谁邀请的
    required string                     src_role_name           = 5;
}




//进入门派副本
message m_family_enter_map_tos {
}

message m_family_enter_map_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
}

//召唤升级Boss
message m_family_call_uplevelboss_tos {
}

message m_family_call_uplevelboss_toc {
    required bool                       succ                = 1[default=true];
    optional string                     reason              = 2;
}

//召唤普通boss
message m_family_call_commonboss_tos {
}

message m_family_call_commonboss_toc {
    required bool                       succ                = 1[default=true];
    optional string                     reason              = 2;
}


//门派升级
message m_family_uplevel_tos {
}

message m_family_uplevel_toc {
    required bool                       succ                = 1[default=true];
    optional string                     reason              = 2;
    //告诉门派其他成员：门派升级了
    required bool                       return_self         = 3[default=true];
    optional int32                      new_level           = 4;
	optional int32						money				= 5;
	optional int32						active_points		= 6;
}


//邀请列表，这个信息是推过来的
message m_family_invite_list_toc {
    //邀请列表
    repeated p_family_invite            invite_list             = 1;
}


//申请列表，这个信息是推过来的
message m_family_request_list_toc {
    //申请列表
    repeated p_family_request           request_list            = 1;
}


//告诉其他门派成员有新的成员加入了
message m_family_member_join_toc {
    required p_family_member_info       member                  = 1;
}

//退出门派
message m_family_member_leave_tos {
}

message m_family_member_leave_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
    required int32                      role_id                 = 4;
}

message m_family_list_tos {
    required int32                      page_id                 = 1[default=1];
    required int32                      num_per_page            = 2[default=5];
    optional string                     search_content          = 3;
    //搜索类型： 1 为门派名称搜索  2为掌门名称搜索
    optional int32                      search_type             = 4[default=1];
    optional int32			request_from		= 5[default=1];
}

message m_family_list_toc {
    repeated p_family_summary           family_list             = 1;
    required int32                      total_page              = 2[default=0];
    required int32                      page_id                 = 3;
    optional int32			request_from		= 4[default=1];
}


//申请加入门派
message m_family_request_tos {
    required int32                      family_id               = 1;
}

message m_family_request_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
    optional p_family_request           request                 = 4;
    optional int32                      family_id               = 5;
}

//邀请某人加入门派
message m_family_invite_tos {
    required string                     role_name               = 1;
}

message m_family_invite_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
    optional string                     role_name               = 4;
    optional int32                      family_id               = 5;
    optional string                     family_name             = 6;
}

//取消邀请某个玩家
message m_family_cancel_invite_tos {
    required int32                      role_id                 = 1;
}

message m_family_cancel_invite_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
    optional int32                      role_id                 = 4;
}

//拒绝某个门派的邀请
message m_family_refuse_tos {
    required int32                      family_id               = 1;
}

message m_family_refuse_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
    optional int32                      role_id                 = 4;
    //谁拒绝了门派邀请
    optional string                     role_name               = 5;
}

//同意某个玩家加入门派的请求
message m_family_agree_f_tos {
    required int32                      role_id                 = 1;
}

message m_family_agree_f_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
    optional p_family_info		family_info		= 4;
    required int32			admit_role_id		= 5[default=0];
}


//解散门派
message m_family_dismiss_tos {
}

message m_family_dismiss_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
}

//设置帮众称号
message m_family_set_title_tos {
    required int32                      role_id                 = 1;
    required string                     title                   = 2;
}

message m_family_set_title_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
    optional int32                      role_id                 = 4;
    optional string                     role_name               = 5;
    optional string                     title                   = 6;
}


//转让掌门给门派成员
message m_family_set_owner_tos {
    required int32                      role_id                 = 1;
}

message m_family_set_owner_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
    optional int32                      role_id                 = 4;
}


//任命长老
message m_family_set_second_owner_tos {
    required int32                      role_id                 = 1;
}

message m_family_set_second_owner_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
    optional int32                      role_id                 = 4;
    optional string                     role_name               = 5;
}

//取消长老
message m_family_unset_second_owner_tos {
    required int32                      role_id                 = 1;
}

message m_family_unset_second_owner_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
    optional int32                      role_id                 = 4;
}


//设置对外公告
message m_family_update_pub_notice_tos {
    required string                     content                 = 1;    
}

message m_family_update_pub_notice_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
    optional string                     content                 = 4;
}

//设置对内公告
message m_family_update_pri_notice_tos {
    required string                     content                 = 1;    
}

message m_family_update_pri_notice_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
    optional string                     content                 = 4;
}
//设置qq号
message m_family_update_connect_number_tos {
    required string                     content                 = 1;
    required string                     type                    = 2;    
}

message m_family_update_connect_number_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
    optional string                     content                 = 4;
    required string                     type                    = 5;
}

//拒绝某人加入门派的请求
message m_family_refuse_f_tos {
    required int32                      role_id                 = 1;
}

message m_family_refuse_f_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
    optional string                     family_name             = 4;
}

//开除成员
message m_family_fire_tos {
    required int32                      role_id                 = 1;
}

message m_family_fire_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
    optional int32                      role_id                 = 4;
    optional string                     role_name               = 5;
}

//同意某个门派的邀请而加入门派
message m_family_agree_tos {
    required int32                      family_id               = 1;
}

message m_family_agree_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
    optional p_family_member_info       member_info             = 4;
    optional p_family_info				family_info				= 5;
}

//退出门派
message m_family_leave_tos {
}

message m_family_leave_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
    //表示哪个玩家离开了门派
    optional int32                      role_id                 = 4;
}


//2010-08-10

//离开门派地图
message m_family_leave_map_tos {
}

message m_family_leave_map_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
}


//进入门派的boss副本
message m_family_enter_bossmap_tos {
}

message m_family_enter_bossmap_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
}

//离开门派的boss副本
message m_family_leave_bossmap_tos {
}

message m_family_leave_bossmap_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
}

//通知某个门派成员上线了
message m_family_role_online_toc {
    required int32                      role_id                 = 1;
}

message m_family_role_offline_toc {
    required int32                      role_id                 = 1;
}

//打开邀请面板时返回的可邀请玩家列表
message m_family_can_invite_tos {
}

message m_family_can_invite_toc {
    repeated p_recommend_member_info                roles                   = 1;
}

//取消某个门派成员的称号
message m_family_cancel_title_tos {
    required int32                      role_id                 = 1;
}

message m_family_cancel_title_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    //r表示哪个玩家被取消了称号，称号取消后显示为"帮众"
    optional int32                      role_id                 = 3;
}

//激活门派地图，条件：当前在线5个人，且门派地图还没有激活，申请费用5元宝  找NPC，只有掌门能够开启

message m_family_enable_map_tos {
}

message m_family_enable_map_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    //用于通知门派其他成员：本门派的地图被激活了
    required bool                       return_self             = 3[default=true];
}

//广播通知门派地图关闭了
message m_family_del_request_toc {
    required int32                      role_id                 = 1; //需要清楚的门派申请的玩家ID
}

//广播通知门派地图关闭了
message m_family_map_closed_toc {
}

message p_family_request_info {
    required int32                      role_id                 = 1;
    required int32                      family_id               = 2;
}

//门派的属性更新
message m_family_info_change_toc {
    repeated p_family_info_change        changes                = 1;
}

//门派的繁荣度更新
message m_family_active_points_toc {
    required int32                      new_points              = 1;
}

//门派财富更新了
message m_family_money_toc {
    required int32                      new_money               = 1;
}

//门派降级了
message m_family_downlevel_toc {
    required int32                      level                   = 1;
    optional string                     reason                  = 2;
}


//掌门召唤boss时候邀请组员参与门派打怪
message m_family_callmember_toc {
    required int32                      call_type               = 1[default=1];  //召唤类型：1表示打BOSS的召唤，2表示掌门的正常召唤
    required bool                       succ                    = 2[default=true];
    optional string                     reason                  = 3;
    optional string			            message                 = 4;
}

//掌门召唤帮众到门派地图
message m_family_callmember_tos {
    required string                     message                 = 1; //掌门召唤的语句
}


//成员在门派地图传送的结果
message m_family_member_enter_map_toc{
    required  bool			succ			= 1;
    optional  string			reason			= 2;
}

//成员在门派地图的传送请求
message m_family_member_enter_map_tos{
    required int32                      call_type                = 1[default=1]; //召唤类型：1表示打BOSS的召唤，2表示掌门的正常召唤
}

//门派维护费用扣费失败
message m_family_maintainfail_toc{
    required  string			message			= 1;
    required  int32			result			= 2;
    optional  int32			new_level		= 3;
 }
//门派活动状态
message m_family_activestate_toc
{
	 required  	bool			                succ			                = 1[default=true];
	 repeated   p_family_task  	                familytasklist                  = 2;
}

message m_family_activestate_tos{
    required    int32                         family_id                      =1;
}

//门派令第一次推给前端的消息
message m_family_membergather_toc{
	required string			message			= 1;
}


//成员同意传送
message m_family_gatherrequest_tos {	

}

//传送结果
message m_family_gatherrequest_toc {
	required bool		      succ			= 1;
	required string		      reason			= 2;
}

//门派具体信息
message m_family_detail_tos {
	required int32			family_id		= 1;
}

message m_family_detail_toc {
	required  bool		        succ				= 1[default=true];
	optional  string 	        reason			    = 2;
	optional  p_family_info	    content		        = 3;
}

//门派采集开始
message m_family_collect_begin_toc {
	  required int32           left_tick             = 1;
}
//门派采集积分信息
message m_family_collect_info_toc {
    optional int32           score              = 1[default=0];
    optional int32           collect_num        = 2[default=0];
    optional int32           monster_kill_num   = 3[default=0];
    required int32           left_tick          = 4;
}


//门派采集奖励信息
message m_family_collect_prize_info_tos {
	
}

message m_family_collect_prize_info_toc {
	required  bool		                            succ		= 1[default=true];
	optional  string 	                            reason		= 2;
	optional  p_family_collect_role_prize_info      info        = 3;
}

//门派采集刷奖励
message m_family_collect_refresh_prize_tos {
	
}

message m_family_collect_refresh_prize_toc {
	required  bool		                            succ		= 1[default=true];
	optional  string 	                            reason		= 2;
	optional  p_family_collect_role_prize_info      info        = 3;
}

//门派采集获取奖励
message m_family_collect_get_prize_tos {
	
}

message m_family_collect_get_prize_toc {
	required  bool		        succ				= 1[default=true];
	optional  string 	        reason			    = 2;
	optional  int32 	        addexp			    = 3;
}

message m_family_set_bonfire_start_time_tos{
		required  int32		 hour				= 1[default=0];
		required  int32	   minute			= 2[default=0];
		required  int32	   seconds		= 3[default=0];
}


message m_family_set_bonfire_start_time_toc{
		required  bool		   succ				= 1[default=true];
		optional  string 	   reason			= 2;
		optional  int32		   hour			  = 3;
		optional  int32	     minute		  = 4;
		optional  int32	     seconds		= 5;
}
%% 获取列表
message m_family_get_donate_info_tos{

}
message m_family_get_donate_info_toc{
    optional bool                  succ               = 1[default=true];
    optional string                reason             = 2;
    optional int32                 reason_code        = 3;
    repeated p_role_family_donate_info  donate_gold_list   = 4;
    repeated p_role_family_donate_info  donate_silver_list = 5;
}
message m_family_donate_tos{
    optional int32  donate_type  =1; //捐献类型 1:元宝or 2:金币
    optional int32  donate_value =2[default=0];//捐献数量
}

message m_family_donate_toc{
    optional bool                  succ               = 1[default=true];
    optional string                reason             = 2;
    optional int32                 reason_code        = 3;
    optional int32                 donate_type        = 4;
    optional p_role_family_donate_info  donate_info        = 5;
}

//=====================================================消息广播模块 Broadcast Begin================================================
//广播通知消息：一般通知消息，通知客户端数据结构
message m_broadcast_general_toc{
    repeated int32  type = 1;//消息类型 2905:操作消息(预留接口),2906:系统消息,2907:倒计时消息,
                                          //2908:喇叭消息,2909:中央广播消息,2910:聊天频道消息,2911:弹窗消息
    required int32  sub_type = 2;//消息子类型 2912:表示没和消息子类型,
                                                //倒计时消息子类型:2913副本时间消息,2914任务时间消息
                                                //聊天频道消息子类型：2915世界,2916国家,2917门派,2918组队
    required string content = 3;//消息内容
    repeated string ext_info_list= 4; //[0]:编码 表示是否boss群怪物[1]:boss出生地图[2]:坐标x值[3]:坐标y值[4]:bossID
}
//广播通知消息：倒计时通知消息，通知客户端数据结构
message m_broadcast_countdown_toc{
        required int32  type = 1;//消息类型 2907:倒计时消息
    required int32  sub_type = 2;//消息子类型 倒计时消息子类型:2913副本时间消息,2914任务时间消息
        required int32  id = 3;//唯一标识，更新同步倒计时时间使用
    required string content = 4;//消息内容
    required int32  countdown_time = 5;//持续时间
    required int32  current_countdown_time = 6;//当前持续时间
}

//广播通知消息:一般通知消息，即需要发送一般消息发送的的数据结构
//发送给mod_broadcast模块
message m_broadcast_general_tos{
        required int32  type = 1;//消息类型 2905:操作消息,2906:系统消息,2908:喇叭消息,2909:中央广播消息,2910:聊天频道消息,2911:弹窗消息
        required int32  sub_type = 2;//消息子类型 2912:表示没和消息子类型
                                                //聊天频道消息子类型：2915世界,2916国家,2917门派,2918组队
    required string content = 3;//消息内容
        repeated int32  role_list = 4;//此消息的接收者，角色
        optional bool   is_world = 5 [default=false];//是否全服广播
        optional int32  country_id = 6;//此消息的接收者，国家
        optional int32  famliy_id = 7;//此消息的接收者，门派
        optional int32  team_id = 8;//此消息的接收者，队伍
}
//广播通知消息：倒计时消息，即需要发送倒计时消息发送的数据结构
message m_broadcast_countdown_tos{
        required int32  type = 1;//消息类型 2907:倒计时消息,
    required int32  sub_type = 2;//消息子类型 倒计时消息子类型:2913副本时间消息,2914任务时间消息
        optional int32  id = 3 [default=0];//唯一标识，更新同步倒计时时间使用
        required string content = 4;//消息内容
    required int32  countdown_time = 5;//持续时间
    required int32  current_countdown_time = 6;//当前持续时间
        repeated int32  role_list = 7;//此消息的接收者，角色
        optional bool   is_world = 8 [default=false];//是否全服广播
        optional int32  country_id = 9;//此消息的接收者，国家
        optional int32  famliy_id = 10;//此消息的接收者，门派
        optional int32  team_id = 11;//此消息的接收者，队伍       
}
//后台广播消息，聊天频道的消息以世界广播方式发送
message m_broadcast_admin_tos {
    required int32   id = 1;//消息唯一标记，使用时间截处理
    required int32   foreign_id = 2;//消息外键，即中央管理发送的消息唯一标记，如果不是中央管理即默认为0
    required int32   type = 3;  //消息类型 2906:系统消息,2908:喇叭消息,2909:中央广播消息,2910:聊天频道消息,2911:弹窗消息
    required string  content = 4;//内容
    required int32   send_strategy =5;//0,立即，1.特定日期时间范围, 2.星期 3.开服后,4.持续一段时间内间隔发送
    optional string  start_date =6;//如果是日期，即格式为：yyyy-MM-dd
    optional string  end_date =7;//如果是日期，即格式为：yyyy-MM-dd
    optional string  start_time = 8;//如果为时间，即格式为：HH:mm:ss
    optional string  end_time = 9;//如果为时间，即格式为：HH:mm:ss
    optional int32   interval = 10 [default=0];//间隔时间 单位：秒
}
//游戏业务逻辑，循环消息广播
message m_broadcast_cycle_tos {
    required int32  type = 1;//消息类型 2905:操作消息,2906:系统消息,2908:喇叭消息,2909:中央广播消息,2910:聊天频道消息,2911:弹窗消息
    required int32  sub_type = 2;//消息子类型 2912:表示没和消息子类型
                                 //聊天频道消息子类型：2915世界,2916国家,2917门派,2918组队
    required string content = 3;//消息内容
    required int32  send_type =4;//0,立即，1.时间范围
    optional int32  start_time = 5;//开始时间 格式为：common_tool:now()
    optional int32  end_time = 6;//结束时间 格式为：common_tool:now()
    optional int32  interval = 7 [default=0];//间隔时间 单位：秒
    repeated int32  role_list = 8;//此消息的接收者，角色
    optional bool   is_world = 9 [default=false];//是否全服广播
    optional int32  country_id = 10;//此消息的接收者，国家
    optional int32  famliy_id = 11;//此消息的接收者，门派
    optional int32  team_id = 12;//此消息的接收者，队伍
}

//前端发送喇叭消息请求的回复消息定义
message m_broadcast_laba_tos{
        required string content = 1;//消息内容 
        required int32 laba_id  = 2; //喇叭ID
}
message m_broadcast_laba_toc{
    required bool succ = 1 [default = true];
    required bool return_self = 2 [default = true];//发送给自己的消息
    optional string reason = 3;//错误时，错误描述
    required string content = 4;//消息内容
    required int32 role_id = 5;
    required string role_name = 6;
    required int32  sex       = 7; //性别
    required int32 faction_id = 8; //国家ID
}

//=====================================================消息广播模块 Broadcast End================================================

// 装备打造
// 获取打造列表接口
message m_equip_build_list_tos{
    required int32 build_level = 1[default=1];//打造列表id
}
message m_equip_build_list_toc{
    required bool succ = 1 [default = true];//成功失败标志
    optional string reason = 2;//错误时，错误描述
    optional int32 build_level = 3[default=1];//打造列表id
    repeated p_equip_build_equip build_list = 4;//可打造列表
}
//打造接口
message m_equip_build_build_tos{
    required int32 build_level = 1[default=1];//打造列表id
    required int32 equip_type_id = 2;//装备类型id
    required int32 base_type_id = 3;//基础材料id
    optional int32 add_type_id = 4[default=0];//附加材料id
}
message m_equip_build_build_toc{
    required bool succ = 1 [default = true];//成功失败标志
    optional string reason = 2;//错误时，错误描述
    optional int32 build_level = 3[default=1];//打造列表id
    repeated p_equip_build_equip build_list = 4;//可打造列表
    repeated p_equip_build_goods base_list = 5;//可用材料列表
    repeated p_equip_build_goods add_list = 6;//附加材料列表
    optional p_equip_build_goods new_equip = 7;//打造的新装备
    optional p_equip_build_goods base_goods = 8;//消耗的基础材料
    optional p_equip_build_goods add_goods = 9;//消耗的附加材料
}

// 获取角色当前背包的打造材料
message m_equip_build_goods_tos{
    required int32 material = 1[default=0];// 装备材质 0，所有，1:金,2:木,3:皮,4:布,5:玉,
}
message m_equip_build_goods_toc{
    required bool succ = 1 [default = true];//成功失败标志
    optional string reason = 2;//错误时，错误描述
    optional int32 material = 3;// 装备材质 0，所有，1:金,2:木,3:皮,4:布,5:玉,
    repeated p_equip_build_goods base_list = 4;//可用材料列表
    repeated p_equip_build_goods add_list = 5;//附加材料列表
}

//打造装备列表结构
message p_equip_build_equip{
    required int32 type_id = 1;//装备标识
    required string equip_name = 2;//装备名称
    required int32 level = 3;//装备级别
    required int32 slot_num = 4;//装备使用的位置
    required int32 kind = 5;//装备类型 ,如刀, 剑，法杖等
    required int32 material = 6;// 装备材质 0，不能打造，1:金,2:木,3:皮,4:布,5:玉,
}
//打造材料结构
message p_equip_build_goods{
    required int32 type_id=1;//详细类型ID
    required string name=2;//物品名称
    required int32 current_num=3;//物品当前数量
    optional int32 needed_num=4[default=0];//每一次打造需要的材料数量，前端使用，后台不需要处理
}

//装备品质改造接口定义
//获取装备品质改造材料
message m_equip_build_quality_goods_tos{
    required int32 material = 1[default=0];// 装备材质 0，所有，1:金,2:木,3:皮,4:布,5:玉,
}
message m_equip_build_quality_goods_toc{
    required bool succ = 1 [default = true];//成功失败标志
    optional string reason = 2;//错误时，错误描述
    optional int32 material = 3;// 装备材质 0，所有，1:金,2:木,3:皮,4:布,5:玉,
    repeated p_equip_build_goods add_list = 4;//附加材料列表
}
//装备品质改造
message m_equip_build_quality_tos{
    required int32 equip_id = 1;//装备id
    required int32 add_type_id = 2;//装备附加材料类型id
}
message m_equip_build_quality_toc{
    required bool succ = 1 [default = true];//成功失败标志
    optional string reason = 2;//错误时，错误描述
    optional p_goods equip = 3;//装备信息
    repeated p_equip_build_goods add_list = 4;//附加材料列表
    optional p_equip_build_goods add_goods = 5;//消耗的附加材料
}

//装备更改签名接口定义
message m_equip_build_signature_tos{
    required int32 equip_id = 1;//装备id
}
message m_equip_build_signature_toc{
    required bool succ = 1 [default = true];//成功失败标志
    optional string reason = 2;//错误时，错误描述
    optional p_goods equip = 3;//装备信息
}

//装备升级接口定义
//获取装备可升级的装备信息
message m_equip_build_upgrade_link_tos{
    required int32 equip_id = 1;//升级装备id
    optional bool is_quality = 2 [default = false];//保留品质
    optional bool is_reinforce = 3 [default = false];//保留强化
    optional bool is_five_ele = 4 [default = false];//保留装备五行
    optional bool is_bind_attr = 5 [default = false];//保留五行属性
}
message m_equip_build_upgrade_link_toc{
    required bool succ = 1 [default = true];//成功失败标志
    optional string reason = 2;//错误时，错误描述
    optional p_goods new_equip = 3;//升级的装备基本信息
}
//获取装备升级材料接口
message m_equip_build_upgrade_goods_tos{
    required int32 material = 1[default=0];// 装备材质 0，所有，1:金,2:木,3:皮,4:布,5:玉, 
}
message m_equip_build_upgrade_goods_toc{
    required bool succ = 1 [default = true];//成功失败标志
    optional string reason = 2;//错误时，错误描述
    optional int32 material = 3;// 装备材质 0，所有，1:金,2:木,3:皮,4:布,5:玉,
    repeated p_equip_build_goods base_list = 4;//基础材料列表
    repeated p_equip_build_goods add_list = 5;//附加材料列表
    repeated p_equip_build_goods quality_list = 6;//品质材料列表
    repeated p_equip_build_goods reinforce = 7; //保留强化材料
}
//装备升级接口
message m_equip_build_upgrade_tos{
    required int32 equip_id = 1;//升级装备id
    required int32 new_type_id = 2;//升级装备类型id
    required int32 base_type_id = 3;//基础材料类型id
    optional int32 quality_type_id = 4 [default = 0];//保留品质材料类型id
    optional int32 reinforce_type_id = 5 [default = 0];//保留强化材料类型id
    optional int32 five_ele_type_id = 6 [default = 0];//保留装备五行材料类型id
    optional int32 bind_attr_type_id = 7 [default = 0];//保留装备绑定属性材料类型id
}
message m_equip_build_upgrade_toc{
    required bool succ = 1 [default = true];//成功失败标志
    optional string reason = 2;//错误时，错误描述
    optional p_goods equip = 3;//装备信息
    repeated p_equip_build_goods base_list = 4;//基础材料列表
    repeated p_equip_build_goods add_list = 5;//附加材料列表
    repeated p_equip_build_goods reinforce = 6; //保留强化材
    repeated p_equip_build_goods quality_list = 7; //品质材料列表
    optional p_equip_build_goods base_goods = 8;//消耗的基础材料
    optional p_equip_build_goods quality_goods = 9;//消耗的附加材料
    optional p_equip_build_goods reinforce_goods = 10;//消耗的保留强化材料
    optional p_equip_build_goods five_ele_goods = 11;//消耗的的保留五行材料
    optional p_equip_build_goods bind_attr_goods = 12;//消息的绑定属性材料
}

//装备分解接口定义
message m_equip_build_decompose_tos{
    required int32 equip_id = 1;//升级装备id
}
message m_equip_build_decompose_toc{
    required bool succ = 1 [default = true];//成功失败标志
    optional string reason = 2;//错误时，错误描述
    optional p_equip_build_goods base_goods = 3;//分解的基础材料
    optional p_equip_build_goods add_goods = 4;//分解的附加材料
}
//装备五行属性

// 获取装备五行属性材料
message m_equip_build_fiveele_goods_tos{
    required int32 material = 1[default=0];// 装备材质 0，所有，1:金,2:木,3:皮,4:布,5:玉,
}
message m_equip_build_fiveele_goods_toc{
    required bool succ = 1 [default = true];//成功失败标志
    optional string reason = 2;//错误时，错误描述
    optional int32 material = 3;// 装备材质 0，所有，1:金,2:木,3:皮,4:布,5:玉,
    optional p_equip_build_goods five_good = 4;//五行珠材料
    repeated p_equip_build_goods add_list = 5;//附加材料列表
}
// 获取装备五行属性
message m_equip_build_fiveele_tos{
    required int32 type =1[default = 0];// 操作类型，1第一次获取装备五行2重新洗装备五行3装备五行升级
    required int32 equip_id = 2;// 装备Id
    required int32 good_type_id = 3;// 装备五行操作材料类型id 
}
message m_equip_build_fiveele_toc{
    required bool succ = 1[default = true];//成功失败标志
    optional string reason = 2;//错误时，错误描述
    optional p_goods equip = 3;//装备信息
    optional p_equip_build_goods five_good = 4;//五行珠材料
    repeated p_equip_build_goods add_list =  5;//附加材料列表
    optional p_equip_build_goods used_good = 6;//消耗材料列表
}

//车夫
message m_driver_go_tos{
    required int32 id 		= 1;//传送点ID
    optional int32 type   	= 2[default=1];//类型
}

message m_driver_go_toc{
  required bool 	succ = 1;//成功与否
  optional string	reason = 2;//原因
  optional int32	type = 3[default=0];//类型
  required int32 	id 	= 4;//传送点ID
}

// 向服务器发送一些信息
message m_system_behavior_tos {
	// 类型： 1  表示收到了m_map_enter_toc  2 表示map_enter逻辑已经Ok了  3表示看到欢迎窗口了
	required	int32				type = 1;
}

//心跳包
message m_system_heartbeat_tos {
	required int32	time = 1;
}

message m_system_heartbeat_toc {
	required int32	time 				= 1;
	//服务器时间
	required int32  server_time 		= 2;
}


message m_system_fcm_toc{
	required string info = 1;//信息
	required int32	remain_time = 2;//还能在线的时间
	required int32	total_time = 3;//累计在线时间
}


//玩家还没有提交过防沉迷资料，需要显示一个提示框让他选择时填写或者直接选择是未成年
message m_system_need_fcm_toc {
	required int32				remain_time		= 1;
}


message m_system_set_fcm_tos{
	required string 		name = 1;//姓名
    required string 		card = 2;//身份证
}


message m_system_set_fcm_toc{
	required bool succ = 1;//结果
	optional string	reason = 2;//出错原因
}


// 用于提示各种系统错误，例如断线等等
message m_system_error_toc {
	// 用于表示收到这条消息之后，服务端是否会关闭socket连接，默认是会关闭的
	required bool				if_close_connect 	= 1[default=true];
	//哪种socket断开的: line 分线 login登录 chat 聊天
	required string				type 			 	= 2[default='line'];
	// 错误文本
	required string				error_info			= 3;
	// 错误号
	required int32				error_no			= 4;
	// 是否需要重连socket，默认不需要
	required bool				need_reconnect		= 5[default=false];
	//如果需要自动重连的话，会一并返回一个key和一个分线的信息 ，如果是login的话，就不用管这里的信息了
	optional string				key					= 6;
	optional p_line_info		line_info			= 7;				
}

// 提示信息用，例如某个系统关闭了
message m_system_message_toc {
	required string					message		= 1;
}

//系统设置更改
message m_system_config_change_tos {
        required p_sys_config           sys_config              = 1;
}

message m_system_config_change_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
} 

//系统设置
message m_system_config_toc {
        required p_sys_config           sys_config              = 1;
}

message m_system_pk_not_agree_tos {
}

message p_sys_config {
        required int32                  scence_vol              = 1 [default=30]; //场景音乐
        required int32                  game_vol                = 2 [default=30]; //游戏音乐
        required bool                   back_sound              = 3 [default=false]; //背景音乐
        required bool                   game_sound              = 4 [default=false]; //游戏音乐
        required int32                  image_quality           = 5 [default=2]; //画面质量
        
        required bool                   private_chat            = 6 [default=true]; //开启私聊频道
        required bool                   nation_chat             = 7 [default=true]; //国家频道
        required bool                   family_chat             = 8 [default=true]; //门派频道
        required bool                   world_chat              = 9 [default=true]; //世界频道
        required bool                   team_chat               = 10 [default=true]; //组队频道
        required bool                   center_broadcast        = 11 [default=true]; //中央广播

        required bool                   skill_effect            = 12 [default=true]; //技能效果
        required bool                   show_cloth              = 13 [default=true]; //显示衣服
        required bool                   by_find                 = 14 [default=true]; //被视察时显示

        required bool                   show_title              = 15 [default=true]; //显示称号
        required bool                   show_family             = 16 [default=true]; //玩家门派
        required bool                   show_name               = 17 [default=true]; //玩家姓名
        required bool                   show_faction            = 18 [default=true]; //玩家官职
        
        required bool                   auto_fight              = 19 [default=false]; //自动打怪
        required bool                   auto_use_hp             = 20 [default=true]; //自动补红
        required int32                  hp_below                = 21 [default=50]; //血量低于多少时使用
        required bool                   auto_use_mp             = 22 [default=true]; //自动补蓝
        required int32                  mp_below                = 23 [default=50]; //法力低于多少时使用
        required bool                   auto_buy                = 24 [default=false]; //自动购买药品
        required bool                   auto_return_home        = 25 [default=false]; //自动回城
        
        required bool                   auto_pick_equip         = 26 [default=true]; //自动拾取装备
        required bool                   auto_pick_stone         = 27 [default=true]; //自动拾取宝石
        required bool                   auto_pick_drug          = 28 [default=true]; //自动拾取药品
        required bool                   auto_pick_other         = 29 [default=true]; //自动拾取其它

        repeated bool                   pick_equip_color        = 30; //拾取装备颜色
        repeated bool                   pick_other_color        = 31; //拾取其它颜色

        required bool                   auto_use_skill          = 32 [default=true]; //自动使用技能
        repeated int32                  skill_list              = 33; //技能列表
        required bool                   auto_search             = 34 [default=true]; //自动寻怪

        required bool                   auto_team               = 35 [default=true]; //自动处理组队
        required bool                   auto_accept             = 36 [default=true]; //是否接受组队邀请
        required int32                  hook_time               = 37 [default=60]; //挂机时间
        required int32                  time_level              = 38 [default=60]; //剩余时间

        required bool                   show_dropgoods_name     = 39 [default=true]; //显示掉落物名称
        required bool                   show_equip_compare      = 40 [default=true];

        required int32                  by_hp_typeid            = 41 [default=10200003]; //自动买血类型
        required int32                  by_mp_typeid            = 42 [default=10200007]; //自动买蓝类型
        required bool                   other_faction           = 43 [default=false]; //将外国人纳入挂机目标
        required bool                   accept_friend_request   = 44 [default=true]; //接收好友请求

        required bool                   pet_auto_use_hp         = 45 [default=true]; // 宠物是否自动吃宠物药
        required int32                  pet_hp_below            = 46 [default=50]; // 宠物血量低于多少时吃宠物药
        required int32                  pet_by_hp_typeid        = 47 [default=12300101]; // 自动购买宠物药类型
        required bool                   pet_auto_use_skill      = 48 [default=true]; // 宠物是否自动释放技能
        required int32                  use_hp_item_type        = 49 [default = 1];//自动使用补血药规则 1 升序 2降序
        required int32                  use_mp_item_type        = 50 [default = 1];//自动使用补蓝药规则 1 升序 2降序
        required int32                  use_pet_item_type       = 51 [default = 1];//宠物使用药规则 1升序 2降序
}

//=====================================玩家与GM交互=============================================
//GM投诉
message m_gm_complaint_tos{
    required int32          type        = 1; //投诉类型
    required string         title       = 2; //标题
    required string         content     = 3; //投诉内容                  
}

message m_gm_complaint_toc{
    required bool           succ        = 1; //投诉是否成功
    optional string         reason      = 2; //失败原因
}

//对GM评分
message m_gm_score_tos{
    required int32       id        = 1; //评分的GM信件的id
    required int32       fraction  = 2; //分数     
}

message m_gm_score_toc{
    required bool           				succ        = 1; //投诉是否成功
    optional string         				reason      = 2; //失败原因   
}


//=============================排行榜========================
message m_ranking_get_rank_tos{
    required int32                                  rank_id                                 = 1;    
}
message m_ranking_get_rank_toc{
    required int32                                  rank_id                             = 1;   
    repeated p_rank_row                             rows                                = 2;  //排行榜每一行的数据 
}

message m_ranking_config_toc{
    repeated p_ranking           				rankings        						= 1;  //排行榜每个榜的相关信息
}

message m_ranking_get_rankinfo_tos{
    required int32           						rank_id        							= 1;    
}

message m_ranking_role_level_rank_toc{
		repeated p_role_level_rank     			role_level_ranks  					= 1;
}

message m_ranking_equip_join_rank_tos{
    required int32           						rank_id        							= 1; 
  	required int32											goods_id										= 2;   
}

message m_ranking_equip_join_rank_toc{
		required bool												succ												= 1[default = false];
    required int32           						rank_id        							= 2; 
  	optional string											reason											= 3; 
}

message m_ranking_role_pkpoint_rank_toc{
		repeated p_role_pkpoint_rank     		role_pkpoint_ranks  				= 1;
}

message m_ranking_role_world_pkpoint_rank_toc{
		repeated p_role_pkpoint_rank  role_world_pkpoint_ranks  	= 1;
}

message m_ranking_family_active_rank_toc{
		repeated p_family_active_rank     	family_active_ranks  				= 1;
}

message m_ranking_family_gongxun_rank_toc{
		repeated p_family_gongxun_rank     	family_gongxun_ranks  				= 1;
}

message m_ranking_equip_refining_rank_toc{
		repeated p_equip_rank     					equip_refining_ranks  			= 1;
}

message m_ranking_equip_reinforce_rank_toc{
		repeated p_equip_rank  							equip_reinforce_ranks  			= 1;
}

message m_ranking_equip_stone_rank_toc{
		repeated p_equip_rank     					equip_stone_ranks  					= 1;
}

message m_ranking_role_gongxun_rank_toc{
		repeated p_role_gongxun_rank     		role_gongxun_ranks  				= 1;
}

message m_ranking_role_today_gongxun_rank_toc{
		repeated p_role_gongxun_rank     		role_gongxun_ranks  				= 1;
}

message m_ranking_role_yesterday_gongxun_rank_toc{
		repeated p_role_gongxun_rank     		role_gongxun_ranks  				= 1;
}

message m_ranking_role_give_flowers_rank_toc{
        repeated p_role_give_flowers_rank           role_give_flowers                   = 1;
}

message m_ranking_role_give_flowers_today_rank_toc{
        repeated p_role_give_flowers_today_rank     role_give_flowers                   = 1;
}

message m_ranking_role_give_flowers_yesterday_rank_toc{
        repeated p_role_give_flowers_yesterday_rank role_give_flowers                   = 1;
}

message m_ranking_role_give_flowers_last_week_rank_toc{
	repeated p_role_give_flowers_last_week_rank  role_give_flowers                    = 1;
}

message m_ranking_role_give_flowers_this_week_rank_toc{
	repeated p_role_give_flowers_this_week_rank  role_give_flowers                    = 1;
}

message m_ranking_role_rece_flowers_rank_toc{
        repeated p_role_rece_flowers_rank           role_rece_flowers                   = 1;
}

message m_ranking_role_rece_flowers_today_rank_toc{
        repeated p_role_rece_flowers_today_rank     role_rece_flowers                   = 1;
}

message m_ranking_role_rece_flowers_yesterday_rank_toc{
        repeated p_role_rece_flowers_yesterday_rank role_rece_flowers                   = 1;
}

message m_ranking_role_rece_flowers_last_week_rank_toc{
	repeated p_role_rece_flowers_last_week_rank         role_rece_flowers                   = 1;
}

message m_ranking_role_rece_flowers_this_week_rank_toc{
	repeated p_role_rece_flowers_this_week_rank         role_rece_flowers                   = 1;
}

message m_ranking_role_pet_rank_toc{
	repeated p_role_pet_rank                            pets                   = 1;
}

message m_ranking_pet_join_rank_tos{
    required int32           						    rank_id        							= 1; 
  	required int32										pet_id									= 2;   
}

message m_ranking_pet_join_rank_toc{
	required bool									succ						= 1[default = false];
    required int32           						rank_id        				= 2; 
  	optional string									reason						= 3; 
}

// 大明英雄榜
message m_ranking_hero_fb_rank_toc {
       required bool                            succ                    = 1 [default=true];
       optional string                          reason                  = 2;
       repeated p_hero_fb_rank                  hero_fb_ranks           = 3;
}

message m_ranking_role_all_rank_tos{
		required int32											role_id											= 1;
}

message m_ranking_role_all_rank_toc{
		repeated p_role_all_rank     			role_all_ranks  							= 1;
		required int32										role_id												= 2;	
		required bool											is_self												= 3;
		optional string										role_name											= 4;
		optional string										family_name										= 5;
		optional int32										level													= 6;
}

======================================抢国王======================================
//占领王座
message m_warofking_hold_tos {
}

message m_warofking_hold_toc {
	required bool           succ        = 1[default=true];
    optional string         reason      = 2;
	required bool			return_self = 3[default=true];
	//return_self 为false时表示由谁占领了王座
	optional int32			role_id		= 4;
	optional string			family_name = 5;
}

//报名参加抢国王
message m_warofking_apply_tos {
}

message m_warofking_apply_toc {
	required bool           succ        = 1[default=true];
    optional string         reason      = 2;
}

//抢国王征集令，前端收到时弹出提示框
message m_warofking_collect_toc {
}

//同意前往抢国王副本
message m_warofking_agree_enter_tos {
}

//如果返回值为true，会立刻收到另外一条消息 m_map_change_map_toc
message m_warofking_agree_enter_toc {
	required bool           succ        = 1[default=true];
    optional string         reason      = 2;
}

//通过NPC方式进入王座争霸战地图
message m_warofking_enter_tos {
}

message m_warofking_enter_toc {
	required bool           succ        = 1[default=true];
    optional string         reason      = 2;
}

message p_warofking_mark {
	required int32			family_id	= 1;
	required string			family_name = 2;
	//门派积分
	required int32			mark		= 3;
	//筛选抢国王条件时得出的排名
	required int32			rankno		= 4;
}

//获取当前抢国王的积分情况
message m_warofking_getmarks_tos {
}

message m_warofking_getmarks_toc {
	repeated p_warofking_mark		result = 1;
}

//某人占领王座时被打断了，可能是被砍死/下线/击晕/攻击别人等等
message m_warofking_break_toc {
	required int32					role_id = 1;
}

//广播通知谁占领了王座
message m_warofking_holding_toc {
	required int32					role_id		= 1;
	required int32					time 		= 2;
	//总共需要占领多久
	required int32					total_time 	= 3;
}

//通知抢国王结束了
message m_warofking_end_toc {
	required int32					family_id 	= 1;
	required int32					role_id		= 2;
}

//请求获取安全期的剩余时间
message m_warofking_safetime_tos {
}

message m_warofking_safetime_toc {
	required bool           		succ        = 1[default=true];
    optional string         		reason      = 2;
	optional int32					remain_time = 3; //安全期还剩下多少秒
}


//称号系统
message m_title_get_role_titles_toc{
    repeated p_title                titles      = 1;
}

message m_title_change_cur_title_tos{
    required int32                  id          = 1;
}

message m_title_change_cur_title_toc{
    required bool           		succ        = 1[default=true];
    optional string         		reason      = 2;
    optional string                 color       = 3;
    optional int32                  id          = 4;
}

///////////////////////////////////////////////////// 
message p_faction {
	required int32					faction_id 				        = 1;
	required p_office				office_info				        = 2;
	//国战胜利的次数
	required int32					succ_times_waroffaction	        = 3[default=0];
	//国家银库
	required int32					silver					        = 4;
	//国战连续胜利的次数
	required int32					persist_succ_times_waroffaction	= 5[default=0];
	//国战失败的次数
	required int32					fail_times_waroffaction	        = 6[default=0];
	//国战连续失败的次数
	required int32					persist_fail_times_waroffaction	= 7[default=0];
	//当前可召唤的最高守卫等级
	required int32					guarder_level	                = 8[default=1];
        //最后一次国战宣战时间
        optional int32                  last_attack_day                 = 9;
        //最后一次国战被宣战时间
        optional int32                  last_defence_day                = 10;
        //国战分数，最高10分
        required int32					war_point	                    = 11[default=0];
        //国家公告
	optional string					notice_content					= 12;
	//最后一次发起全国募捐的日期，全国募捐一天最多一次
        optional int32                  last_launch_collection_day      = 13;
        // 国王令使用次数
        optional p_king_token_used_log                   king_token_used_log                              = 14;
}

message p_king_token_used_log {
        required int32                  king_last_used_time             = 1 [default=0]; // 国王上次使用时间
        required int32                  king_used_counter               = 2 [default=0]; // 上次使用次数
        required int32                  general_last_used_time          = 3 [default=0]; // 大将军上次使用时间
        required int32                  general_used_counter            = 4 [default=0];
}

message p_office {
	required int32					faction_id 				= 1;
	
	//国王
	required int32					king_role_id			= 2;
	required string					king_role_name			= 3;
    optional int32          		king_head               = 4[default=0];
	
	repeated p_office_position		offices					= 5;
}

message p_office_equip {
	required int32					office_id 			= 1;
	required string					office_name 		= 2;
	required int32					type 				= 3[default=3]; //物品类型[装备]
	required int32					type_id 			= 4;//装备ID
	required int32					equip_num			= 5;//装备数量
}

// 官职信息
message p_office_position {
	required int32					office_id				= 1;
	//官职名称
	required string					office_name				= 2;
	//当前是谁任职，为0表示没有
	optional int32					role_id					= 3[default=0];
	optional string					role_name				= 4[default=""];
    optional int32          		head                    = 5[default=0];
	//当前任命了谁（对方还没有同意，可以撤销），为0表示没有
	optional int32					invite_role_id			= 6[default=0];
	optional string					invite_role_name		= 7[default=""];
}


//任命官员
message m_office_appoint_tos {
	required string					role_name	= 1;
	required int32					office_id	= 2;
}

message m_office_appoint_toc {
	required bool					succ		= 1[default=true];
	optional string					reason  	= 2;
	required bool					return_self = 3[default=true];
	// 国王角色名
	optional string					role_name	= 5;
	optional string					office_name = 6;
	optional int32					office_id	= 7;
}

//解除官员任命
message m_office_disappoint_tos {
	required int32					office_id	= 1;
}

message m_office_disappoint_toc {
	required bool					succ		= 1[default=true];
	optional string					reason  	= 2;
	required bool					return_self = 3[default=true];
	optional int32					office_id	= 4;
	optional string					office_name	= 5;
}

//同意国王的任命
message m_office_agree_appoint_tos {
}

message m_office_agree_appoint_toc {
	required bool					succ		= 1[default=true];
	optional string					reason  	= 2;
	required bool					return_self = 3[default=true];
	optional string					role_name	= 4;
	optional string					office_name	= 5;
}

//拒绝国王的任命
message m_office_refuse_appoint_tos {
}

message m_office_refuse_appoint_toc {
	required bool					succ		= 1[default=true];
	optional string					reason 		= 2;
	required bool					return_self = 3[default=true];
	optional string					role_name	= 4;
	optional string					office_name	= 5;
}

//撤销任命
message m_office_cancel_appoint_tos {
	required int32					office_id	= 1;
}

message m_office_cancel_appoint_toc {
	required bool					succ		= 1[default=true];
	optional string					reason  	= 2;
	optional int32					office_id	= 3;
}

//发送募捐
message m_office_launch_collection_tos {
}

message m_office_launch_collection_toc {
	required bool					succ	    = 1[default=true];
	optional string					reason      = 2;
    optional string                 role_name   = 3; //发起募捐的玩家的昵称
    optional string                 office_name = 4; //发起募捐的玩家的官职
}

//捐款
message m_office_donate_tos {
	required int32					money       = 1;
    required int32                  donate_type = 2;   //一种是在NPC那里直接捐，另外一种是国王发布募捐时捐款
}

message m_office_donate_toc {
	required bool					succ	= 1[default=true];
	optional string					reason  = 2;
}

//打开官职管理面板
message m_office_panel_tos {
}

message m_office_panel_toc {
	required p_faction				faction_info = 1;
}

//设置公告
message m_office_set_notice_tos {
	required string					notice_content					= 1;
}

message m_office_set_notice_toc {
	required bool					succ				= 1[default=true];
	optional string					reason 				= 2;
}

//打开领取官职装备面板
message m_office_equip_panel_tos {
}

message m_office_equip_panel_toc {
	repeated p_office_equip				office_equip				        = 2;//官职装备
}

//领取官职装备
message m_office_take_equip_tos {
	required int32					take_office_id				= 1;
	required int32					take_num					= 2;
}

message m_office_take_equip_toc {
	required bool					succ				= 1[default=true];
	optional string					reason 				= 2;
}

// =========================国战系统===========================================

//(使用国王令)国王召集本国国民
message m_waroffaction_gather_factionist_toc {
    required string                     message                 = 1;//召集的广播消息
    required int32                      mapid                   = 2;
    required int32                      tx                      = 3;
    required int32                      ty                      = 4;
}

//国民确定响应召集
message m_waroffaction_gather_confirm_tos {
        required int32                    mapid                 = 1;
        required int32                    tx                    = 2;
        required int32                    ty                    = 3; 
}

//国民传送结果
message m_waroffaction_gather_confirm_toc {
    required bool             succ          = 1 [default=true];
    optional string           reason        = 2;
}

//发动国战
message m_waroffaction_declare_tos {
	required int32					defence_faction_id	= 1;
}

message m_waroffaction_declare_toc {
	required bool					succ		        = 1[default=true];
	optional string					reason  	        = 2;
	required bool					return_self         = 3[default=true];
	//宣战国国家ID
	optional int32					attack_faction_id	    = 4;
	//被宣战国国家ID
	optional int32					defence_faction_id	    = 5;
	//宣战国的国王昵称
	optional string					role_name	        = 6;
    optional int32                  silver              = 7; //国库剩余银两
}

//广播通知某国的瞭望塔被摧毁了
message m_waroffaction_tower_destroyed_toc {
	//哪个国家摧毁的
	required int32					attack_faction_id		= 1;
	//哪个国家的被摧毁
	required int32					defence_faction_id		= 2;
	//是谁摧毁的
	required string					attack_role_name		= 3;
}

//广播通知某国的禁卫军将领被杀死了
message m_waroffaction_general_killed_toc {
	//哪个国家的玩家杀害的
	required int32					attack_faction_id		= 1;
	//哪个国家的禁卫军将领被杀害了
	required int32					defence_faction_id		= 2;
	//谁杀害了禁卫军将领
	required string					attack_role_name		= 3;
}

//广播通知某国的国旗被摧毁了
message m_waroffaction_flag_destroyed_toc {
	//哪个国家的玩家摧毁的
	required int32					attack_faction_id		= 1;
	//哪个国家的国旗被摧毁了
	required int32					defence_faction_id		= 2;
	//谁摧毁了国旗
	required string					attack_role_name		= 3;
}


//收到国战征集令请求
message m_waroffaction_collect_toc {
}

//收到征集令之后同意前往战场，同意后会收到m_map_change_map_toc 消息
message m_waroffaction_agree_collect_tos {
}

//获取当前国战的状态
message m_waroffaction_status_tos {
}

message m_waroffaction_status_toc {
	required bool					succ				= 1[default=true];
	optional string					reason				= 2;
	// 1 代表是攻击方 2 代表被攻击方 
	optional int32					type				= 3;
	// 根据自己是攻击方还是防守方来提示 瞭望塔、禁卫军将领以及国旗状态
	// 可能是我方已摧毁对方的瞭望塔或者我方瞭望塔已被摧毁
	optional bool					towner_destroyed	= 4;
	optional bool					general_killed		= 5;
	optional bool					flag_destroyed		= 6;
}


message m_waroffaction_warinfo_tos{
    required int32               faction_id                  = 1;
}


message m_waroffaction_warinfo_toc{
    required int32               faction_id                  = 1;//自己国家的ID
    optional int32               dest_faction_id             = 2;//国战另外一方国家的ID
    optional int32               next_war_tick               = 3;//国战开始时间
    optional bool                is_attack_faction           = 4;//是否攻击方国家
    required bool                declare_war1                = 5;//是否可以宣战
    required bool                declare_war2                = 6;//是否可以宣战
    required int32               silver                      = 7;//国库银两
    required int32               max_guarder_level           = 8;//可购买的最高守卫等级
    optional int32               left_guarder_level          = 9;//已经购买了的国战守卫左的等级
    optional int32               right_guarder_level         = 10;//已经购买了的国战守卫右的等级
    optional int32               road_block                  = 11;//已经购买了的拒马的类型
    
}

message m_waroffaction_record_tos{
    
}

message m_waroffaction_record_toc{
     repeated p_waroffaction_record            records      = 1; 
}

message m_waroffaction_buy_guarder_tos{
    optional int32              guarder_type                = 2;//守卫类型
}

message m_waroffaction_buy_guarder_toc{
     required bool            succ                          = 1; //是否成功
     required int32           guarder_type                  = 2;
     optional string          reason                        = 3; //失败原因
}

message m_waroffaction_convene_tos{
    optional int32           convene_type                   = 1; //召唤类型
}

message m_waroffaction_convene_toc{
    required bool           is_self                         = 1;//是否返回给召集者
    optional bool           succ                            = 2;//召集成功与否
    optional string         reason                          = 3;//召集失败原因
    optional int32          convene_id                      = 4;//召集国家ID或者门派ID
    optional string         convene_role_name               = 5;//召集者名字（用于显示）
    optional string         convene_title                   = 6;//召集者的称号(如国王，将军，掌门之类)
    optional int32          faction_id                      = 7;//被召唤去的国家的ID
    optional int32          convene_type                    = 8;//召唤类型，国家召唤或者门派召唤
}

message m_waroffaction_transfer_tos{
    required int32          convene_id                 = 1;// 召集者ID
    optional int32          faction_id                      = 2;//被召唤去的国家的ID
    optional int32          type                            = 3;//召唤类型，国家召唤或者门派召唤
}

message m_waroffaction_transfer_toc{
     required bool            succ                          = 1; //是否成功
     optional int32           map_id                        = 2; //要被召集去的地图ID
     optional string          reason                        = 3; //失败原因
}

message m_waroffaction_count_down_toc{
        optional int32               attack_faction_id          = 1;//攻击方ID
        optional int32               defence_faction_id         = 2;//防守方ID
        required int32               type                       = 3;//1、准备阶段倒计时，2、国战倒计时
        optional int32               tick                       = 4;//剩余时间
        optional string          current_target                = 4;//当前国战目标
}

message m_waroffaction_rank_tos{
 
}

message m_waroffaction_rank_toc{
     required bool                  succ                          = 1; //是否成功
     optional string                reason                        = 2; //失败原因
     optional int32                 self_score                    = 3; //
     repeated p_waroffaction_rank   attack_faction_ranks          = 4; //
     optional int32                 attack_faction_id             = 5; //
     repeated p_waroffaction_rank   defence_faction_ranks         = 6; //
     optional int32                 defence_faction_id            = 7; //
}



//=============================训练营========================

//兑换训练点
message m_trainingcamp_exchange_tos {
        required int32                  training_point                  = 1; //需要兑换多少训练点
}

message m_trainingcamp_exchange_toc {
        required bool                   succ                            = 1 [default=true];
        optional int32                  gold                            = 2;
        optional int32                  gold_bind                       = 3;
        optional string                 reason                          = 4;
}

//开始训练
message m_trainingcamp_start_tos {
        required int32                  time                            = 1;
}

message m_trainingcamp_start_toc {
        required bool                   succ                            = 1 [default=true];
        optional string                 reason                          = 2;
        optional int32                  last_time                       = 3; //持续时间，如果训练会中途停止的话，这个用于前端提示，单位分钟
}

//停止训练
message m_trainingcamp_stop_tos {
}

message m_trainingcamp_stop_toc {
        required bool                   succ                            = 1 [default=true];
        optional int32                  training_point                  = 2;
        optional int32                  exp_get                         = 3;
        optional string                 reason                          = 4;
}

message m_trainingcamp_state_tos {
}

message m_trainingcamp_state_toc {
        required bool                   succ                            = 1 [default=true];
        optional int32                  time_total                      = 2;
        optional int32                  time_expire                     = 3;
        optional int32                  level_up                        = 4;
        optional int32                  training_point                  = 5;
        optional int32                  exp_get                         = 6;
        optional string                 reason                          = 7;
}

message m_trainingcamp_remain_point_tos {
}

message m_trainingcamp_remain_point_toc {
        required bool                   succ                            = 1 [default=true];
        optional int32                  training_point                  = 2;
        optional string                 reason                          = 3;
}

// 门派地图争夺战

//申请争夺某张地图
message m_warofcity_apply_tos {
}

message m_warofcity_apply_toc {
	required bool					succ		= 1[default=true];
	optional string					reason  	= 2;
}

//门派地图争夺战征集令
message m_warofcity_collect_toc {
	//用于显示去哪张地图
	required int32					map_id		= 1;
}

//这些同意参加的玩家都会记录下来，作为奖励门派贡献度的依据
message m_warofcity_agree_enter_tos {
}

message m_warofcity_agree_enter_toc {
	required bool					succ		= 1[default=true];
	optional string					reason  	= 2;
}


message p_warofcity_family_mark {
	required int32					family_id	= 1;
	required string					family_name = 2;
	required int32					marks		= 3;
}

message p_warofcity_role_mark {
	required int32					role_id		= 1;
	required string					role_name	= 2;
	required int32					family_id	= 3;
	required string					family_name	= 4;
	required int32					marks		= 5;
}

// 获取积分
message m_warofcity_get_mark_tos {
}

message m_warofcity_get_mark_toc {
	required bool					succ		= 1[default=true];
	optional string					reason  	= 2;
	repeated p_warofcity_family_mark		families		= 1;
	repeated p_warofcity_role_mark			roles			= 2;
}

//进入地图争夺战地图后会推这样的信息过来，用于表示当前地图争夺战的信息
message m_warofcity_info_toc {
	//表示是否可以战斗
	required bool					is_begin				= 1[default=true];
	// 如果is_begin为false，这里表示还有多久就开始战斗了
	required int32					remain_begin_time		= 2;
	//战斗还剩余多少时间，单位为秒
	required int32					remain_time				= 3;
	//对应的地图ID
	required int32					map_id					= 4;
}

//占领图腾
message m_warofcity_hold_tos {
}

message m_warofcity_hold_toc {
	required bool					succ		= 1[default=true];
	optional string					reason  	= 2;
	required bool					return_self = 3[default=true];
	optional int32					role_id		= 5;
	optional string					family_name	= 6;
}

message m_warofcity_holding_toc {
	required int32					role_id		= 1;
	required int32					time 		= 2;
	//总共需要占领多久
	required int32					total_time 	= 3;
}

message p_warofcity_apply_family {
	required int32					family_id	= 1;
	required string					family_name	= 2;
}

message p_warofcity {	
	required int32						map_id				= 1;
	required int32						family_id			= 2;
	required string						family_name			= 3;
	// 被持续占领的天数
	required int32						last_day			= 4;
	repeated p_warofcity_reward			rewards				= 5;
	//当前申请参战的门派
	repeated p_warofcity_apply_family	apply_family_list	= 6;
	//当前申请参加的门派所交的总费用
	required int32						sum_apply_cost	 	= 7;
	//记录哪些类型的奖励已经被领取了
	repeated int32						gained_rewards		= 8;
}

// 奖励
message p_warofcity_reward {
	required int32					type				= 1;
	required bool					gain				= 2;
}

//打开“地图管理员”NPC的面板
message m_warofcity_panel_tos {
}

message m_warofcity_panel_toc {
	repeated p_warofcity			cities				= 1;
}


message m_warofcity_get_reward_tos {
	//奖励类型  7天 1  14天 2   21天 3
	required int32					type		= 1;
}

message m_warofcity_get_reward_toc {
	required bool					succ		= 1[default=true];
	optional string					reason  	= 2;
	optional int32					type		= 3;
}

message p_warofcity_family_winner {
	required int32					family_id			= 1;
	required string					family_name			= 2;
}

message p_warofcity_role_winner {
	required int32					role_id				= 1;
	required string					role_name			= 2;
}

//战斗结束了，公布结果，战斗结束后一段时间内如果没有跳出地图，则会收到m_map_change_map_toc消息，然后被强制传送出去
message m_warofcity_end_toc {
	//公布前三名门派
	required p_warofcity_family_winner					first				= 1;
	required p_warofcity_family_winner					second				= 2;
	optional p_warofcity_family_winner					third				= 3;
	//公布前三名玩家
	required p_warofcity_role_winner					first_role			= 4;
	required p_warofcity_role_winner					second_role			= 5;
	optional p_warofcity_role_winner					third_role			= 6;
}

//某个图腾的占领被打断了
message m_warofcity_break_toc {
}

message m_warofcity_hold_succ_toc {
	required int32								family_id 		= 1;
	required string								family_name		= 3;
	required string								role_name		= 4;
}

//门派成员uplevel之后推给前端的信息
message m_family_memberuplevel_toc{
	required int32								role_id		       = 1;
	required int32								new_level	       = 2;
}

//成就系统接口定义
//查询玩家成就信息
message m_achievement_query_tos{
        //1 根据成就id列表查询成就信息 2 根据成就组id查询
        //3 查询成就总览 4 查询最近完成就 5 全服成就查询
        required int32 op_type = 1 [default=0];//查询类型
        optional int32 group_id = 2[default=0];//成就组id
        repeated int32 achieve_ids = 3[default = 0];//成就id列表
}
message m_achievement_query_toc{
        required bool succ = 1[default=true];//操作标志
        optional string reason = 2;//操作描述
        required int32 op_type = 3 [default=0];//查询类型
        optional int32 group_id = 4[default=0];//成就组id
        repeated int32 achieve_ids = 5 [default = 0];//成就id列表
        repeated p_achievement_info achievements = 6;//成就列表
        optional int32 total_points = 7 [default = 0];//玩家成就总值
        repeated p_achievement_info lately_achievements = 8;//最近完成成就列表
        repeated p_achievement_stat_info stat_info = 9;//成就总览列表
        optional p_achievement_info group_achievement = 10;//组成就信息
        repeated p_achievement_info rank_achievements = 11;//成就榜已经完成的成就列表
}
//自动通知成就系统更新消息
message m_achievement_notice_tos{
        repeated int32 event_ids = 1; // 完成的事件id 
        optional int32 add_progress = 2 [default = 1];//增加事件的进度
}
message m_achievement_notice_toc{
        required int32 type = 1 [default=0];
        repeated p_achievement_info achievements = 2;//成就信息
        optional int32 total_points = 3 [default = 0];//玩家成就总值
}
//完成成就领取奖励接口
message m_achievement_award_tos{
        required int32 achieve_id = 1 [default = 0];//成就id
}
//获取奖励成功，前端自己更新相应的信息
message m_achievement_award_toc{
        required bool succ = 1[default=true];//操作标志
	optional string reason = 2;//操作描述
        required int32 achieve_id = 3 [default = 0];//成就id
        optional int32 group_id = 4 [default = 0];//成就组id
        optional int32 class_id = 5 [default = 0];//成就分类
}

//----------------------------采集------------------------------
message m_collect_get_grafts_info_tos{
        required int32 id = 1; //采集物的id 
}
 
message m_collect_get_grafts_info_toc{
        required bool            succ   = 1; //获取是否成功
        optional p_map_collect   info   = 2; //采集物信息
        optional string          reason = 3; //失败原因
}

message m_collect_stop_tos{
        required int32 id = 1; //采集物id
}

message m_collect_remove_grafts_toc{
        repeated p_map_collect grafts  = 1;
}

message m_collect_updata_grafts_toc{
        repeated p_map_collect grafts  = 1;
}

message m_collect_grafts_toc{
        required bool            succ       = 1; //是否成功
        repeated p_goods         goods_list = 2; //采集生成的物品
        optional string          reason     = 3; //采集失败的原因
}


message p_personybc_info{
	required int32 			color 	= 1;//颜色
	required int32 			start_time = 2;//拉镖开始时间
	required int32 			time_limit = 3;//拉镖总时间限制
	required int32			status  = 4;//状态
	required int32			do_times = 5;//做了多少次
	required int32			public_npc_id = 6;
	required int32			commit_npc_id = 7;
	required string     	desc    = 8;//描述
	repeated p_personybc_award_attr attr_award = 10;//属性奖励列表
	repeated p_personybc_award_prop prop_award = 11;//道具奖励列表
	required int32			type = 12[default=0];//类型0个人 1国运
    required int32          faction_new_start_time = 13;
	required int32			faction_start_time = 14[default=0];//国运镖开始时间
	required int32			faction_time_limit = 15[default=0];//国运镖持续时间限制
    required int32          cost_type=16[default=1];
    required int32          cost_silver=17[default=0];
    required int32          cost_silver_bind=18[default=0];
	// 自动拉镖的时候是否需要提示
	// 前提:是否国运期，平时自动拉镖是免费的，国运期间非VIP则是收费的
	required bool			need_notice_when_auto = 19[default=false];
	// 自动拉镖的价格（元宝）
	required int32			auto_pay_gold = 21;
	required bool			auto = 20[default=true];
}

message p_personybc_award_prop{
	required int32 color = 1;//颜色
	required int32 prop_type = 2;//类型 
	required int32 prop_num = 3;//数量
}

message p_personybc_award_attr{
	required int32 color = 1;//颜色
	required int32 attr_type = 2;//类型 
	required int32 attr_num = 3;//数量
}

message m_personybc_public_tos{
	required int32	type = 1[default=0];//0普通镖车 1国运拉镖
}
message m_personybc_public_toc{
	required bool		succ	= 1;//是否成功
	optional string     reason  = 2;//理由
	optional p_personybc_info	info = 3;//信息
}

// 自动拉镖
message m_personybc_auto_tos {
	required bool			type	= 1[default=true]; //true为开始，false为结束
}

message m_personybc_auto_toc {
	required bool				succ	= 1[default=true];
	optional string				reason	= 2;
}

// 改变默认自动拉镖
message m_personybc_set_auto_tos {
	required bool			flag	= 1[default=true];
}

message m_personybc_set_auto_toc {
	required bool				succ	= 1[default=true];
	optional string				reason	= 2;
	optional bool				flag 	= 3;
}

message m_personybc_cancel_tos{
}
message m_personybc_cancel_toc{
	required bool		succ	= 1;//是否成功
	optional string     reason  = 2;//理由
}

message m_personybc_commit_tos{
}
message m_personybc_commit_toc{
	required bool		succ	= 1;//是否成功
	optional string     reason  = 2;//理由
	optional int32		status = 3;//1成功 2被劫 3超时
	repeated p_personybc_award_attr     attr_award_list = 4;//属性奖励列表
	repeated p_personybc_award_prop 	prop_award_list = 5;//属性奖励列表
}

message m_personybc_info_tos{
	required int32	type = 1[default=0];//0普通镖车 1国运拉镖
}
message m_personybc_info_toc{
	required bool		succ	= 1;//是否成功
	optional string     reason  = 2;//理由
	optional p_personybc_info	info = 4;//信息
}

message m_personybc_color_change_toc{
	required int32		color = 1;//获得的颜色
}

message m_personybc_timer_toc{
	required int32 remain_time = 1[default = 0];//剩余时间
}

message m_personybc_faction_notice_toc{
    required int32      type = 1;//通知类型
    required int32      last_time = 2;//国运持续时间
}

message m_personybc_faction_tos{
    required int32      type = 1[default = 0];//0不立即开启只修改时间 1立即开启不修改时间 2修改时间且立即开启
    required int32      start_h = 2;//开始时间-时
    required int32      start_m = 3;//开始时间-分
}
message m_personybc_faction_toc{
	required bool		succ	= 1;//是否成功
	optional string     reason  = 2;//理由
    optional int32      public_role_id = 3;//发布者角色ID
    optional string     public_role_name = 4;//发布者角色ID
    optional int32      public_office = 5;//发布者角色官职
    optional int32      new_start_h = 6;//开始时
    optional int32      new_start_m = 7;//开始分
    optional int32      new_start_time = 8;//新的开始时间
	optional int32		today_start_time = 9;//开始时间
	optional int32		time_limit = 10;//持续时间
	optional int32      npc_id = 11;
	optional int32      map_id = 12;
}

//帮众个人镖车被攻击求救
message m_personybc_sos_toc{
	required	p_pos				pos						= 1;//镖车当前位置
	required 	int32				map_id					= 2;//地图ID
	required 	string				role_name				= 3;
}

//一键刷新镖车颜色
message m_personybc_auto_refresh_color_tos{
    required    int32               color                   = 1[default=5];//刷新到什么颜色 默认橙色
    required    bool                is_auto_buy             = 2[default=true]; // 是否自动买换车令 true:自动购买
}

message m_personybc_auto_refresh_color_toc{
    required    int32               err_code                = 1[default=0];
    optional    string              reason                  = 2;     
    optional    int32               item_num                = 3[default=0];//使用多少换车令
    optional    int32               color                   = 4[default=1];//达到什么颜色
}

//===============ybc end======================

// 逐鹿天下副本接口定义
// 玩家进入逐鹿天下副本接口
message m_vie_world_fb_enter_tos{
        required int32 npc_id = 1;// NPC Id
        required int32 type_id = 2;//NPC 类型id
}
message m_vie_world_fb_enter_toc{
        required bool succ = 1[default=true];//操作标志
	optional string reason = 2;//操作描述
        repeated int32 monster_type_ids = 3;//怪物的类型id列表
}
// 玩家退出逐鹿天下副本接口
message m_vie_world_fb_quit_tos{
}
message m_vie_world_fb_quit_toc{
        required bool succ = 1[default=true];//操作标志
	optional string reason = 2;//操作描述
}

//Server NPC 在地图显示通知消息
message m_server_npc_enter_toc{
        repeated p_map_server_npc server_npcs = 1;//玩家周围ServerNPC信息
}
//Server NPC 退出地图通知消息
message m_server_npc_quit_toc{
        repeated int32 npc_ids = 1;// 不显示的NPC
}

//Server NPC 死亡通知消息
message m_server_npc_dead_toc{
        required int32 npc_id = 1;// 死亡的NPC
}

message m_server_npc_attr_change_toc {
    required int32                          npc_id               = 1;
    required int32                          change_type             = 3;
    required int32                          value                   = 4;
}

message m_server_npc_walk_toc {
    required p_map_server_npc               server_npc_info         = 1;
    required p_pos                          pos                     = 2;
}

//============================= 一键换装备 ==================
// 获取自定义套装列表
message m_equiponekey_list_tos {
}

message m_equiponekey_list_toc {
        required bool                           succ                            = 1 [default=true];
        repeated p_equip_onekey_info            equips_list                     = 2;
        optional string                         reason                          = 3;
}

// 查看某套装信息
message m_equiponekey_info_tos {
        required int32                  equips_id                       = 1;
}

message m_equiponekey_info_toc {
        required bool                   succ                    = 1 [default=true];
        optional p_equip_onekey_info    equips_list             = 2;
        optional string                 reason                  = 3;
}

// 保存套装信息
message m_equiponekey_save_tos {
        required p_equip_onekey_info    equips_list             = 1;
}

message m_equiponekey_save_toc {
        required bool                   succ                    = 1 [default=true];
        optional int32                  equips_id               = 2;
        optional string                 equips_name             = 3;
        optional string                 reason                  = 4;
}

// 一键换装
message m_equiponekey_load_tos {
        required int32                  equips_id               = 1;
}

message m_equiponekey_load_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
}



//============================= 活动模块  ==================
//---------------------------------
//函数：today        查看今日活动
//---------------------------------
message m_activity_today_tos {
    required int32           type            = 1 [default = 1]; //活动类型
}
message m_activity_today_toc {
    required bool             succ           = 1 [default = true];
    optional string           reason         = 2;
    repeated p_activity_info  activity_list  = 3;
}

//获取礼包页面的详细信息
message m_activity_pay_gift_info_tos {
}

message m_activity_pay_gift_info_toc {
	required bool             	succ           					= 1 [default = true];
        optional string           	reason         					= 2;
	//首充礼包的道具ID	
	optional int32				pay_first_type_id				= 3;
	//首充礼包中包含的道具ID列表
	repeated p_gift_goods		pay_first_goods_list			= 4;
	// 标示是否已经领取首充礼包
	optional bool				has_get_pay_first_gift			= 5;
	// 累计充值礼包奖励的道具详情，这个道具是动态生成的
	optional p_goods			accumulate_pay_goods_info		= 6;
	// 是否已经领取累积充值礼包
	optional bool				has_get_accumulate_pay_gift		= 7;
        // 开心礼包中包含的道具列表
        repeated p_gift_goods           happy_gift_goods_list                   = 8;
        // 是否已经领取开心礼包
        optional bool                   has_get_happy_gift                      = 9;
}


// 领取某种礼包
message m_activity_getgift_tos {
	// 类型 1 为首充礼包，2 为 累积充值礼包
	required	int32			type		= 1;
	// 礼包ID
	optional 	int32			id			= 2[default=0];
}

message m_activity_getgift_toc {
	required bool             succ           = 1 [default = true];
    optional string           reason         = 2;	
}

//---------------------------------
//函数：benefit_list        显示日常福利情况
//---------------------------------
message m_activity_benefit_list_tos {
}
message m_activity_benefit_list_toc {
    required bool             succ           = 1 [default = true];
    optional string           reason         = 2;
    optional bool             is_rewarded    = 3; //玩家今日是否已领奖
    repeated int32            act_task_list  = 4; //已完成的任务列表
    optional int32            base_exp       = 5; //基础经验奖励
    optional int32            extra_exp      = 6; //额外经验奖励
}

//---------------------------------
//函数：benefit_reward       领取日常福利的奖励
//---------------------------------
message m_activity_benefit_reward_tos {
}
message m_activity_benefit_reward_toc {
    required bool             succ           = 1 [default = true];
    optional string           reason         = 2;
}

//---------------------------------
//函数：benefit_buy        用元宝购买某个活动勋章
//---------------------------------
message m_activity_benefit_buy_tos {
    required int32            act_task_id    = 1; //购买的活动任务的ID,0则表示购买全部的活动勋章
}
message m_activity_benefit_buy_toc {
    required bool             succ           = 1 [default = true];
    optional string           reason         = 2;
    optional int32            act_task_id    = 3; //购买的活动任务的ID
}

//============================= 新手模块  ==================
//---------------------------------
//函数：activate_code        新手卡的激活码功能
//---------------------------------
message m_newcomer_activate_code_tos {
    required string           code         = 1; //激活码串
}
message m_newcomer_activate_code_toc {
    required bool             succ           = 1 [default = true];
    optional string           reason         = 2;
}

//商贸活动
//获取商贸商店信息接口
message m_trading_shop_tos{
        required int32 npc_id = 1 [default = 0];//打开商贸商店的npc id
        required int32 map_id = 2 [default = 0];//此商贸商店所在的地图id
}
message m_trading_shop_toc{
        required bool succ = 1 [default = true];//操作成功标志
        optional string reason = 2;//操作失败描述
        repeated p_trading_goods shop_goods = 3;//商品信息
        optional int32 max_buy_time = 4 [default = 0];//最佳购买时间，0表示当前为最佳时机
        optional int32 max_sale_time = 5 [default = 0];//最佳出售时间，0表示当前为最佳时机
        repeated p_trading_goods role_goods = 6;//玩家贷仓物品信息
        optional int32 bill = 7[default = 0];//玩家商票价格
        optional int32 max_bill = 8[default = 0];//玩家商票价格上限
        optional int32 update_time = 9[default = 0];//下次价格更新时间,单位秒
}
//商贸商店购买物品接口
message m_trading_buy_tos{
        required int32 npc_id = 1 [default = 0];//打开商贸商店的npc id
        required int32 map_id = 2 [default = 0];//此商贸商店所在的地图id
        required int32 type_id = 4 [default = 0];//物品类型id
        required int32 number = 5 [default = 0];//物品数量
}
message m_trading_buy_toc{
        required bool succ = 1 [default = true];//操作成功标志
        optional string reason = 2;//操作失败描述
        repeated p_trading_goods shop_goods = 3;//商品信息
        repeated p_trading_goods role_goods = 4;//玩家货舱物品信息
        optional int32 bill = 5[default = 0];//玩家商票价格
}
//玩家出售商贸货舱物品接口
message m_trading_sale_tos{
        required int32 npc_id = 1 [default = 0];//打开商贸商店的npc id
        required int32 map_id = 2 [default = 0];//此商贸商店所在的地图id
}
message m_trading_sale_toc{
        required bool succ = 1 [default = true];//操作成功标志
        optional string reason = 2;//操作失败描述
        repeated p_trading_goods role_goods = 3;//玩家货舱物品信息
        optional int32 bill = 4[default = 0];//玩家商票价格
}
//领取商贸商票接口
message m_trading_get_tos{
        required int32 npc_id = 1 [default = 0];//可领取商贸商票的npc id
        required int32 map_id = 2 [default = 0];//可领取商贸商票的npc所在的地图id
}
message m_trading_get_toc{
        required bool succ = 1 [default = true];//操作成功标志
        optional string reason = 2;//操作失败描述
        repeated p_goods goods = 3;//商贸商票物品信息
        optional int32 bill = 4[default = 0];//玩家商票价格
        optional int32 max_bill = 5[default = 0];//玩家商票价格上限
        optional int32 trading_times = 6 [default = 0];//玩家第几次商贸
        optional int32 award_type = 7 [default = 0];//奖励类型 1 银子，2 绑定银子
}
//交还商贸商票接口
message m_trading_return_tos{
        required int32 npc_id = 1 [default = 0];//可交还商贸商票的npc id
        required int32 map_id = 2 [default = 0];//可交还商贸商票的npc所在的地图id
        required int32 type = 3 [default = 0];//交还商票操作类型，1，一般交还，2，使用商贸宝典
        optional int32 type_id = 4 [default = 0];//商贸宝典物品类型id
}
message m_trading_return_toc{
        required bool succ = 1 [default = true];//操作成功标志
        optional string reason = 2;//操作失败描述
        required int32 type = 3 [default = 0];//交还商票操作类型，1，一般交还，2，使用商贸宝典
        optional int32 silver = 4 [default = 0];//玩家得的银子，单位：文
        optional int32 family_money = 5 [default = 0];//玩家所在门派获得的银子，单位：文
        optional int32 family_contribution = 6 [default = 0];//玩家获得的门派贡献度
        optional int32 trading_times = 7 [default = 0];//玩家第几次商贸
        optional int32 award_type = 8 [default = 0];//奖励类型 1 银子，2 绑定银子
}
//兑换商贸宝典物品接口
message m_trading_exchange_tos{
        required int32 npc_id = 1 [default = 0];//门派长老npc id
        required int32 map_id = 2 [default = 0];//门派长老所在的地图id
        required int32 family_contribution = 3 [default = 0];//门派贡献度
}
message m_trading_exchange_toc{
        required bool succ = 1 [default = true];//操作成功标志
        optional string reason = 2;//操作失败描述
        repeated p_goods goods = 3;//玩家获得的商贸宝典物品信息
        optional int32 family_contribution = 4 [default = 0];//玩家当前的门派贡献度
}
// 获取玩家商贸状态接口
message m_trading_status_tos{
        
}
message m_trading_status_toc{
        required bool succ = 1 [default = true];//操作成功标志
        optional string reason = 2;//操作失败描述
        //操作类型 1 请求返回，前端不需要处理，2 主动通知，前端需要处理
        required int32 type = 3 [default = 0];//操作类型 
        optional int32 trading_status = 4 [default = 0];//玩家是否处理商贸状态 0 不是商贸状态，1 商贸状态
        optional int32 trading_times = 5 [default = 0];//玩家第几次商贸
        optional int32 base_bill = 6 [default = 0];//商贸商票基本价格
        optional int32 bill = 7 [default = 0];//当前商贸商票价格
        optional int32 start_time = 8 [default = 0];//本次领取商贸商票时间
        repeated p_trading_goods role_goods = 9;//玩家货舱物品信息
        optional int32 npc_id = 10 [default = 0];//玩家货舱物品是从那个NPC购买的
        optional int32 award_type = 11 [default = 0];//奖励类型 1 银子，2 绑定银子
}
//-----------------------------------------鲜花----------------------------------------------------------
//获取接收鲜花的列表
message m_flowers_get_accept_list_toc{
        repeated p_flowers_give_info list = 1; //接收鲜花的列表
}

//更新接收鲜花的列表
message m_flowers_update_accept_toc{
        required p_flowers_give_info info = 2; //接收鲜花的列表
}

//赠送鲜花的信息
message p_flowers_give_info{
        required int32  id            = 1; //赠送信息id
        required int32  give_role_id  = 2; //赠送者的id
        required string giver         = 3; //赠送者的角色名
        required int32  giver_sex     = 4; //赠送者的性别
        required int32  giver_faction = 5; //赠送者的国家
        required int32  flowers_type  = 6; //鲜花的类型id 
}

//接收鲜花
message m_flowers_accept_tos{
        required int32  id            = 1; //赠送信息id
        required int32  reply_id      = 2; //回复的类型，1:联系，2:谢谢，3:回吻
}

message m_flowers_accept_toc{
        required bool  succ            = 1; //回复成功
        required int32 id              = 2; //送花者的id
        optional int32 give_role_id    = 3; //送花者的id
}

//赠送鲜花
message m_flowers_give_tos{
        required int32  rece_role_id   = 1; //被赠送鲜花的玩家id
        optional int32  goods_id       = 2; //鲜花的goods id
        optional int32  flowers_type   = 3; //鲜花的类型id 
        required bool   is_anonymous   = 4; //是否匿名   
}

message m_flowers_give_toc{
        required bool   succ           = 1; //是否赠送成功     
        required string tips           = 2; //提示语
        required bool   is_buy         = 3[default = false]; //赠送失败如果是因为不过数量就提示去商店购买
}

//通过人命获得被赠送者的信息
message m_flowers_get_recever_info_tos{
        required string role_name      = 1; //被赠送者的信息
}

message m_flowers_get_recever_info_toc{
        required bool        succ           = 1; //是否成功
        optional string      reason         = 2; //失败原因
        optional p_role_base rolebase       = 3; //玩家基础信息
        optional p_role_attr roleattr       = 4; //玩家详细信
}

//世界广播送花
message m_flowers_give_world_broadcast_toc{
        required p_flowers_give_broadcast_info broadcast = 1;
}

//国家广播送花
message m_flowers_give_faction_broadcast_toc{
        required p_flowers_give_broadcast_info broadcast = 1;
}

//地图广播送花
message m_flowers_give_map_broadcast_toc{
        required p_flowers_give_broadcast_info broadcast = 1;
}

message p_flowers_give_broadcast_info{
        required string giver         = 1; //赠送者的角色名
        required string receiver      = 2; //接收者的角色名
        required int32  flowers_type  = 3; //鲜花的类型id 
        required string broadcasting  = 4; //广播语
}


//============================= 种植模块  ==================
//---------------------------------
//函数：整个门派的田地状态有更新（比如在门派升级、降级的时候出发）
//---------------------------------
message m_plant_family_farm_toc{
        required int32                         farm_size               = 1; //更新后的拥有田地的数目
        repeated p_map_farm                    farm_list               = 2; //更新的田地列表(一人一块地)
}
//---------------------------------
//函数：更新田地的状态
//---------------------------------
message m_plant_update_farm_toc{
        required p_map_farm                    farm_info               = 1;//田地的状态更新        
}
//---------------------------------
//函数：assart 开垦田地
//---------------------------------
message m_plant_assart_tos{
}
message m_plant_assart_toc{
        required bool                           succ                    = 1 [default=true];
        optional string                         reason                  = 2;
        optional int32                          farm_id                 = 3;//开垦的新田地ID
}

//---------------------------------
//函数：播种
//---------------------------------
message m_plant_sow_tos{
        required int32                          farm_id                 = 1;//田地ID(一人一块地)
        required int32                          seed_id                 = 2;//种子的物品类型ID
}
message m_plant_sow_toc{
        required bool                           succ                    = 1 [default=true];
        optional string                         reason                  = 2;
        optional p_map_farm                     farm_info               = 3;//田地的状态更新        
        optional int32                          remain_fertilize_times  = 4;//剩余施肥次数
}
//---------------------------------
//函数：施肥
//---------------------------------
message m_plant_fertilize_tos{
        required int32                          farm_id                 = 1;//田地ID(一人一块地)
}
message m_plant_fertilize_toc{
        required bool                           succ                    = 1 [default=true];
        optional string                         reason                  = 2;
        optional p_map_farm                     farm_info               = 3;//田地的状态更新
        optional int32                          remain_fertilize_times  = 4;//剩余施肥次数
}
//---------------------------------
//函数：显示种植日记
//---------------------------------
message m_plant_list_log_tos{
}
message m_plant_list_log_toc{
        required bool                           succ                    = 1 [default=true];
        optional string                         reason                  = 2;
        repeated string                         logs                    = 3; //种植日记的记录
}
//---------------------------------
//函数：清空种植日记
//---------------------------------
message m_plant_clear_log_tos{
}
message m_plant_clear_log_toc{
        required bool                           succ                    = 1 [default=true];
        optional string                         reason                  = 2;
}
//---------------------------------
//函数：收获
//---------------------------------
message m_plant_harvest_tos{
        required int32                          farm_id                 = 1;//田地ID
}
message m_plant_harvest_toc{
        required bool                           succ                    = 1 [default=true];
        optional string                         reason                  = 2;
        required int32                          farm_id                 = 3;//田地ID，收获之后田地变为未种植状态
}
//---------------------------------
//函数：显示种植技能
//---------------------------------
message m_plant_show_skill_tos{                   
        
}
message m_plant_show_skill_toc{
        required bool                           succ                    = 1 [default=true];
        optional string                         reason                  = 2;
        optional int32                          cur_skill_level         = 3;//当前的技能等级
        optional int32                          cur_proficiency         = 4;//当前熟练度
        optional int32                          need_role_level         = 5;//所需的玩家等级
        optional int32                          need_proficiency        = 6;//所需的熟练度
        optional int32                          need_expr               = 7;//消耗经验  
        optional int32                          need_silver             = 8;//消耗银子
}
//---------------------------------
//函数：升级种植技能
//---------------------------------
message m_plant_upgrade_skill_tos{
}
message m_plant_upgrade_skill_toc{
        required bool                           succ                    = 1 [default=true];
        optional string                         reason                  = 2;
}

//---------------------------------
//函数：获取对应的种子列表
//---------------------------------
message m_plant_list_seeds_tos{
}
message m_plant_list_seeds_toc{
        required bool                           succ                    = 1 [default=true];
        optional string                         reason                  = 2;
        repeated p_seed_info                    seeds                   = 3; //种子列表
}

//========================门派合并模块===========================
//合并门派选择面板
message m_family_combine_panel_tos{
}
message m_family_combine_panel_toc{
    required bool                           	succ                        = 1 [default=true];
    optional string                         	reason                  	= 2;
    optional int32                              family_id_1                	= 3;
    optional string                             family_name_1              	= 4;
    optional int32                              family_id_2                	= 5;
    optional string                             family_name_2              	= 6;
}
//合并门派请求
message m_family_combine_request_tos{
    required int32                              target_family_id           	= 1;  //合并到的门派ID
}
message m_family_combine_request_toc{
    required bool                           	succ                    	= 1 [default=true];
    optional bool           					return_self     			= 2 [default=true];
    optional string                         	reason                  	= 3;
    optional int32                           	request_role_id             = 4;//发送请求者ID
}

//合并门派
message m_family_combine_tos{
    required bool                           	confirm                   	= 1 [default=true];
    required int32                           	request_role_id             = 2;//发送请求者ID
}
message m_family_combine_toc{
    required bool                           	succ                    	= 1 [default=true];
    optional bool           					return_self     			= 2 [default=true];
    optional string                         	reason                  	= 3;
}

//========================在线挂机模块===========================
//开始在线挂机接口
message m_role2_on_hook_begin_tos{
        
}
message m_role2_on_hook_begin_toc{
        required bool succ = 1 [default = true];//操作结果
        required bool return_self = 2 [default = true];
        optional string reason = 3;
        optional int32 role_id = 4;
        optional bool status = 5 [default = false];
}
//结束挂机接口
message m_role2_on_hook_end_tos{
        
}
message m_role2_on_hook_end_toc{
        required bool succ = 1 [default = true];//操作结果
        required bool return_self = 2 [default = true];
        optional string reason = 3;
        optional int32 start_time = 4 [default = 0];//本次开始在线挂机时间
        optional int32 sum_exp = 5 [default = 0];//本次挂机到现在获得的总经验
        optional int32 end_time = 6 [default = 0];//本次结束在线挂机时间
        optional int32 role_id = 7;
        optional bool status = 8 [default = false];
}
//挂机状态接口
message m_role2_on_hook_status_tos{
        
}
message m_role2_on_hook_status_toc{
        required bool succ = 1 [default = true];//操作结果
        optional string reason = 2;
        optional int32 start_time = 3 [default = 0];//本次开始在线挂机时间
        optional int32 sun_exp = 4 [default = 0];//本次挂机到现在获得的总经验
        optional int32 add_exp = 5 [default = 0];//本次玩家获得的经验
        optional int32 next_time = 6 [default = 0];//玩家下次获得经验的时间
}

//-------------------------------------------------时间礼包-------------------------------------------------------
//时间礼包列表
message m_time_gift_list_toc{
        required p_time_gift_info gift = 1;    
}

//时间礼包信息
message p_time_gift_info{
        required int32   id              = 1;
        repeated p_goods goods_list      = 2;
        required int32   time      = 3;
}

//提取时间礼包
message m_time_gift_accept_tos{
        required int32   id              = 1;
}

message m_time_gift_accept_toc{
        required bool    succ            = 1;
        optional string  reason          = 2;
}

//-------------------------------------------------等级礼包-------------------------------------------------------
//等级礼包列表
message m_level_gift_list_toc{
        required p_level_gift_info gift = 1;    
}

//等级礼包信息
message p_level_gift_info{
        required int32   id              = 1;
        repeated p_goods goods_list      = 2;
        required int32   next_level      = 3;
}

//提取等级礼包
message m_level_gift_accept_tos{
        required int32   id              = 1;
}

message m_level_gift_accept_toc{
        required bool    succ            = 1;
        optional string  reason          = 2;
        repeated p_goods goods_list      = 3;
}
---------------------------------------------------------------------------------
//大明宝藏
//进入大明宝藏副本地图接口
message m_country_treasure_enter_tos{
        required int32 npc_id = 1 [default = 0];//的npc id
        required int32 map_id = 2 [default = 0];//的npc所在的地图id
}
message m_country_treasure_enter_toc{
        required bool succ = 1 [default = true];//操作成功标志
        optional string reason = 2;//操作失败描述
}

message m_country_treasure_quit_tos{
        required int32 npc_id = 1 [default = 0];//的npc id
        required int32 map_id = 2 [default = 0];//的npc所在的地图id
}

message m_country_treasure_quit_toc{
        required bool succ = 1 [default = true];//操作成功标志
        optional string reason = 2;//操作失败描述
}
//大明宝藏相关信息查询接口
message m_country_treasure_query_tos{
        required int32 op_type = 1[default = 0];
}
message m_country_treasure_query_toc{
        required bool succ = 1 [default = true];//操作成功标志
        optional string reason = 2;//操作失败描述
        optional int32 reason_code = 3[default = 0];//描述编码
        required int32 op_type = 4[default = 0];
        optional int32 fb_start_time = 5[default = 0]; 
        optional int32 fb_end_time = 6[default = 0];
        optional int32 npc_id = 7 [default = 0];//此NPC ID 是去掉国家标识的NPC ID
        optional int32 fee = 8 [default = 0];
}

// 宝藏积分
message m_country_treasure_points_toc {
        repeated p_country_points       points                  = 1;
}

message p_country_points {
        required int32   faction_id             = 1;
        required int32   points                 = 2;
}

//=================宠物系统=====================================
message m_pet_enter_toc {
    repeated p_map_pet                  pets                = 1;//玩家周围的怪 
}

message m_pet_quit_toc {
    required int32                          pet_id               = 1;
}

message m_pet_dead_toc {
    required int32                          pet_id               = 1;
}

message m_pet_attr_change_toc {
    required int32                          pet_id               = 1;
    required int32                          change_type          = 3;
    required int32                          value                = 4;
}

//召唤宠物，让宠物出战
message m_pet_summon_tos {
    required int32                          pet_id               = 1;
}

message m_pet_summon_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    optional p_pet                          pet_info                = 3;
}


//收回出战的宠物
message m_pet_call_back_tos {
    required int32                          pet_id               = 1;
}

message m_pet_call_back_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    required int32                          pet_id                  = 3;
}

//宠物放生
message m_pet_throw_tos {
    required int32                          pet_id               = 1;
}

message m_pet_throw_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    optional p_role_pet_bag                 bag_info                = 3;
}

//宠物延寿
message m_pet_add_life_tos {
    required int32                          pet_id               = 1;
    required int32                          add_type             = 2;//延寿的数量类型
}

message m_pet_add_life_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    required int32                          pet_id                  = 3;
    optional int32                          life                    = 4;
}

//宠物学习技能
message m_pet_learn_skill_tos {
    required int32                          pet_id               = 1;
    required int32                          skill_id             = 2;
}

message m_pet_learn_skill_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    optional bool                           succ2                   = 3;//是否学习成功，一定概率触发学习失败，扣掉技能树
    required int32                          pet_id                  = 4;
    repeated p_pet_skill                    skills                  = 5;
}

//查看宠物详细信息
message m_pet_info_tos {
    required int32                          pet_id                  = 1;
    required int32                          role_id                 = 2;
}

message m_pet_info_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    optional p_pet                          pet_info                = 3;
}


message m_pet_bag_info_tos {
   
}

message m_pet_bag_info_toc {
    required p_role_pet_bag                 info                    = 1;
}

message m_pet_add_bag_tos {
    required int32                          pet_id                  = 1;
}

message m_pet_add_bag_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    optional p_role_pet_bag                 info                    = 1;
}

//宠物分配一级属性点
message m_pet_attr_assign_tos {
    required int32                          pet_id                  = 1;
    repeated p_pet_attr_assign              assign_info             = 2;
}

message m_pet_attr_assign_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    optional p_pet                          pet_info                = 3;
}

message m_pet_level_up_toc {
    required p_pet                          pet_info                = 3;
}

message m_pet_dead_toc {
    required int32                          pet_id                  = 1;
    required int32                          life                    = 2; //死亡以后新的寿命值
}

//宠物洗灵
message m_pet_refresh_aptitude_tos {
    required int32                          pet_id                  = 1;
    required int32                          item_type               = 2;//使用的洗灵丹的道具类型ID
    required bool                           bind                    = 3;
}

message m_pet_refresh_aptitude_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    optional p_pet                          pet_info                = 3;
}

//宠物提悟
message m_pet_add_understanding_tos {
    required int32                          pet_id                  = 1;
    required int32                          item_type               = 2;//使用的提悟符的道具类型ID
    required bool                           use_protect             = 3;//是否使用提悟保护符
    required bool                           bind                    = 4;
}

message m_pet_add_understanding_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    optional bool                           succ2                   = 3;
    optional p_pet                          pet_info                = 4;
}

//宠物改名
message m_pet_change_name_tos {
    required int32                          pet_id                  = 1;
    required string                         pet_name                = 2;//名字
}

message m_pet_change_name_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    required int32                          pet_id                  = 3;
    required string                         pet_name                = 4;
}

message m_pet_feed_info_tos {
   
}

message m_pet_feed_info_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    optional p_pet_feed                     info                    = 3;
}

message m_pet_feed_begin_tos {
    required int32                          pet_id                  = 1;
}

message m_pet_feed_begin_toc {
   required bool                           succ                    = 1 [default=true];
   optional string                         reason                  = 2;
   optional p_pet_feed                     info                    = 3;
}

message m_pet_feed_commit_tos {
    required int32                          pet_id                  = 1;
    required int32                          type                    = 2;
}

message m_pet_feed_commit_toc {
   required bool                           succ                    = 1 [default=true];
   optional string                         reason                  = 2;
   optional p_pet_feed                     info                    = 3;
   optional p_pet                          pet_info                    = 4;
}

message m_pet_feed_give_up_tos {
    required int32                          pet_id                  = 1;
}

message m_pet_feed_give_up_toc {
   required bool                           succ                    = 1 [default=true];
   optional string                         reason                  = 2;
   optional p_pet_feed                     info                    = 3;
}

message m_pet_feed_star_up_tos {
    
}

message m_pet_feed_star_up_toc {
   required bool                           succ                    = 1 [default=true];
   optional bool                           succ2                   = 2 [default=true];
   optional string                         reason                  = 3;
   optional p_pet_feed                     info                    = 4;
}

message m_pet_feed_over_toc {
   required int32                          pet_id                  = 1;
}

//op_type 1:获取训练信息 2:添加训练空位 3:开始训练 4:终止训练 5:突飞猛进 6:清楚突飞猛进cd 7:训练模式 8:宠物加经验
message m_pet_training_request_tos{
   required int32                          op_type                 = 1;
   required int32                          pet_id                  = 2;
   required int32                          training_hours          = 3[default=0];
   required int32                          training_mode           = 4[default=0];//训练模式   1.正常 2.加强 3.vip1 4.vip2 5.vip3
}

message m_pet_training_request_toc{
   required int32                          op_type                 = 1;
   optional bool                           succ                    = 2[default=true];
   optional string                         reason                  = 3;
   optional int32                          reason_code             = 4[default=0];
   optional int32                          cur_room                = 5[default=0];
   repeated p_pet_training_info            pet_training_list       = 6;
   optional p_pet_training_info            pet_training_info       = 7;
   optional p_pet                          pet_info                = 8;
   optional double                         add_exp                 = 9[default=0];
}

message m_pet_grow_info_tos {
   
   
}

message m_pet_grow_info_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    optional p_role_pet_grow                grow_info               = 4;
    repeated p_grow_info                    info_configs            = 5;
}

message m_pet_grow_begin_tos {
    required int32                          grow_type                  = 1;
}

message m_pet_grow_begin_toc {
   required bool                           succ                    = 1 [default=true];
   optional string                         reason                  = 2;
   optional p_role_pet_grow                grow_info               = 3;
   repeated p_grow_info                    info_configs            = 5;
}

message m_pet_grow_commit_tos {

}

message m_pet_grow_commit_toc {
   required bool                           succ                    = 1 [default=true];
   optional string                         reason                  = 2;
   optional int32                          use_gold                = 3;
   optional p_role_pet_grow                grow_info               = 4;
   repeated p_grow_info                    info_configs            = 5;
}

message m_pet_grow_give_up_tos {

}

message m_pet_grow_give_up_toc {
   required bool                           succ                    = 1 [default=true];
   optional string                         reason                  = 2;
   optional p_role_pet_grow                grow_info               = 3;
   repeated p_grow_info                    info_configs            = 5;
}


message m_pet_grow_over_toc {
    required int32                          grow_type                 = 1;
    required p_role_pet_grow                grow_info                 = 2;
    repeated p_grow_info                    info_configs              = 5;
}

message m_pet_add_skill_grid_tos {
     required int32                          pet_id                  = 1;
}

message m_pet_add_skill_grid_toc {
   required bool                           succ                    = 1 [default=true];
   optional string                         reason                  = 2;
   optional p_pet                          pet_info                = 3;
}

message m_pet_forget_skill_tos {
    required int32                          pet_id                  = 1;
    required int32                          skill_id                = 2;
}

message m_pet_forget_skill_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    optional p_pet                          pet_info                = 3;
}

message m_pet_change_pos_tos {
    required int32                          pet_id                  = 1;
    required int32                          pos                     = 2;
}

message m_pet_change_pos_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    required p_role_pet_bag                 info                    = 1;
}

message m_pet_refining_tos {
    required int32                          pet_id                  = 1;
}

message m_pet_refining_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    optional p_role_pet_bag                 info                    = 1;
}

message m_pet_refining_exp_tos {
    required int32                          pet_id                  = 1;
}

message m_pet_refining_exp_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    optional int32                          pet_id                  = 3;
    optional string                         pet_name                = 4;
    optional int32                          silver                  = 5;
    optional double                         exp                     = 6;
    optional int32                          pet_color               = 7;
}

message m_pet_egg_use_tos {
    required int32                          goods_id                    = 1 ;
}

message m_pet_egg_use_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    optional int32                          refresh_tick            = 3;
    repeated int32                          type_id_list            = 4;
    optional int32                          egg_left_tick           = 5 ;
    optional int32                          goods_id                = 6 ;
}

message m_pet_egg_refresh_tos {
   required int32                           goods_id                    = 1 ;
}

message m_pet_egg_refresh_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    repeated int32                          type_id_list            = 4;
    optional int32                          egg_left_tick           = 5 ;
    optional int32                          goods_id                = 6 ;
}

message m_pet_egg_adopt_tos {
    required int32                          goods_id                = 1 ;
    required int32                          type_id                 = 2;
}

message m_pet_egg_adopt_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    optional int32                          type_id                 = 3;
}

message m_pet_trick_learn_tos {
    required int32                          type                    = 1 ;
    required int32                          pet_id                  = 2;
}

message m_pet_trick_learn_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    optional p_pet                          pet_info                = 3;
}

message m_pet_trick_upgrade_tos {
    required int32                          skill_id                = 1 ;
    required int32                          pet_id                  = 2;
}

message m_pet_trick_upgrade_toc {
    required bool                           succ                    = 1 [default=true];
    optional string                         reason                  = 2;
    optional p_pet                          pet_info                = 3;
}

//=================宠物系统结束=====================================


//统计功能按钮的使用
message m_stat_button_tos {
    required int32                           use_type                 = 1 [default=1]; //1表示鼠标点击,2表示快捷键
    optional int32                           btn_key                  = 2;
}

//发送到前端的统计行为的设置
message m_stat_config_toc {
    required bool                           is_open                 = 1 [default=false]; //默认不打开统计行为
}

//====================刺探模块===========================

// 发布国探
message m_spy_faction_tos {
}

message m_spy_faction_toc {
	required bool           succ            = 1 [default=true];
	optional string         reason          = 2;
        optional bool           return_self     = 3 [default=true];
	optional int32		remain_time     = 4;
	optional int32          npc_id          = 5;
	optional int32          map_id          = 6;
	optional int32          tx              = 7;
	optional int32		ty              = 8;
        optional int32          office_id       = 9;
        optional int32          faction_id      = 10;
        optional string         role_name       = 11; 
}

// 国探剩余时间
message m_spy_faction_time_toc {
        required int32         remain_time      = 1; // 停止时间
}

// 国探时间修改
message m_spy_time_tos {
        required int32          request_type    = 1; //1、获取，2、设置
        optional int32          start_hour      = 2;
        optional int32          start_min       = 3;
}

message m_spy_time_toc {
        required bool           succ            = 1 [default=true];
        optional string         reason          = 2;
        optional int32          start_hour      = 3;
        optional int32          start_min       = 4;
        optional bool           can_start_now   = 5;
        optional bool           has_publish     = 6;
}

//=================师门同心副本开始==================================

//进入师门同心副本接口
message m_educate_fb_enter_tos{
        required int32 npc_id = 1 [default = 0];//的npc id
        required int32 map_id = 2 [default = 0];//的npc所在的地图id
}
message m_educate_fb_enter_toc{
        required bool succ = 1 [default = true];//操作成功标志
        required bool return_self = 2 [default = true];
        optional string reason = 3;//操作失败描述
        repeated int32 monster_type_ids = 4;//
}
//退出师门同心副本接口
message m_educate_fb_quit_tos{
        required int32 npc_id = 1 [default = 0];//的npc id
        required int32 map_id = 2 [default = 0];//的npc所在的地图id
}
message m_educate_fb_quit_toc{
        required bool succ = 1 [default = true];//操作成功标志
        optional string reason = 2;//操作失败描述
}
//获取师门同心副本奖励
message m_educate_fb_award_tos{
        required int32 npc_id = 1 [default = 0];//的npc id
        required int32 map_id = 2 [default = 0];//的npc所在的地图id
}
message m_educate_fb_award_toc{
        required bool succ = 1 [default = true];//操作成功标志
        optional string reason = 2;//操作失败描述
        repeated p_goods award_goods = 3;//奖励道具
}
//赌博奖励接口
message m_educate_fb_gambling_tos{
        required int32 npc_id = 1 [default = 0];//的npc id
        required int32 map_id = 2 [default = 0];//的npc所在的地图id
}
message m_educate_fb_gambling_toc{
        required bool succ = 1 [default = true];//操作成功标志
        optional string reason = 2;//操作失败描述
        optional int32 lucky_count = 3[default = 0];//幸运积分
        optional int32 fee = 4[default = 0];//费用
        repeated p_goods award_goods = 5;//奖励道具
}
//使用副本道具
message m_educate_fb_item_tos{
        required int32 goods_id = 1 [default = 0];//物品唯一id
        required int32 item_id = 2 [default = 0];//的npc所在的地图id
}
message m_educate_fb_item_toc{
        required bool succ = 1 [default = true];//操作成功标志
        optional string reason = 2;//操作失败描述
}
//查询玩家师门同心副本信息
message m_educate_fb_query_tos{
        required int32 op_type = 1 [default = 0];//操作
        optional int32 goods_id = 2 [default = 0];//物品唯一id
        optional int32 item_id = 3 [default = 0];//物品类型id
        optional int32 use_role_id = 4 [default = 0];//用户id
}
message m_educate_fb_query_toc{
        required bool succ = 1 [default = true];//操作成功标志
        required int32 op_type = 2 [default = 0];//操作
        optional string reason = 3;//操作失败描述
        optional int32 times = 4[default = 0];//副本次数
        optional int32 start_time = 5[default = 0];//进入副本时间
        optional int32 end_time = 6[default = 0];//完成副本时间
        optional int32 status = 7[default = 0];//副本状态
        optional int32 count = 8[default = 0];//副本得分
        repeated p_educate_fb_item  fb_items = 9;
        optional int32 lucky_count = 10[default = 0];//幸运积分
        optional int32 goods_id = 11[default = 0];//物品唯一id
        optional int32 item_id = 12 [default = 0];//物品类型id
        optional int32 use_role_id = 13 [default = 0];//当前使用道具用户id
        optional string use_role_name = 14;//当前使用道具用户名称
        optional int32 use_tx = 15 [default = 0];//当前召集点
        optional int32 use_ty = 16;//当前召集点
        required bool return_self = 17 [default = true];
        repeated p_educate_fb_item  all_fb_items = 18;
        optional int32 leader_role_id = 19 [default = 0];//当前队长id
        optional int32 max_lucky_count = 20[default = 0];//最大的幸运积分
        repeated p_goods award_goods = 21;//奖励道具
        repeated p_educate_fb_award fb_award_config = 22;//副本积分奖励配置
}
//=================师门同心副本结束==================================


//====================监狱接口=====================

// 出狱
message m_jail_out_tos {
}

message m_jail_out_toc {
        required bool           succ                    = 1 [default=true];
        optional string         reason                  = 2;
}

// 捐献
message m_jail_donate_tos {
        required int32          gold                    = 1;
}

message m_jail_donate_toc {
        required bool           succ                    = 1 [default=true];
        optional string         reason                  = 2;
        optional int32          pk_points               = 3;
        optional int32          gold                    = 4;
        optional int32          gold_bind               = 5;
}

// 强行出狱
message m_jail_out_force_tos {
}

message m_jail_out_force_toc {
        required bool           succ                    = 1 [default=true];
        optional string         reason                  = 2;
        optional int32          silver                  = 3;
        optional int32          silver_bind             = 4;
}

//====================赠送模块开始=====================

// 获取礼品
message m_present_get_tos {
        required int32          present_id              = 1; //赠送的ID,每个ID有对应的配置
}

message m_present_get_toc {
        required bool           succ                    = 1 [default=true];
        optional string         reason                  = 2;
        optional int32          present_id              = 3; //赠送的ID,每个ID有对应的配置
}

// 提示有礼品赠送，例如赠送时装
message m_present_notify_toc {
        repeated p_present_info     present_list        = 1; //赠送的信息列表
}


//====================赠送模块结束=====================


//=================连续登录=========================

// 领取或者购买奖励
message m_conlogin_fetch_tos {
	required int32				id 	= 1;
	// 领取免费奖励时，该值忽略
	required int32				num	= 2[default=0];
}

message m_conlogin_fetch_toc {
	required bool				succ 	= 1[default=true];
	optional string				reason	= 2;
	// 领取了哪些奖励
	optional int32				id		= 3;
	optional int32				num		= 4;
}

// 连续登录信息
message m_conlogin_info_toc {
	required int32				day			= 1;
	required int32				next_day	= 2;
	required string				notice		= 3;
	repeated p_conlogin_reward	rewards		= 4;
}

message m_conlogin_info_tos {
	//是否是游戏自动请求的，用于判断在玩家屏蔽当天显示的情况下是否需要返回数据
	required bool				auto		= 1[default=true];
}

//通知服务端当天不再显示连续登录界面
message m_conlogin_notshow_tos {
}
message m_conlogin_notshow_toc {
	required bool				succ 	= 1[default=true];
	optional string				reason	= 2;
}

// 清除连续登陆天数
message m_conlogin_clear_tos {
}

message m_conlogin_clear_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
}


//=================个人副本=========================

// 获取副本列表
message m_personal_fb_list_tos {
}

message m_personal_fb_list_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
        repeated p_personal_fb_info     fb_info                 = 3;
        optional int32                  today_count             = 4; // 今日挑战次数
        optional int32                  max_times               = 5; // 最大次数
        optional int32                  last_fb_passed          = 6;
        optional int32                  today_lost              = 7; // 今日失败次数
        optional int32                  max_lost                = 8; // 最大失败次数
        optional int32                  exp_get                 = 9; // 经验获得
}

// 选择进入副本
message m_personal_fb_enter_tos {
        required int32                  fb_id                   =1; // 关卡ID
}

message m_personal_fb_enter_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
}

// 挑战失败
message m_personal_fb_lost_toc {
}

// 退出地图
message m_personal_fb_quit_tos {
        required int32                  quit_type               = 1;
}

message m_personal_fb_quit_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
}

// 进入下一关卡
message m_personal_fb_next_level_tos {
}

message m_personal_fb_next_level_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
}

// 副本状态
message m_personal_fb_state_toc {
        required int32                  total_monsters          = 1;
        optional int32                  killed_count            = 2;
        optional int32                  exp_get                 = 3;
        optional int32                  time_used               = 4;
        optional bool                   is_boss_killed          = 5;
        optional int32                  self_best               = 6;
}

message p_personal_fb_info {
        required int32                  fb_id                   = 1;
        required string                 fb_name                 = 2;
        required int32                  state                   = 3; // 关卡状态:1、可挑战 2、已挑战 3、未开通
        optional int32                  best_time               = 4; // 最佳通关时间
        optional int32                  winner_id               = 5; // 纪录保持者ID
        optional string                 winner_name             = 6;
        optional int32                  winner_faction_id       = 7;
        optional int32                  best_self               = 8; // 自己的最佳通关纪录
}

//====================== 累积经验 ==================
// 点击NPC面板中的某个链接，获取某个累积经验项的详细情况
message m_accumulate_exp_info_tos {
	// 累积经验的类别:1 个人拉镖 2门派拉镖 3 刺探 4 守边
	required	int32				id				= 1;
}



message m_accumulate_exp_info_toc {
	required	bool					succ			= 1[default=true];
	optional	string					reason			= 2;
	optional 	p_accumulate_exp_info	info			= 3;
}

// 刷新累积经验的经验百分比
message m_accumulate_exp_refresh_tos {
	// 刷新经验的类别:1 个人拉镖 2门派拉镖 3 刺探 4 守边
	required	int32				id				= 1;
	// 1 用幸运石提升	2 用元宝提升
	required	int32				type			= 2;
}

message m_accumulate_exp_refresh_toc {
	required	bool				succ			= 1[default=true];
	optional	string				reason			= 2;
	
	// 如果succ为true，这里表示玩家提升的结果是成功还是失败
	optional	bool				result			= 4;
	// 新的比例
	optional	int32				rate			= 5;
	// 新的经验值
	optional	double				exp				= 6;
	// 如果succ为true，gold大于0时表示使用元宝方式刷新，否则是道具方式刷新
	optional 	int32				gold			= 7;
	optional 	int32				id				= 8;
	// 下一级别可以领取的奖励
	optional	double				next_exp		= 9;
}

// 领取累积经验
message m_accumulate_exp_fetch_tos {
	// 领取经验的类别:1 个人拉镖 2门派拉镖 3 刺探 4 守边
	required	int32				id				= 1;
}

message m_accumulate_exp_fetch_toc {
	required	bool				succ			= 1[default=true];
	optional	string				reason			= 2;
	//领取了多少经验
	optional	double				exp				= 3;
	optional	int32				id				= 4;
}

// 通知玩家有累积经验可以领取，用于在场景显示提示信息
message m_accumulate_exp_notify_toc {
	repeated	p_accumulate_exp_info	list			= 1;
}

// 获取累积经验类型列表，包括没有满足条件的，显示时由客户端进行过滤
message m_accumulate_exp_list_tos {
}

message m_accumulate_exp_list_toc {
	required	bool					succ			= 1[default=true];
	optional	string					reason			= 2;
	//
	repeated	p_accumulate_exp_info	list			= 3;
}

//====================== 陷阱 ==================
message m_trap_enter_toc {
        repeated p_map_trap             trap_list               = 1;
}

message m_trap_quit_toc {
        repeated int32                  trap_id                 = 2;
}

//====================== VIP模块 ==================
// vip信息
message m_vip_info_toc {
        required bool           succ            = 1 [default=true];
        optional string         reason          = 2;
        optional p_role_vip     vip_info        = 3;
}

// VIP开通远程仓库
message m_vip_remote_depot_tos {
}

message m_vip_remote_depot_toc {
        required bool          succ             = 1 [default=true];
        optional string        reason           = 2;
}

// 开通vip
message m_vip_active_tos {
        required int32          vip_type        = 1;
}

message m_vip_active_toc {
        required bool           succ            = 1 [default=true];
        optional string         reason          = 2;
        optional p_role_vip     vip_info        = 3;
        optional int32          gold            = 4;
        optional int32          item            = 5;
}

// 领取多倍经验
message m_vip_multi_exp_tos {
}

message m_vip_multi_exp_toc {
        required bool           succ            = 1 [default=true];
        optional string         reason          = 2;
}

// 屏蔽提示
message m_vip_stop_notify_tos {
        required int32          notify_type             = 1; //提示类型：1－快速任务免费传送提示，2－快速任务需要传送卷提示
}

message m_vip_stop_notify_toc {
        required bool           succ                    = 1 [default=true];
        optional string         reason                  = 2;
        optional int32          notify_type             = 3;
}

message m_vip_list_tos {
        required int32          page_id                 = 1;
}

message m_vip_list_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
        repeated p_vip_list_info        vip_list                = 3;
        optional int32                  max_page                = 4;
}  
//vip声望兑换          
message m_vip_exchange_prestige_tos {
}

message m_vip_exchange_prestige_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
}   

//====================== 门派仓库 ==================
//获取门派仓库中的物品
message m_fmldepot_list_goods_tos{
}

//返回所有门派仓库中的物品
message m_fmldepot_list_goods_toc{
    repeated p_fmldepot_bag depots  = 1; //开通仓库的信息
}


//开通仓库
message m_fmldepot_create_tos{
    required int32     bag_id       = 1; //要开通的仓库的背包id
}

message m_fmldepot_create_toc{
    required bool      succ             = 1; //是否成功
    optional string    reason           = 2; //失败的原因
    optional bool      return_self      = 3[default = true]; //是否返回给自己
    optional int32     bag_id           = 4; //背包id
}

//将物品存入门派仓库
message m_fmldepot_putin_tos{
    required int32                  bag_id              = 1;  //放入仓库的背包ID
    required int32                  goods_id            = 2;  //玩家背包中的物品的ID
}

message m_fmldepot_putin_toc {
    required bool       succ                = 1 [default = true];
    optional string     reason              = 2; //失败的原因
    optional p_goods    add_goods           =3;   //新增的门派物品，指定了bagid，不进行自动叠加。
}

//从门派仓库中取出物品
message m_fmldepot_getout_tos {
    required int32      bag_id              = 1;  //放入仓库的背包ID
    required int32      goods_id            = 2;  //物品ID
    required int32      num                 = 3;  //取出物品的个数
}

message m_fmldepot_getout_toc {
    required bool       succ                = 1 [default = true];
    optional string     reason              = 2;
    optional  int32     goods_id            = 3;   //被取出的物品ID
    optional  int32     remain_num          = 4;   //取出后剩下的物品数量，0则删除
}  

//门派仓库的物品更新（存或取之后）
message m_fmldepot_update_goods_toc {
    required int32      update_type         = 1;  //更新类型，1表示存入，2表示取出
    repeated p_goods    goods               = 2;  //背包中的物品，指定id的数量需要更新
}  
 

//查看门派仓库的日志
message m_fmldepot_list_log_tos{
    required int32      log_type            = 1;       //仓库日志类型，1表示存入，2表示取出
    required int32      page_num            = 2 [default = 1]; //分页的页码

}

message m_fmldepot_list_log_toc{
    required bool       succ                = 1 [default = true];
    optional string     reason              = 2;
    optional int32      log_type            = 3;       //仓库日志类型，1表示存入，2表示取出
    optional int32      log_count           = 4;       //日志的总记录数
    optional int32      page_num            = 5 [default = 1]; //分页的页码
    repeated p_fmldepot_log  logs           = 6;       //日志记录
}
//====================== 场景大战模块 ==================
//进入副本
message m_scene_war_fb_enter_tos{
    required int32 npc_id = 1 [default = 0];//NPC ID
    required int32 fb_type = 2 [default = 0];//副本类型
    required int32 fb_level = 3 [default = 0];//副本级别
    optional int32 fb_id = 4 [default = 0];//副本id 副本创建用户ID
    optional int32 fb_seconds = 5[default = 0];//副本时间戳
}
message m_scene_war_fb_enter_toc{
    required bool succ = 1 [default = true];
    required bool return_self = 2 [default = true];
    optional string reason = 3;
    optional int32 reason_code = 4[default = 0];
    optional int32 fb_fee = 5[default = 0];
    optional int32 fb_times = 6[default = 0];
    required int32 npc_id = 7 [default = 0];//NPC ID
    required int32 fb_type = 8 [default = 0];//副本类型
    required int32 fb_level = 9 [default = 0];//副本级别
    optional int32 fb_id = 10 [default = 0];//副本id 副本创建用户ID
    optional int32 fb_seconds = 11[default = 0];//副本时间戳
    optional int32 fb_max_times = 12[default = 0];//副本每天最多次数
}
//退出副本
message m_scene_war_fb_quit_tos{
    required int32 npc_id = 1 [default = 0];//NPC ID
}
message m_scene_war_fb_quit_toc{
    required bool succ = 1 [default = true];
    optional string reason = 2;
    optional int32 reason_code = 3[default = 0];
    required int32 npc_id = 4 [default = 0];//NPC ID
    optional int32 fb_type = 8 [default = 0];//副本类型
    optional int32 fb_level = 9 [default = 0];//副本级别
}
//查询副本信息
message m_scene_war_fb_query_tos{
    required int32 op_type = 1 [default = 0];//操作
    optional int32 npc_id = 2 [default = 0];//NPC ID
}
message m_scene_war_fb_query_toc{
    required bool succ = 1 [default = true];
    required int32 op_type = 2 [default = 0];//操作
    optional int32 npc_id = 3 [default = 0];//NPC ID
    optional string reason = 4;
    optional int32 reason_code = 5[default = 0];
    repeated p_scene_war_fb_link      fb_links = 6;//副本NPC面版
}

//场景副本召唤
message m_scene_war_fb_call_monster_tos{
    required int32 npc_id   =1[default = 0];//操作
	optional int32 pass_id  =2[default=0];
}
//op_type 1:召唤怪物成功失败 2:打完怪物通知前端
message m_scene_war_fb_call_monster_toc{
    required int32 op_type =1[default=1];
    required bool succ = 2 [default = true];
    optional string reason = 3;
    optional int32 reason_code = 4[default = 0];
	optional int32 npc_id  =5[default=0];
	optional int32 pass_id  =6[default=0];
}

 
//===================================== BGP 模块        =====================================
//bgp的登录请求
message m_bgp_login_tos {
    required int32                          id                       = 1;
    required string                         host                     = 2;
    required int32                          port                     = 3;
}

//bgp的登录返回
message m_bgp_login_toc {
    required int32                          id                       = 1;
    required bool                           succ                     = 2 [default=true];
    optional string                         reason                   = 3;
}

//===================================== 分线 模块       =====================================

//====================== 玩家礼包模块 ==================
//道具奖励查询
message m_gift_item_query_tos{
    
}
message m_gift_item_query_toc{
    required bool succ = 1 [default = true];
    optional string reason = 2;
    optional int32 reason_code = 3[default = 0];
    repeated p_goods cur_goods = 4;
    optional int32 award_role_level = 5[default = 0];
}
//领取道具奖励
message m_gift_item_award_tos{
    
}
message m_gift_item_award_toc{
    required bool succ = 1 [default = true];
    optional string reason = 2;
    optional int32 reason_code = 3[default = 0];
    repeated p_goods award_goods = 4;
    repeated p_goods next_goods = 5;
    optional int32 award_role_level = 6[default = 0];
}

//更新篝火信息
message m_bonfire_up_toc{
	 	repeated p_map_bonfire bnfires = 1;
}

//熄灭篝火
message m_bonfire_rm_toc{
		required int32   id = 1;
}

//加柴火
message m_bonfire_add_fagot_tos{
		required int32 bonfire_id = 1;
}

message m_bonfire_add_fagot_toc{
		required bool          succ    = 1; //是否成功
		optional p_map_bonfire bonfire = 2;
		optional string        reason  = 3; //失败原因
}

//获取篝火的信息
message m_bonfire_get_tos{
		required int32 bonfire_id = 1;
}

message m_bonfire_get_toc{
		required bool          succ         = 1;
		optional string        reason       = 2;
		optional p_map_bonfire bonfire_info = 3;
}
//
//====================== 任务单人副本模块 ==================
// 进入副本
message m_mission_fb_enter_tos {
        required int32                  barrier_id              = 1; // 副本ID
}

message m_mission_fb_enter_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
        optional int32                  barrier_id              = 3; // 副本ID
        optional int32                  error_code              = 4; //错误代码
}

// 领取副本中的临时道具
message m_mission_fb_prop_tos {
        required int32                  barrier_id              = 1; // 副本ID
}

message m_mission_fb_prop_toc {
        required int32                  barrier_id              = 1; // 副本ID
        required bool                   succ                    = 2 [default=true];
        optional string                 reason                  = 3;
        optional int32                  prop_id                 = 4; //副本中获得的临时道具ID
}
  

// 退出副本
message m_mission_fb_quit_tos {
        required int32                  quit_type               = 1; // 退出类型：1、副本内手动退出，2、死亡退出
}

message m_mission_fb_quit_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
} 

//====================== 英雄副本模块 ==================

// 进入副本
message m_hero_fb_enter_tos {
        required int32                  barrier_id                   = 1; // 副本ID
}

message m_hero_fb_enter_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
}

// 战报
message m_hero_fb_report_tos {
        required int32                  barrier_id                   = 1; // 副本ID
}

message m_hero_fb_report_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
        optional int32                  barrier_id              = 3;                  //关卡id
        optional p_hero_fb_record       fb_record               = 4;                  //玩家自己的记录
        optional int32                  state                   = 5[default=0];       //是否打破记录 0:失败 1：成功 2：破纪录
        optional p_hero_fb_record       first_record            = 6;                  //第一名的记录
        optional int32                  poker_count             = 7[default=0];       //翻牌数量
        optional int32                  fail_code               = 8[default=1];       //失败代码
}

// 打开面板
message m_hero_fb_panel_tos {
}

message m_hero_fb_panel_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
        optional p_role_hero_fb_info    hero_fb                 = 3;
}

// 退出副本
message m_hero_fb_quit_tos {
        required int32                  quit_type               = 1; // 退出类型：1、副本内手动退出，2、死亡退出
}

message m_hero_fb_quit_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
}

// 领取奖励
message m_hero_fb_reward_tos {
        required int32                  reward_id               = 1; // 奖励ID（章节）
}

message m_hero_fb_reward_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
}

// 挑战状态
message m_hero_fb_state_toc {
        required int32                  total_monsters          = 1;
        optional int32                  remain_monsters         = 2;
        optional int32                  time_used               = 4;
}

// 购买挑战次数
message m_hero_fb_buy_tos {
}

message m_hero_fb_buy_toc {
        required bool                   succ                    = 1 [default=true];
        optional string                 reason                  = 2;
        optional int32                  max_enter_times         = 3;
        optional int32                  buy_count               = 4;
}
//个人副本奖励请求 op_type 1:翻牌   2:领奖
message m_hero_fb_poker_reward_tos{
        required int32                  op_type                 = 1 [default=0];         
}

message m_hero_fb_poker_reward_toc{
        required int32                    op_type                 = 1 [default=0];
        optional int32                    err_code                = 2 [default=0];
        optional string                   reason                  = 3;
        optional p_hero_fb_poker_reward   reward_list             = 4; //翻牌得到的奖励
        repeated p_hero_fb_poker_reward   other_list              = 5; //其他的奖励
}

//=======================================================
//领取累积经验
message m_accumulate_exp_get_tos{
}

message m_accumulate_exp_get_toc{
	required	bool				succ				= 1[default=true];
	optional	string				reason				= 2;
	optional	double				addexp				= 3;
}
//查看累积经验
message m_accumulate_exp_view_tos{
}

message m_accumulate_exp_view_toc{
	required	bool				succ				= 1[default=true];
	optional	string				reason				= 2;
	optional	double				allexp				= 3;
	optional	double				cangetexp			= 4;
	optional	double				nextexp				= 5;
	optional	int32				gold				= 6;
	optional	int32				flag				= 7[default=0];//标志
}

//任命门派内务使
message m_family_set_interior_manager_tos {
    required int32                      role_id                 = 1;
}

message m_family_set_interior_manager_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
    optional int32                      role_id                 = 4;
    optional string                     role_name               = 5;
    optional int32                      oldrole_id              = 6[default=0];
    optional string                     oldrole_name            = 7;
}

//解除门派内务使
message m_family_unset_interior_manager_tos {
    required int32                      role_id                 = 1;
}

message m_family_unset_interior_manager_toc {
    required bool                       succ                    = 1[default=true];
    optional string                     reason                  = 2;
    required bool                       return_self             = 3[default=true];
    optional int32                      role_id                 = 4;
}
//左右护法广播
message m_family_leftright_protector_toc{
	required int32			num			= 1[default=2];
	optional string			reason			= 2;
	optional int32			leftid			= 3;
	optional string                 leftrole_name           = 4;
	optional int32			rightid			= 5;
	optional string                 rightrole_name          = 6;
}

message m_family_collect_get_role_info_tos{
	required int32			type_id			= 1;
	required int32                  role_id                 = 2;	
}

message m_family_collect_get_role_info_toc{
	required bool                       succ                    = 1[default=true];
	optional string			    reason		    = 2;
	optional int32			    type_id		    = 3;
	optional int32			    value		    = 4;
}

message m_family_notify_online_tos {
}
// 下发在线列表
message m_family_notify_online_toc {
	required bool                       succ                    = 1[default=true];
	optional string                     reason                  = 2;
	repeated p_online_info		    online_list		    = 3; //门派成员在线列表
}

}

// ================  传奇目标  ===============================

// 请求玩家
message m_goal_info_tos {
}

message m_goal_info_toc {
	required bool						succ				= 1[default=true];
	optional string						reason				= 2;
	optional p_role_goal				info				= 3;
}

// 领取奖励
message m_goal_fetch_tos {
	required int32						goal_id				= 1;
}

message m_goal_fetch_toc {
	required bool						succ				= 1[default=true];
	optional string						reason				= 2;
	optional int32						goal_id				= 3;
}

//通知某个目标状态发生变化了
message m_goal_update_toc {
	required p_role_goal_item			goal_item			= 1;
}

//声望兑换功能接口
message m_prestige_query_tos{
        required int32 op_type = 1[default = 0];//操作类型
        required int32 group_id = 2[default = 0];//组Id
        optional int32 class_id = 3[default = 0];//子类Id
}
message m_prestige_query_toc{
        required int32 op_type = 1[default = 0];//操作类型
        required int32 group_id = 2[default = 0];//组Id
        optional int32 class_id = 3[default = 0];//子类Id
        required bool succ = 4[default=true];
	optional string reason = 5;
        optional int32 reason_code = 6[default = 0];
        repeated p_prestige_item item_list = 7;//可兑换列表
}
message m_prestige_deal_tos{
        required int32 group_id = 1[default = 0];//组Id
        required int32 class_id = 2[default = 0];//子类Id
        required int32 key = 3[default = 0];//兑换物品key
        required int32 number = 4[default = 1];//兑换数量
        
}
message m_prestige_deal_toc{
        required int32 group_id = 1[default = 0];//组Id
        required int32 class_id = 2[default = 0];//子类Id
        required int32 key = 3[default = 0];//兑换物品key
        required int32 number = 4[default = 1];//兑换数量
        required bool succ = 5[default=true];
	optional string reason = 6;
        optional int32 reason_code = 7[default = 0];
        optional int32 consume_prestige = 8[default = 0];
        repeated p_goods award_list = 9;
        optional double sum_prestige = 10[default = 0];//玩家总声望值客户端需要同步更新
        optional double cur_prestige = 11[default = 0];//玩家当前声望值客户端需同步更新
}
//================ 活动编辑器 =============================
//获取奖励请求
message m_special_activity_get_prize_tos {
	required  int32         activity_key             =1;//活动id
	optional  int32         condition_id             =2;
}
//返回获取奖励结果
message m_special_activity_get_prize_toc {
        required  bool          succ                     =1[default=true];//是否领取成功
	optional  string        reason                   =2;
}

//通知用户有奖励领取
message m_special_activity_able_get_toc {
	required int32         activity_key             =1;
}
//获取特殊活动列表信息
message m_special_activity_list_tos{
	required int32         activity_key             =1[default=0];
}
//返回特殊活动列表信息
message m_special_activity_list_toc{
	repeated int32         key_list             =1;//活动奖励列表
}
//活动详细信息
message m_special_activity_detail_tos{
	required int32           activity_key          =1;
}
message m_special_activity_detail_toc{
	required bool            succ                 =1[default=true];
	optional string          reason               =2;
	optional int32           activity_key         =3;
	optional string          title                =4;
	optional string          text                 =5;
	optional int32           activity_start_time           =6;
 	optional int32           activity_end_time             =7;
	optional int32           reward_start_time           =8;
 	optional int32           reward_end_time             =9;
	repeated p_activity_condition            condition_list              =10;
	optional int32           limit                  =11;
}
//玩家主动参与活动
message m_special_activity_stat_tos{
	required int32          activity_key         =1;
	optional int32          goods_id             =2;
}
//返回参与活动结果
message m_special_activity_stat_toc{
	required bool          succ                 =1[default=true];
        optional string        reason               =2;
}

//boss群活动接口 op_type: 1.获取列表,2.获取某个怪物出生地
message m_activity_boss_group_tos{
	required int32        op_type              =1;
	optional int32        boss_id              =2;
}
message m_activity_boss_group_toc{
	required int32        op_type              =1;
	repeated p_boss_group boss_group_list      =2;
	optional int32        boss_id              =3[default=0];
	optional int32        map_id               =4[default=0];
        optional int32        tx                   =5[default=0];
        optional int32        ty                   =6[default=0];
	optional bool         succ                 =7[default=true];
	optional string       reason               =8; 
}

//=================刷棋 ====================
// op_type 1:查询 2:进入 3:退出
message m_shuaqi_fb_request_tos{
    required int32       op_type               =1;
    optional int32       fb_type               =2;
}

message m_shuaqi_fb_request_toc{
    required int32       op_type               =1;
    optional bool        succ                  =2[default=true];
    optional string      reason                =3;
    optional int32       reason_code           =4[default=0];
    optional int32       fight_times           =5;
    optional int32       fb_type               =6;
}

//===============练功房 ======================
// op_type 1:查询 2：进入 3：退出  4:通知玩家寻路
message m_exercise_fb_request_tos{
    required int32      op_type               =1;
    optional int32      fb_type               =2;
}
message m_exercise_fb_request_toc{
    required int32       op_type               =1;
    optional string      reason                =2;
    optional int32       err_code              =3[default=0];
    optional int32       fb_type               =4;
    optional int32       map_id                =6[default=0];
    optional int32       tx                    =7[default=0];
    optional int32       ty                    =8[default=0];
    optional int32       fight_times           =9[default=0];
}
